  rm $jobcontrol
  if [[ $waitflag = no ]]; then

    echo `date` $0 $* write job cards for run begin
#########################################################################################
echo
echo `date`                                                               setup job cards
echo
#########################################################################################
### kate 11/21/2013
        jjjps=$jjjp00
         jjjpe=$jjje00
if [[ $submit_post_together = yes ]]; then
   if (( jjj == $jjjf00 )); then
         jjjps=$jjjp00
         jjjpe=$jjje00
   elif (( jjj == $jjjf00l )); then
         jjjps=$jjjp00l
         jjjpe=$jjje00l
   elif (( jjj == $jjjf06 )); then
         jjjps=$jjjp06
         jjjpe=$jjje06
   elif (( jjj == $jjjf12 )); then
         jjjps=$jjjp12
         jjjpe=$jjje12
   elif (( jjj == $jjjf18 )); then
         jjjps=$jjjp18
         jjjpe=$jjje18
   fi
fi

#########################################################################################
    cat <<eofCAT >$jobcontrol
#!/bin/ksh
#
#BSUB -J $jobname.$yymmddhhmmss
#BSUB -P $account
#BSUB -o $plcomout/$jobname.$yymmddhhmmss.o
#BSUB -e $plcomout/$jobname.$yymmddhhmmss.o
#BSUB -cwd $basetmp/tmpnwprd
#BSUB -W $wall_clock_limit
#BSUB -L /bin/ksh
#
#
eofCAT

    if [[ ${MP_SHARED_MEMORY} = yes ]] ; then
        AFFINITY="core"
      if [[ ${job_type} = parallel ]] ; then
        AFFINITY="core(1)"
      fi
    cat <<eofCAT >>$jobcontrol
#BSUB -q "dev_shared" 
#BSUB -R "rusage[mem=$resources]"
#BSUB -R affinity[${AFFINITY}]
eofCAT
    fi

    if [[ ${MP_SHARED_MEMORY} = no ]] ; then
    cat <<eofCAT >>$jobcontrol
##BSUB -q "prod_class1" 
#BSUB -q "dev" 
#BSUB -x  
##BSUB -R affinity[${AFFINITY}]
#BSUB -R affinity[core(${OMP_NUM_THREADS})]
eofCAT
    fi

#echo ${job_type} DHOU TTT    
    if [[ ${job_type} = parallel ]] ; then
    cat <<eofCAT >>$jobcontrol
#BSUB -a poe
#BSUB -n $total_tasks
#BSUB -R span[ptile=$taskspernode]

#export OMP_NUM_THREADS=$OMP_NUM_THREADS
export MP_EUIDEVICE=sn_all
export MP_EUILIB=us
#export MP_SHARED_MEMORY=${MP_SHARED_MEMORY}
export MP_SHARED_MEMORY=yes
#export MEMORY_AFFINITY=core:$OMP_NUM_THREADS 

export total_tasks=$total_tasks
eofCAT
    fi

#03/29/2013, add the following block following George, for fcst jobs
task_type=`echo ${taskname} | cut -c1-8`
#echo $task_type ${taskname} 
   if [[ ${task_type} = forecast ]] ; then
    cat <<eofCAT >>$jobcontrol
export OMP_STACKSIZE=256000
#env >envv
export MP_EAGER_LIMIT=65535
export MP_EUIDEVELOP=min
export MP_MPILIB=mpich2
export MP_USE_BULK_XFER=no
# 20131202 RLW check this affinity setting for the forecast job
# 20131202 RLW check this affinity setting for the forecast job, DHOU removed it 08/21/2014
#export MP_TASK_AFFINITY=core:1
#export MPICH_ALLTOALL_THROTTLE=0
#export MP_COLLECTIVE_OFFLOAD=yes
#export KMP_STACKSIZE=1024m
#export MEMORY_AFFINITY=core:1
eofCAT
    fi

    cat <<eofCAT >>$jobcontrol
. /usrx/local/Modules/3.2.9/init/ksh
module load ics
eofCAT
    if [[ ${job_type} = parallel ]] ; then
     cat <<eofCAT >>$jobcontrol
module load ibmpe
eofCAT
    fi

     cat <<eofCAT >>$jobcontrol
echo \`date\` $jobdir/$jobscript begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
#DHOU 03/07/2012 1 line
#export jobscript=$jobscript
    if [[ -n $RUN ]]; then
      echo RUN=$RUN
      cat <<eofCAT >>$jobcontrol
export RUN=$RUN
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
#DHOU 03/20/2012
    if [[ $jobscript = JGEFS_NCEPPOST.sms.dev ]]; then
      cat <<eofCAT >>$jobcontrol
export OMP_NUM_THREADS=1
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol
# export for development runs only begin
pwdsave=\$(pwd)
echo \$pwdsave
cd $controldir
. $controldir/setbase
. $parmdir/gefs.parm
cd $pwdsave
export RUN_ENVIR=$envir
export gefsmachine=$gefsmachine
export gefsmpexec=$gefsmpexec
export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
# export yyyymmddccc  #DHOU, 09/09/2010 ad this to facilitate job 000
# RLW disabled since the copy of initial conditions is moved into this script
#if (( jjj == 000 )); then
#  export yyyymmddccc=$yyyymmddccc
#fi
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end

pwdsave=\`pwd\`

echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before begin

################################################
### kate 11/21/2014
export submit_post_together=$submit_post_together
cd $controldir
if [[ $submit_post_together = yes ]]; then
   if (( $jjj == $jjjf00  || $jjj == $jjjf00l || $jjj == $jjjf06 || $jjj == $jjjf12 || $jjj == $jjjf18 )); then
        (( iii = $jjjps  ))
             while (( iii >= $jjjps && iii <= $jjjpe - 2 ));do
                    if (( iii == $jjjpe- 2 )); then
                     $0 $yyyymmddccb\$iii $yyyymmddcce$jjje nextbefore 2>&1
                    else
                    ((  iiie = iii + 2  ))
                     $0 $yyyymmddccb\$iii $yyyymmddccb\$iiie nextbefore 2>&1
                    fi
                    (( iii = iii + 4 ))
            done
   else
   $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
   fi
else

$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
fi


#cd $controldir
#$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
################################################
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore rc=\$rc
cd \$pwdsave
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before end

echo \`date\` $jobdir/$jobscript run before

echo
ls -al $jobdir/$jobscript
echo

# CALL executable job script here
 $jobdir/$jobscript
#/usrx/local/bin/getrusage -rss $jobdir/$jobscript

echo
ls -al $jobdir/$jobscript
echo

echo \`date\` $jobdir/$jobscript run after

echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after begin

###################################################
# Kate 11/21/2013
cd $controldir
if [[ $submit_post_together = yes ]]; then
    if (( $jjj == $jjjs00  && $fcst_segments == 2 ));  then

                     $0 $yyyymmddccb$jjjs00 $yyyymmddccb$jjjr00 nextafter 2>&1

                   (( iii = $jjjr00  ))
             while (( iii >= $jjjr00 && iii <= $jjjz00 -1 ));do
                    if (( iii == $jjjz00 - 1 )); then
                     $0 $yyyymmddccb\$iii $yyyymmddcce\$jjje nextbefore 2>&1
                    else

                    (( iiie = iii + 1 ))
                     $0 $yyyymmddccb\$iii $yyyymmddccb\$iiie nextbefore 2>&1
                    fi
                    (( iii = iii + 1 ))
             done
   else
    $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
   fi
else
       $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
fi

#cd $controldir
#$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
###################################################
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter rc=\$rc

cd \$pwdsave
echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after end

echo \`date\` $jobdir/$jobscript end
echo \`date\` test output files begin
cd $plcomout
cd ..
pwd
#echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
rc=0
#DHOU 03/09/2012
#/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for run end

  else

    echo `date` $0 $* write job cards for wait begin

        cat <<eofCAT >>$jobcontrol
#!/bin/ksh
#
#BSUB -J $jobname.${yymmddhhmmss}w
#BSUB -P $account
#BSUB -W 0:15
#BSUB -o $plcomout/$jobname.$yymmddhhmmss.ow
#BSUB -e $plcomout/$jobname.$yymmddhhmmss.ow
#BSUB -cwd $basetmp/tmpnwprd
#BSUB -n 1
##BSUB -q "hpc_ibm" 
##BSUB -q "dev" 
#BSUB -q "dev_shared"
#BSUB -R "rusage[mem=250]"
#BSUB -R affinity[core]
#BSUB -L /bin/ksh
#BSUB -b $startdate
##BSUB -x  
##BSUB -l mem=500M
export MP_SHARED_MEMORY=yes
export MEMORY_AFFINITY=MCM

echo \`date\` $0 $* $jobdir/$jobscript wait begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
    if [[ -n $RUN ]]; then
      echo RUN=$RUN
      cat <<eofCAT >>$jobcontrol
export RUN=$RUN
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol
# export for development runs only begin
pwdsave=\`$(pwd)\`
echo $pwdsave
cd $controldir
. $controldir/setbase
. $parmdir/gefs.parm
cd $pwdsave
export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end
# CALL executable job script here
echo \`date\` this is the wait job for $jobdir/$jobscript

echo \`date\` $0 $* resubmit before
cd $controldir
$0 $*
rc=\$?
cd \$pwdsave
echo \`date\` $0 $* rc=\$?
echo \`date\` $0 $* resubmit after
echo \`date\` $0 $* $jobdir/$jobscript wait end
echo \`date\` test output files begin
cd $plcomout
cd ..
pwd
echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
rc=0
#/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
#rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for wait end

  fi
