# SUBJOB=
  rm  $jobcontrol$SUBJOB
  if [[ $waitflag = no ]]; then

    echo `date` $0 $* write job cards for run begin
#########################################################################################
echo
echo `date`                                                               setup job cards
echo
#########################################################################################
### kate 11/21/2013
        jjjps=$jjjp00
         jjjpe=$jjje00
if [[ $submit_post_together = yes ]]; then
   if (( jjj == $jjjf00 )); then
         jjjps=$jjjp00
         jjjpe=$jjje00
   elif (( jjj == $jjjf00l )); then
         jjjps=$jjjp00l
         jjjpe=$jjje00l
   elif (( jjj == $jjjf06 )); then
         jjjps=$jjjp06
         jjjpe=$jjje06
   elif (( jjj == $jjjf12 )); then
         jjjps=$jjjp12
         jjjpe=$jjje12
   elif (( jjj == $jjjf18 )); then
         jjjps=$jjjp18
         jjjpe=$jjje18
   fi
fi

#########################################################################################
    cat <<eofCAT >$jobcontrol$SUBJOB
#!/bin/ksh
#BSUB -J $jobname$SUBJOB.$yymmddhhmmss
#BSUB -P $account
#BSUB -o $plcomout/$jobname$SUBJOB.$yymmddhhmmss.o
#BSUB -e $plcomout/$jobname$SUBJOB.$yymmddhhmmss.o
#BSUB -cwd $basetmp/tmpnwprd
#BSUB -W $wall_clock_limit
eofCAT

export POSTGRB2TBL=/gpfs/hps/nco/ops/nwprod/lib/g2tmpl/v1.3.0/src/params_grib2_tbl_new

export gefsmpexec=" ${gefsmpexec} -b -j1 -n${total_tasks} -N${taskspernode} -d${OMP_NUM_THREADS} -cc depth "
export gefsmpexec_mpmd=" ${gefsmpexec} cfp mpmd_cmdfile"

        AFFINITY="core(1)"
    if [[ ${MP_SHARED_MEMORY} = yes ]] ; then
      if [[ ${job_type} = parallel ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS}):distribute=balance"
      fi
    fi
      if [[ ${taskname} = nceppost_hr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
      fi
      if [[ ${taskname} = nceppost_lr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
      fi
      if [[ ${taskname} = ensstat_hr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
        IOBUFSET="cfi*:size=64M:count=4:verbose"
      fi
      if [[ ${taskname} = ensstat_lr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
        IOBUFSET="cfi*:size=64M:count=4:verbose"
      fi
      if [[ ${taskname} = enspost ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
        IOBUFSET="*pgrb2*:size=64M:count=4:verbose,*enspost_grb2*:size=64M:count=4:verbose,*ensstat_grb2*:size=64M:count=4:verbose,*pq?f*:size=64M:count=4:verbose"
      fi
      if [[ ${taskname} = post.track ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
	IOBUFSET="*:size=32M:count=4:verbose"
      fi
      if [[ ${taskname} = post.genesis ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
	IOBUFSET="*:size=32M:count=4:verbose"
      fi
      if [[ ${taskname} = post.cqpf ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
      fi
      if [[ ${taskname} = post.prdgen_hr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS}):distribute=pack"
        IOBUFSET="*:size=64M:count=4:verbose"
      elif [[ ${taskname} = post.prdgen_lr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS}):distribute=pack"
        IOBUFSET="*:size=64M:count=4:verbose"
      elif [[ ${taskname} = prdgen.gfs ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS}):distribute=pack"
        IOBUFSET="*:size=64M:count=4:verbose"
      fi

    export JOBQUEUE=$JOBQUEUE
    JOBQUEUESHARED=$JOBQUEUE
#    JOBQUEUESHARED=$JOBQUEUE\_shared

    if [[ ${job_type} = serial ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
#BSUB -q "$JOBQUEUESHARED" 
#BSUB -R rusage[mem=$resources]
eofCAT
    fi

#   if [[ ${MP_SHARED_MEMORY} = no ]] ; then
    if [[ ${job_type} = parallel ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
#BSUB -q "$JOBQUEUE" 
#BSUB -R rusage[mem=$resources]
eofCAT
    fi

#echo ${job_type} DHOU TTT    
if [[ $taskspernode -eq 0 ]] ; then
   NODES = 0
   else
(( NODES = total_tasks / taskspernode ))
fi

    if [[ ${job_type} = parallel ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
#BSUB -extsched 'CRAYLINUX[]' 
export NODES=$NODES
eofCAT
    fi

      if [[ ${taskname} = nceppost_hr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
      fi
      if [[ ${taskname} = nceppost_lr ]] ; then
        AFFINITY="core(${OMP_NUM_THREADS})"
      fi


	cat <<eofCAT >>$jobcontrol$SUBJOB
. /opt/modules/default/init/ksh
module load PrgEnv-intel ESMF-intel-haswell/3_1_0rp5 cfp-intel-sandybridge iobuf craype-hugepages2M craype-haswell
module use /gpfs/hps/nco/ops/nwprod/modulefiles
module load prod_envir
module load prod_util
module load util_shared/1.0.3
module load grib_util/1.0.3
module load NetCDF-intel-haswell/4.2
module load nco-gnu-sandybridge/4.4.4
#prod_envir points to sigio data, here temporarily set nemsio data source
export COMROOTp1=/gpfs/hps/emc/ensemble/noscrub/Bing.Fu/o/com
export COMROOThps=/gpfs/hps/emc/ensemble/noscrub/Bing.Fu/o/com
echo COMROOTp1=$COMROOTp1
echo COMROOThps=$COMROOThps
export machine="WCOSS_C"
export IOBUF_PARAMS=$IOBUFSET
export FORT_BUFFERED=TRUE
eofCAT

#03/29/2013, add the following block following George, for fcst jobs
task_type=`echo ${taskname} | cut -c1-8`
#echo $task_type ${taskname} 
#  if [[ ${task_type} = forecast ]] ; then

   if [[ ${job_type} = parallel ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
export MKL_CBWR=AVX
ulimit -s unlimited
ulimit -a

export ATP_ENABLED=0
export MALLOC_MMAP_MAX_=0
export MALLOC_TRIM_THRESHOLD_=134217728

export MPICH_ABORT_ON_ERROR=1
export MPICH_ENV_DISPLAY=1
export MPICH_VERSION_DISPLAY=1
export MPICH_CPUMASK_DISPLAY=1

export KMP_STACKSIZE=1024m
export OMP_NUM_THREADS=$OMP_NUM_THREADS
export KMP_AFFINITY=disabled

eofCAT
# 20131202 RLW check this affinity setting for the forecast job
# 20131202 RLW check this affinity setting for the forecast job, DHOU removed it 08/21/2014
    fi

    if [[ ${job_type} = parallel ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
#export OMP_NUM_THREADS=$OMP_NUM_THREADS
export KMP_AFFINITY=disabled

export MP_EUIDEVICE=sn_all
export MP_EUILIB=us
export MP_SHARED_MEMORY=${MP_SHARED_MEMORY}
export MEMORY_AFFINITY=core:$OMP_NUM_THREADS 

export total_tasks=$total_tasks
export OMP_NUM_THREADS=$OMP_NUM_THREADS
export taskspernode=$taskspernode
eofCAT
    fi
      if [[ ${taskname} = init.separate ]] ; then
    cat <<eofCAT >>$jobcontrol$SUBJOB
 export MP_TASK_AFFINITY=cpu:$OMP_NUM_THREADS
 export MP_USE_BULK_XFER=yes
 export MP_STDOUTMODE=unordered
 export MPICH_ALLTOALL_THROTTLE=0
 export MP_COREFILE_FORMAT=core.txt
 export OMP_STACKSIZE=3G
 export MP_COMPILER=intel
#export KMP_AFFINITY=granularity=fine,scatter
eofCAT
 fi


     cat <<eofCAT >>$jobcontrol$SUBJOB
echo \`date\` $jobdir/$jobscript begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
#DHOU 03/07/2012 1 line
#export jobscript=$jobscript
    if [[ -n $RUN ]]; then
      echo RUN=$RUN
      cat <<eofCAT >>$jobcontrol$SUBJOB
export RUN=$RUN
eofCAT
    fi
    if [[ -n $RUNMEM ]]; then
      echo RUNMEM=$RUNMEM
      cat <<eofCAT >>$jobcontrol$SUBJOB
export RUNMEM=$RUNMEM
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol$SUBJOB
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
    if [[ -n $SUBJOB ]]; then
      echo SUBJOB=$SUBJOB
      cat <<eofCAT >>$jobcontrol$SUBJOB
export SUBJOB=$SUBJOB
eofCAT
    fi
    if [[ -n $DO_LOW_RES ]]; then
      echo DO_LOW_RES=$DO_LOW_RES
      cat <<eofCAT >>$jobcontrol$SUBJOB
export DO_LOW_RES=$SDO_LOW_RES
eofCAT
    fi
#DHOU 03/20/2012
    if [[ $jobscript = JGEFS_NCEPPOST.sms.dev ]]; then
      cat <<eofCAT >>$jobcontrol$SUBJOB
export OMP_NUM_THREADS=1
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol$SUBJOB
# export for development runs only begin
pwdsave=$(pwd)
echo $pwdsave
cd $controldir
. $controldir/setbase
. $parmdir/gefs.parm
cd $pwdsave
export RUN_ENVIR=$envir
export gefsmachine=$gefsmachine
export gefsmpexec="${gefsmpexec}"
export gefsmpexec_mpmd="${gefsmpexec_mpmd}"
export APRUNC="aprun"
export aprun_gec00="aprun -b -j1 -n1 -N1 -d24 -cc depth"
export NTHREADS_SIGCHGRS=6

export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end

pwdsave=\`pwd\`

echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before begin
eofCAT

if [[ $SUBJOB = '' ]] || [[ $SUBJOB = A ]]; then
################################################
### kate 11/21/2014
export submit_post_together=$submit_post_together
cd $controldir
#if [[ $submit_post_together = yes ]]; then
if [[ $submit_post_together = yes ]] && (( $jjje > $jjj + 1 )); then
   if (( $jjj == $jjjf00  || $jjj == $jjjf00l || $jjj == $jjjf06 || $jjj == $jjjf12 || $jjj == $jjjf18 )); then
        (( iii = $jjjps  ))
#       (( iii = $jjj + 2  ))
	 echo $iii $iiie $jjjps $jjjpe
             while (( iii >= $jjjps && iii <= $jjjpe - $nprdgen - 1 ));do
                    (( iiie = $iii + $nprdgen + 1 ))
                    if (( iii == $jjjpe - $nprdgen - 1 && jjje >= $iiie )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
                    else
		     echo $iii $iiie
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddccb$iiie nextbefore 2>&1
eofCAT
                    fi
                    (( iii = iii + 4 ))
            done
   else
      cat <<eofCAT >>$jobcontrol$SUBJOB
   cd $controldir
   $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
   fi
else

      cat <<eofCAT >>$jobcontrol$SUBJOB
cd $controldir
$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
fi

fi  #SUBJOB

      cat <<eofCAT >>$jobcontrol$SUBJOB
#cd $controldir
#$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
################################################
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore rc=\$rc
cd $pwdsave
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before end

echo \`date\` $jobdir/$jobscript run before

echo
ls -al $jobdir/$jobscript
echo

# CALL executable job script here
 export jobgrid=$jobgrid
 $jobdir/$jobscript
#/usrx/local/bin/getrusage -rss $jobdir/$jobscript

echo
ls -al $jobdir/$jobscript
echo

eofCAT

# BF 05/11/2017 run fv3 chgres by member
typeset -RZ3 jjj=$jjj
typeset -RZ3 jjjv00b=$jjjv00b
typeset -RZ3 jjjv00e=$jjjv00e
typeset -RZ3 iii=$iii
typeset -RZ3 iiie=$iiie
echo $jjj
echo $jjjv00b
echo $jjjv00e
echo $iii
echo $iiie
echo $jjjfh00e

if [[ $SUBJOB = '' ]] || [[ $SUBJOB = A ]]; then

echo \`date\` $jobdir/$jobscript run after

echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after begin

###################################################
# Kate 11/21/2013
cd $controldir
if [[ $submit_chgres_together = yes ]] && (( $jjj == $jjjs00 )) && (( $fcst_segments == 2 )); then    

      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$jjjs00 $yyyymmddccb$jjjr00 nextafter 2>&1
eofCAT

                   (( iii = $jjjr00  ))
             while (( iii >= $jjjr00 && iii <= $jjjz00 -1 ));do
                    if (( iii == $jjjz00 - 1 )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
                    else

                    (( iiie = iii + 1 ))
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddccb$iiie nextbefore 2>&1
eofCAT
                    fi
                    (( iii = iii + 1 ))
             done
#BF 05/15/2017 nemsgfs to nemsfv3 chgres 
elif [[ $jjj == 014 ]]; then

      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$jjj $yyyymmddccb$jjjv00b nextafter 2>&1
eofCAT

                   (( iii = $jjjv00b  ))
             while (( iii >= $jjjv00b && iii <= $jjjv00e -1 ));do
                    if (( iii == $jjjv00e - 1 )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
                    else

                    (( iiie = iii + 1 ))
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddccb$iiie nextbefore 2>&1
eofCAT
                    fi
                    (( iii = iii + 1 ))
             done


#BF 05/15/2017 nemsfv3 high rresolution fcst by member
elif [[ $jjj == $jjjv00e ]]; then

      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$jjj $yyyymmddccb$jjjfh00b nextafter 2>&1
eofCAT
typeset -RZ2 ii=`echo $jjjfh00b | cut -c2-3`
typeset -RZ2 iifhe=`echo $jjjfh00e | cut -c2-3`
typeset -RZ2 iie                   
             while (( ii >= $ii && ii <= $iifhe -1 ));do
                    if (( ii == $iifhe - 1 )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 ${yyyymmddccb}h$ii ${yyyymmddcce}$jjje nextbefore 2>&1
eofCAT
                    else

                    (( iie = ii + 1 ))
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 ${yyyymmddccb}h$ii ${yyyymmddccb}h$iie nextbefore 2>&1
eofCAT
                    fi
                    (( ii = ii + 1 ))
             done


elif [[ $jjj == $jjjfh00e ]]; then

      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$jjj $yyyymmddccb$jjjph00b nextafter 2>&1
eofCAT

                   (( iii = $jjjph00b  ))
             while (( iii >= $jjjph00b && iii <= $jjjph00e - 4 ));do
                    if (( iii == $jjjph00e - 4 )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
                    else

                    (( iiie = iii + 4 ))
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddccb$iiie nextbefore 2>&1
eofCAT
                    fi
                    (( iii = iii + 4 ))
             done

elif [[ $jjj == $jjjph00e ]]; then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$jjj $yyyymmddccb$jjjdh00b nextafter 2>&1
eofCAT

                   (( iii = $jjjdh00b  ))
             while (( iii >= $iii && iii <= $jjjdh00e - 4 ));do
                    if (( iii == $jjjdh00e - 4 )); then
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddcce$jjje nextbefore 2>&1
eofCAT
                    else

                    (( iiie = iii + 4 ))
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
                     $0 $yyyymmddccb$iii $yyyymmddccb$iiie nextbefore 2>&1
eofCAT
                    fi
                    (( iii = iii + 4 ))
             done



else
      cat <<eofCAT >>$jobcontrol$SUBJOB
                     cd $controldir
       $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
eofCAT
fi

#cd $controldir
#$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
###################################################
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter rc=\$rc

cd $pwdsave
echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after end

fi #SUBJOB

      cat <<eofCAT >>$jobcontrol$SUBJOB
echo \`date\` $jobdir/$jobscript end
echo \`date\` test output files begin
cd $plcomout
cd ..
pwd
#echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
rc=0
#DHOU 03/09/2012
#/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for run end

  else       # WAIT job card is written

    echo `date` $0 $* write job cards for wait begin

        cat <<eofCAT >>$jobcontrol$SUBJOB
#!/bin/ksh
#
#BSUB -J $jobname.${yymmddhhmmss}w
#BSUB -P $account
#BSUB -W 0:15
#BSUB -o $plcomout/$jobname.$yymmddhhmmss.ow
#BSUB -e $plcomout/$jobname.$yymmddhhmmss.ow
#BSUB -cwd $basetmp/tmpnwprd
#BSUB -n 1
#BSUB -q "$JOBQUEUE"
#BSUB -R "rusage[mem=250]"
#BSUB -R affinity[core]
#BSUB -L /bin/ksh
#BSUB -b $startdate
export MP_SHARED_MEMORY=yes
export MEMORY_AFFINITY=MCM

echo \`date\` $0 $* $jobdir/$jobscript wait begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
    if [[ -n $RUNMEM ]]; then
      echo RUN=$RUNMEM
      cat <<eofCAT >>$jobcontrol$SUBJOB
export RUNMEM=$RUNMEM
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol$SUBJOB
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
    if [[ -n $POSTJOBTYPE ]]; then
      echo POSTJOBTYPE=$POSTJOBTYPE
      cat <<eofCAT >>$jobcontrol$SUBJOB
export POSTJOBTYPE=$POSTJOBTYPE
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol$SUBJOB
# export for development runs only begin
pwdsave=\`$(pwd)\`
echo $pwdsave
cd $controldir
. $controldir/setbase
. $parmdir/gefs.parm
cd $pwdsave
export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end
# CALL executable job script here
echo \`date\` this is the wait job for $jobdir/$jobscript

if [[ $SUBJOB = '' ]] || [[ $SUBJOB = A ]]; then
echo \`date\` $0 $* resubmit before
cd $controldir
$0 $*
rc=\$?
cd \$pwdsave
echo \`date\` $0 $* rc=\$?
echo \`date\` $0 $* resubmit after
echo \`date\` $0 $* $jobdir/$jobscript wait end
echo \`date\` test output files begin
fi #SUBJOB
cd $plcomout
cd ..
pwd
echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
rc=0
#/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
#rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for wait end

  fi
