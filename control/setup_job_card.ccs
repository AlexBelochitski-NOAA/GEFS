  if [[ $waitflag = no ]]; then

    echo `date` $0 $* write job cards for run begin
#########################################################################################
echo
echo `date`                                                               setup job cards
echo
#########################################################################################

    cat <<eofCAT >$jobcontrol
#@ job_name=$jobname.\$(jobid)
#@ job_type = $job_type
#@ output = $plcomout/$jobname.$yymmddhhmmss.\$(jobid).o
#@ error = $plcomout/$jobname.$yymmddhhmmss.\$(jobid).o
#@ initialdir = $tmpdir
#@ account_no = $account
#@ group = $group
#@ class = $class
#  environment = COPY_ALL
#@ wall_clock_limit = $wall_clock_limit
#@ notification = never
eofCAT
    if [[ -n $resources ]]; then
      echo include resources=$resources
      cat <<eofCAT >>$jobcontrol
#@ resources = $resources
eofCAT
    fi
    if [[ -n $task_affinity ]]; then
      echo include task_affinity=$task_affinity
      cat <<eofCAT >>$jobcontrol
#@ task_affinity = $task_affinity
eofCAT
    fi
    if [[ ${job_type} = parallel ]] ; then
      echo include statements for parallel jobs
      if [[ -n $total_tasks ]]; then
	echo include total_tasks=$total_tasks
	cat <<eofCAT >>$jobcontrol
#@ total_tasks = $total_tasks
eofCAT
      fi
      if [[ -n $node ]]; then
	echo include node=$node
	cat <<eofCAT >>$jobcontrol
#@ node = $node
eofCAT
      fi
      if [[ -n $node_resources ]]; then
	echo include node_resources=$node_resources
	cat <<eofCAT >>$jobcontrol
#@ node_resources = $node_resources
eofCAT
      fi
      if [[ -n $node_usage ]]; then
	echo include node_usage=$node_usage
	cat <<eofCAT >>$jobcontrol
#@ node_usage = $node_usage
eofCAT
      fi
      if [[ -n $tasks_per_node ]]; then
	echo include tasks_per_node=$tasks_per_node
	cat <<eofCAT >>$jobcontrol
#@ tasks_per_node = $tasks_per_node
eofCAT
      fi
      if [[ -n $parallel_threads ]]; then
	echo include parallel_threads=$parallel_threads
	cat <<eofCAT >>$jobcontrol
#@ parallel_threads = $parallel_threads
eofCAT
      fi
      if [[ -n $network_MPI ]]; then
	echo include network_MPI=$network_MPI
	cat <<eofCAT >>$jobcontrol
#@ network.MPI = $network_MPI
eofCAT
      fi
    fi
    cat <<eofCAT >>$jobcontrol
#@ shell = /bin/sh
#@ queue
echo \`date\` $jobdir/$jobscript begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
    if [[ -n $RUN ]]; then
      echo RUN=$RUN
      cat <<eofCAT >>$jobcontrol
export RUN=$RUN
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol
# export for development runs only begin
. $controldir/setbase
. $parmdir/gefs.parm
export RUN_ENVIR=$envir
export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
# export yyyymmddccc  #DHOU, 09/09/2010 ad this to facilitate job 000
# RLW disabled since the copy of initial conditions is moved into this script
#if (( jjj == 000 )); then
#  export yyyymmddccc=$yyyymmddccc
#fi
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end

pwdsave=\`pwd\`

echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before begin

cd $controldir
$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore 2>&1
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextbefore rc=\$rc
cd \$pwdsave
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev before end

echo \`date\` $jobdir/$jobscript run before

echo
ls -al $jobdir/$jobscript
echo

# CALL executable job script here
$jobdir/$jobscript

echo
ls -al $jobdir/$jobscript
echo

echo \`date\` $jobdir/$jobscript run after

echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after begin

cd $controldir
$0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter 2>&1
rc=\$?
echo \`date\` $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje nextafter rc=\$rc

cd \$pwdsave
echo \`date\` $0  $yyyymmddccb$jjjb $yyyymmddcce$jjje next submit for dev after end

echo \`date\` $jobdir/$jobscript end
echo \`date\` test output files begin
cd $plcomout
cd ..
pwd
#echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
#rc=0
/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for run end

  else

    echo `date` $0 $* write job cards for wait begin

    cat <<eofCAT >$jobcontrol
#@ job_name=$jobname.\$(jobid)w
#@ job_type = serial
#@ output = $plcomout/$jobname.$yymmddhhmmss.\$(jobid).ow
#@ error = $plcomout/$jobname.$yymmddhhmmss.\$(jobid).ow
#@ initialdir = $basesource/nwdev/control
#@ account_no = $account
#@ group = $group
#@ class = $classs
#  environment = COPY_ALL
#@ resources = ConsumableCpus(1) ConsumableMemory(500Mb)
#@ wall_clock_limit = 00:15:00
#@ startdate = $startdate
#@ notification = never
#@ shell = /bin/sh
#@ queue
echo \`date\` $0 $* $jobdir/$jobscript wait begin
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end

export envir=$envir
export cyc=$cyc
export cyc_fcst=$cyc_fcst
export job=$jobname
eofCAT
    if [[ -n $RUN ]]; then
      echo RUN=$RUN
      cat <<eofCAT >>$jobcontrol
export RUN=$RUN
eofCAT
    fi
    if [[ -n $FORECAST_SEGMENT ]]; then
      echo FORECAST_SEGMENT=$FORECAST_SEGMENT
      cat <<eofCAT >>$jobcontrol
export FORECAST_SEGMENT=$FORECAST_SEGMENT
eofCAT
    fi
    cat <<eofCAT >>$jobcontrol
# export for development runs only begin
. $controldir/setbase
. $parmdir/gefs.parm
export jjj=$jjj
export jjje=$jjje
export yyyymmddcc=$yyyymmddcc
export yyyymmddcce=$yyyymmddcce
export yyyymmddccjjj=$yyyymmddccjjj
export yyyymmddccjjje=$yyyymmddccjjje
export PDYp2=$PDYp2
export PDYp1=$PDYp1
export PDY=$PDY
export PDYm1=$PDYm1
export PDYm2=$PDYm2
export PDYm3=$PDYm3
export PDYm4=$PDYm4
export PDYm5=$PDYm5
export id=$id
export expid=$expid
export basesource=$basesource
export baseoutput=$baseoutput
export baseinitarch=$baseinitarch
export basetmp=$basetmp
export baseptmp=$baseptmp
export basebin=$basebin
export baselog=$baselog
export basedgfs=$basedgfs
export basedgens=$basedgens
echo \`date\` env sort begin
env | sort
echo \`date\` env sort end
# export for development runs only end
# CALL executable job script here
echo \`date\` this is the wait job for $jobdir/$jobscript

echo \`date\` $0 $* resubmit before
$0 $*
rc=\$?
echo \`date\` $0 $* rc=\$?
echo \`date\` $0 $* resubmit after
echo \`date\` $0 $* $jobdir/$jobscript wait end
echo \`date\` test output files begin
cd $plcomout
cd ..
pwd
echo TEST TESTS output check disabled TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST
rc=0
#/global/save/wx20rw/h/bin/hpss.put.output.day >/dev/null 2>&1
#rc=\$?
if (( rc == 0 )); then
  echo do not reset waitflag because rc=\$rc
else
  echo reset waitflag because rc=\$rc
  echo waitflag=\`cat $controldir/waitfile.$machl\` before
  echo yes>$controldir/waitfile.$machl
  echo waitflag=\`cat $controldir/waitfile.$machl\` after
fi
echo \`date\` test output files end
eofCAT

    echo `date` $0 $* write job cards for wait end

  fi


  echo
  echo `date` job cards begin
  echo
  cat $jobcontrol
  echo 
  echo `date` job cards end
  echo

  cd $plcontrolt
  rc=$?
  if (( rc != 0 )); then
    echo cd plcontrolt=$plcontrolt FAILED rc=$rc
    echo
    echo `date` $0 $* EXIT ABORT $rc
    echo
    exit $rc
  fi

  echo
  echo `date` $0 environment before submit
  echo
  env|sort

  echo
  ls -al $jobcontrol

  ################################################################ tcdsflag section begin

  if [[ $tcdsflag = yes ]]; then
    echo `date` $0 $* tcdsflag test statement inserted here
    echo `date` $0 $* $0 before
    pwd
    cd $nldir
    pwd
    sleep 3
    echo  $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje tcdsnext
    nohup $0 $yyyymmddccb$jjjb $yyyymmddcce$jjje tcdsnext >/dev/null 2>&1 &
    sleep 1 
    echo `date` $0 $* $0 after
  else

  ################################################################## tcdsflag section end

  echo
  echo `date` $0 $*                                                    submit $jobcontrol
  echo
  ####### extra submit test begin #######################################################
  if (( jobllq > jobmax )); then
    echo jobllq=$jobllq exceeds jobmax=$jobmax WHICH IS TOO MANY LL JOBS
    echo
    echo `date` $0 $* EXIT ABORT $jobllq
    echo
    exit $jobllq
  else
    echo jobllq=$jobllq does not exceed jobmax=$jobmax
  fi
  ###### extra submit test end ##########################################################
  llsubmit $jobcontrol
  rc=$?
  if (( rc != 0 )); then
    echo llsubmit $jobcontrol FAILED rc=$rc
    echo `date` $0 $* cat llqstring before
    cat $llqstring
    echo `date` $0 $* cat llqstring after
  fi

fi
