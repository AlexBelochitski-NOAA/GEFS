#!/bin/ksh
#
# create control and parm directories for a linked clone of the local gefs system
#
# if this is already a linked clone, create another one identical to this one
#
echo `date` $0 $* begin
#
# set up the directories
#

nldir=`pwd`
nlbdir=`basename $nldir`
nlddir=`dirname $nldir`
nldbdir=`basename $nlddir`
nldddir=`dirname $nlddir`
nlddbdir=`basename $nldddir`
nlddddir=`dirname $nldddir`
nldddbdir=`basename $nlddddir`
nldddddir=`dirname $nlddddir`
nlddddbdir=`basename $nldddddir`
nlddddddir=`dirname $nldddddir`
echo nldir=$nldir
echo nlbdir=$nlbdir
echo nlddir=$nlddir
echo nldbdir=$nldbdir
echo nldddir=$nldddir
echo nlddbdir=$nlddbdir
echo nlddddir=$nlddddir
echo nldddbdir=$nldddbdir
echo nldddddir=$nldddddir
echo nlddddbdir=$nlddddbdir
echo nlddddddir=$nlddddddir

controldir=control
envdir=nwdev
basedirstring=s
echo controldir=$controldir
echo envdir=$envdir
echo basedirstring=$basedirstring

success=no

if [[ $nlbdir = $controldir ]] && \
   [[ $nldbdir = $envdir ]] && \
   [[ $nldddbdir = $basedirstring ]] ; then
   expidsource=$nlddbdir
   useridsource=$nlddddbdir
   echo expidsource=$expidsource
   echo useridsource=$useridsource
   if [[ $# == 1 ]]; then
     expiddest=$1
     useriddest=$LOGNAME
     echo expiddest=$expiddest
     echo useriddest=$useriddest
     basesource=$nlddir
     echo basesource=$basesource
     basedest=$nlddddddir/$useriddest/$basedirstring/$expiddest/$envdir
     echo basedest=$basedest
     if [[ -d $basedest ]]; then
       echo basedest=$basedest ALREADY EXISTS
       echo the existing directory will not be overwritten
     elif [[ -a $basedest ]]; then
       echo basedest=$basedest ALREADY EXISTS as a file
       echo the existing file will not be overwritten
     else
       echo basedest=$basedest does not exist yet
	   #       echo QUIT BEFORE DOING ANYTHING
	   #       exit
       mkdir -p $basedest
       rc=$?
       if (( rc == 0 )); then
	 if [[ -d $basedest ]]; then
	   cd $basesource
	   rc=$?
	   if (( rc == 0 )); then
	     (( rctot = 0 ))
	     (( ncopy = 0 ))
	     (( nlink = 0 ))
	     for dir in *
	     do
	       # test the directories to see whether this is a new clone or a clone of a clone
	       case $dir in
		 (control)
		   if (( rctot == 0 )); then
		     echo this is the $dir directory, copy it
		     cp -prP $basesource/$dir $basedest/$dir
		     rc=$?
		     if (( rc == 0 )); then
		       ls -ald $basesource/$dir $basedest/$dir
		     else
		       echo
		       echo cp -prP $basesource/$dir $basedest/$dir FAILED rc=$rc
		       (( rctot = rctot + rc ))
		     fi
		   else
		     echo
		     echo ln -s $basesource/$dir $basedest/$dir SKIPPED becasue rctot=$rctot
		   fi
		 ;;
		 (parm)
		   if (( rctot == 0 )); then
		     echo this is the $dir directory, copy it
		     cp -prP $basesource/$dir $basedest/$dir
		     rc=$?
		     if (( rc == 0 )); then
		       ls -ald $basesource/$dir $basedest/$dir
		     else
		       echo
		       echo cp -prP $basesource/$dir $basedest/$dir FAILED rc=$rc
		       (( rctot = rctot + rc ))
		     fi
		   else
		     echo
		     echo ln -s $basesource/$dir $basedest/$dir SKIPPED becasue rctot=$rctot
		   fi
		 ;;
		 (sorc)
		   if (( rctot == 0 )); then
		     echo this is the $dir directory, copy it
		     cp -prP $basesource/$dir $basedest/$dir
		     rc=$?
		     if (( rc == 0 )); then
		       ls -ald $basesource/$dir $basedest/$dir
		     else
		       echo
		       echo cp -prP $basesource/$dir $basedest/$dir FAILED rc=$rc
		       (( rctot = rctot + rc ))
		     fi
		   else
		     echo
		     echo ln -s $basesource/$dir $basedest/$dir SKIPPED becasue rctot=$rctot
		   fi
		 ;;
		 (exec)
		   if (( rctot == 0 )); then
		     echo this is the $dir directory, copy it
		     cp -prP $basesource/$dir $basedest/$dir
		     rc=$?
		     if (( rc == 0 )); then
		       ls -ald $basesource/$dir $basedest/$dir
		     else
		       echo
		       echo cp -prP $basesource/$dir $basedest/$dir FAILED rc=$rc
		       (( rctot = rctot + rc ))
		     fi
		   else
		     echo
		     echo ln -s $basesource/$dir $basedest/$dir SKIPPED becasue rctot=$rctot
		   fi
		 ;;
		 (*)
		   if (( rctot == 0 )); then
		     if [[ -L $dir ]]; then
		       (( ncopy = ncopy + 1 ))
		       cp -P $basesource/$dir $basedest/$dir
		       rc=$?
		       if (( rc == 0 )); then
			 ls -ald $basesource/$dir $basedest/$dir
		       else
			 echo
			 echo cp -P $basesource/$dir $basedest/$dir FAILED rc=$rc
			 (( rctot = rctot + rc ))
		       fi
		     else
		       (( nlink = nlink + 1 ))
		       ln -s $basesource/$dir $basedest/$dir
		       rc=$?
		       if (( rc == 0 )); then
			 ls -ald $basesource/$dir $basedest/$dir
		       else
			 echo
			 echo ln -s $basesource/$dir $basedest/$dir FAILED rc=$rc
			 (( rctot = rctot + rc ))
		       fi
		     fi
		   else
		     echo
		     echo ln -s $basesource/$dir $basedest/$dir SKIPPED becasue rctot=$rctot
		   fi
		 ;;
	       esac
	     done
	     if (( rctot == 0 )); then
	       echo
	       echo creation of $expiddest is complete
	       ls -al $basedest
	     else
	       echo
	       echo creation of $expiddest is INCOMPLETE rctot=$rctot
	     fi
	     echo
	     if (( nlink > 0 )); then
	       if (( ncopy > 0 )); then
		 echo nlink=$nlink subdirectories were linked AND ncopy=$ncopy links were copied
		 echo WARNING: expidtest=$expidtest IS A CLONE OF A MIXTURE OF LINKS AND DIRECTORIES IN expidsource=$expidsource
	       else
		 success=yes
		 echo nlink=$nlink subdirectories were linked
		 echo expiddest=$expiddest is a clone of directory tree expidsource=$expidsource
	       fi
	     else
	       if (( ncopy > 0 )); then
		 success=yes
		 echo ncopy=$ncopy links were copied
		 echo expiddest=$expiddest is a clone of existing clone expidsource=$expidsource
	       else
		 echo NO DIRECTORIES WEREE LINKED OR FILED
		 echo THE SOURCE DIRECTORY WAS INCOMPLETE
	       fi
	     fi
	   else
	     echo
	     echo cd $basesoruce FAILED rc=$?
	   fi
	 else
	   echo
	   echo basedest=$basedest DOES NOT EXIST AS A DIRECTORY
	 fi
       else
	 echo
	 echo mkdir -p $basedest FAILED rc=$rc
       fi
     fi
   else
     echo
     echo one argument is required instead of $*
   fi
else
  echo
  echo nldir=$nldir IS NOT a GEFS control subdirectory
fi

echo success=$success

if [[ $success != yes ]]; then
  echo
  echo one argument reequired: expid
  echo expid must be 4 characters long and will be created in a directory
  echo analogous to the location of the parent of the current working directory
  echo
  echo the current working directory should be control subdirectory of either
  echo 1:  a GEFS directory tree
  echo 2:  a clone of a GEFS directory tree as created by this script
  echo
  echo the current working directory may belong to another user
  echo the user of the script must have permission to run the script and copy the directories
  echo the destination location must belong the the user of the script
  echo
fi

echo `date` $0 $* end
