#!/bin/ksh -l
###testb
# lines between ###testb and ###teste not needed for production
###teste
echo `date` $0 begin
################################################################################
#   Script:	exgefs_init.sh.sms
#
################################################################################

set +xa
echo " ------------------------------------------------------------"
echo "  "
echo "            GLOBAL ENSEMBLE INITIALIZATION "
echo "  "
echo "                `date`     "
echo "  "
echo "                   JOB  $job  "
echo "  "
echo "  "
echo "               FORECAST cycle TIME is $cycle"
echo "  "
echo " ------------------------------------------------------------"
echo "          processing info for this execution"
echo " Home directory is ............................ $HOMEGLOBAL"
echo " Processing directory for files.. ............. $DATA"
echo "  "
echo " Executable file directory is ................. $EXECGLOBAL"
echo " Fixed field directory is ..................... $FIXGLOBAL"
echo " Parameter directory is ....................... $PARMGLOBAL"
echo " Unix control language file is ................ $USHGLOBAL"
echo "  "
echo " Network id is ................................ $NET"
echo " Run id for $com processing is ................ $RUN"
echo "  "
echo " standard output in file ...................... $pgmout"
echo " unique processing id for run ................. $pid"
echo " YES SENDCOM means save com files ............. $SENDCOM"
echo " ------------------------------------------------------------"
set -xa

cd $DATA

################################################################################

echo relocfact=$relocfact relocflag=$relocflag



echo cyc=$cyc cyc_fcst=$cyc_fcst

export pdycycp=`$NDATE -$fhrp $PDY$cyc`
#export pdycycp=`ndate -$fhrp $PDY$cyc`
export pdyp=`echo $pdycycp|cut -c1-8`
export cycp=`echo $pdycycp|cut -c9-10`

echo pdycycp=$pdycycp pdyp=$pdyp cycp=$cycp



echo
echo `date` $0 poe combine loop begin
echo

ls -al poescript*
rm -rf poescript*
############# kate 05/01/2012

rm -rf cmdfile
############# 05/01/2012
#  Select EnKF members for four cycling
case $cyc in
                        (00) (( nlist_start = 1 )) ;;
                        (06) (( nlist_start = nmem_enkf / 4 + 1  ));;
                        (12) (( nlist_start = 2 * nmem_enkf / 4 + 1 ));;
                        (18) (( nlist_start = 3 * nmem_enkf / 4 + 1  )) ;;
esac # $cyc


(( nlist_end = nlist_start + npert ))
echo EnKF members from $nlist_start to $nlist_end are selected for $cyc cycle

(( itask = 1 ))
(( imem = nlist_start ))

while (( imem <= nlist_end )) ; do

		(( imem0 = imem - nlist_start + 1 ))
		(( imema = imem  ))

        	if ((  imem > nmem_enkf )); then
	  	         (( imema = imem - nmem_enkf ))
	        fi

        	echo 'echo `date` ############ poescript'" $itask begin">>poescript.$itask
	        echo 'echo `date` ###### `uname -a` ######'" mem=$imema start">>poescript.$itask
                echo "$USHgefs/gefs_init_combine.sh $imema $imem0 $fhrp $inflag $relocfact >ushout.combine.$itask 2>&1" >>poescript.$itask
		echo 'echo `date` ###### `uname -a` ######'" mem=$imema end">>poescript.$itask

	        (( itask = itask + 1 ))
       		 (( imem = imem + 1 ))
done


        (( itask = 1 ))
while (( itask <= npert  )); do
        chmod 755 poescript.$itask
        ls -al poescript.$itask
        echo
        cat poescript.$itask
        echo
        echo "poescript.$itask" >>poescript
        (( itask = itask + 1 ))
done # while (( itask < npert ))


echo
chmod 755 poescript
ls -al poescript
cp -pr poescript cmdfile
echo
cat poescript
echo

#export MP_HOLDTIME=1000

export MP_CMDFILE=poescript

echo
echo before ls before poe
echo

pwd
ls -ablp
echo
echo DATA=$DATA before poe

echo "APRUN=$APRUN"
export MP_CMDFILE=poescript
export MP_PGMMODEL=mpmd
export MP_LABELIO=yes
export MP_INFOLEVEL=3
export MP_STDOUTMODE=unordered

rm mpmd_cmdfile
ln -s $MP_CMDFILE mpmd_cmdfile
$APRUN

echo DATA=$DATA after poe
pwd
ls -ablp

echo
echo after ls after poe
echo

for itask in {1..$npert}; do
	file=ushout.combine.$itask
	echo "############################### file=$file begin #######################"
	cat $file
	echo "############################### file=$file end ##########################"
	echo
done # for ipair in $nlist

echo
echo `date` $0 poe combine  loop end
echo

#
# combine output
#

for itask in {1..$npert}; do
	cat break >>$pgmout
	echo itask=$itask begin >>$pgmout
	cat break >>$pgmout >>$pgmout
	cat task.$itask/$pgmout >>$pgmout
	cat break >>$pgmout
	echo itask=$itask end >>$pgmout
	cat break >>$pgmout
	cat task.$itask/errfile >>$pgmout
	cat break >>$pgmout
done # for itask from 1 to $npert

#
echo
echo "############################# before pgmout ######################"
echo
cat $pgmout
echo
echo "############################# after pgmout ######################"
echo

################################################################################

# DBN alerts moved to ush/enstr_pair_combine.sh

########################################################

###testb
#if [[ $envir = prod ]] || [[ $envir = para ]] || [[ $envir = test ]]; then
###teste
msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################# END OF SCRIPT #######################
###testb
#else
#  echo skip delete for now
#fi
###teste
echo `date` $0 end
