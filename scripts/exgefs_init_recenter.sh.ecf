#!/bin/ksh

echo `date` $0 begin

################################################################################
#   Script:	exgefs_init_recenter.sh.sms
#
#   Author:	Xiaqiong Zhou
#   Date:	2018 March 08
#        April 2018, Dingchen Hou: Slight modification for consistency of the cold start part
#        May 8 2018, Dingchen Hou: Added function for enkf membership shifting with the 4 cucles
#        May 8 2018, Dingchen Hou: Added function to allow fleximble ensemble size
#        April 2018, Bing Fu: Added the warm start part
#        May 11 2018: Dingchen Hou: Added enkf membership shifting and flexible gefs membership 
#
#    Abstract:	Creates initial conditions for the global ensemble (GEFS) from FV3 based enkf
#		6-h forecast nemsio files 
#		Cold start: Recenter the 6 hour forecast to gfs analysis (nemsio) file
#			The resulted nemsio files need to changed to netCDF in init_fv3chgres jobs
#		Warm start: Generate  increment file (netCDF format) for the ensemble members 
#			from the ensemble mean forecast and gfs analysis, for the encemble contro;
#                        from enkf member npert+1 forecast and gfs analysis
#                	The netCDF format increment files will be used in the forecast job, together
#			with RESTAT files  
#
################################################################################

echo " ------------------------------------------------------------"
echo "  "
echo "            GLOBAL ENSEMBLE INITIALIZATION "
echo "  "
echo "                `date`     "
echo "  "
echo "                   JOB  $job  "
echo "  "
echo "  "
echo "               FORECAST cycle TIME is $cycle"
echo "  "
echo " ------------------------------------------------------------"
echo "          processing info for this execution"
echo " Home directory is ............................ $HOMEGLOBAL"
echo " Processing directory for files.. ............. $DATA"
echo "  "
echo " Executable file directory is ................. $EXECGLOBAL"
echo " Fixed field directory is ..................... $FIXgsm"
echo " Parameter directory is ....................... $PARMGLOBAL"
echo " Unix control language file is ................ $USHGLOBAL"
echo "  "
echo " Network id is ................................ $NET"
echo " Run id for $com processing is ................ $RUN"
echo "  "
echo " standard output in file ...................... $pgmout"
echo " unique processing id for run ................. $pid"
echo " YES SENDCOM means save com files ............. $SENDCOM"
echo " ------------------------------------------------------------"

export warm_start=${warm_start:-"false"}

echo DATA=$DATA

# Set environment.
VERBOSE=${VERBOSE:-"YES"}
if [ $VERBOSE = "YES" ]; then
   echo $(date) EXECUTING $0 $* >&2
   set -x
fi

# Directories.
#export BASE_GSM=${BASE_GSM:-$NWPROD}
#BASE_GSI=${BASE_GSI:-$NWPROD}
#COMIN=${COMIN:-$pwd}
#COMIN_ENS=${COMIN_ENS:-$pwd}
#COMIN_GES_ENS=${COMIN_GES_ENS:-${COMIN_ENS:-$pwd}}
#COMOUT=${COMOUT:-$COMIN}
#DMPDIR=${DMPDIR:-$NWPROD}

#CDATE=${CDATE:-"2010010100"}

export CASE=${CASE:-384}
ntiles=${ntiles:-6}

# Utilities
ERRSCRIPT=${ERRSCRIPT:-'eval [[ $err = 0 ]]'}
NCP=${NCP:-"/bin/cp -p"}
NLN=${NLN:-"/bin/ln -sf"}
NMV=${NMV:-"/bin/mv -uv"}
#nemsioget=${nemsioget:-${NWPROD}/exec/nemsio_get}

# Scripts

# Executables.
#GETATMENSMEANEXEC=${GETATMENSMEANEXEC:-$HOMEgsi/exec/getsigensmeanp_smooth.x}
#GETSFCENSMEANEXEC=${GETSFCENSMEANEXEC:-$HOMEgsi/exec/getsfcensmeanp.x}
#RECENATMEXEC=${RECENATMEXEC:-$HOMEgsi/exec/recentersigp.x}
#CALCINCEXEC=${CALCINCEXEC:-$HOMEgsi/exec/calc_increment_ens.x}
#ADJUSTFORTERRAINEXEC=${ADJUSTFORTERRAINEXEC-$HOMEgefs/exec/adjust_for_terrain.exe}
RECENATMPY=${RECENATMPY:-$HOMEgefs/util/ush/recentensemble.py}

# Variables

# global_chgres stuff
#export RCHGRESEXEC=${RCHGRESEXEC:-$HOMEgefs/exec/chgres_recenter.exe}
#NTHREADS_CHGRES=${NTHREADS_CHGRES:-24}
#CHGRESVARS_ENKF=${CHGRESVARS_ENKF:-""}
#APRUN_CHGRES=${APRUN_CHGRES:-""}

# global_cycle stuff
#CYCLESH=${CYCLESH:-$BASE_GSM/ush/global_cycle.sh}
#export CYCLEXEC=${CYCLEXEC:-$HOMEgsm/exec/global_cycle}
#export FIXgsm=${FIXgsm:-$HOMEgsm/fix/fix_am}
#export FIXfv3=${FIXfv3:-$HOMEgsm/fix/fix_fv3}
#export CYCLVARS=${CYCLVARS:-"FSNOL=-2.,FSNOS=99999.,"}
#export FHOUR=${FHOUR:-0}
#export DELTSFC=${DELTSFC:-6}

#RECENTER_ENKF=${RECENTER_ENKF:-"YES"}
#SMOOTH_ENKF=${SMOOTH_ENKF:-"YES"}

#NTHREADS_ECEN=${NTHREADS_ECEN:-${NTHREADS:-1}}

################################################################################
# Link ensemble member guess, analysis and increment files
export pdycycp=`$NDATE -$fhrp $PDY$cyc`
export pdyp=`echo $pdycycp|cut -c1-8`
export cycp=`echo $pdycycp|cut -c9-10`

case $cyc in
	00) memshift=0;;
	06) memshift=20;;
	12) memshift=40;;
	18) memshift=60;;
esac
################################################################################

# GFS  analysis
#ATMANL=${ATMANL:-$COMINgfs/gfs.$cycle.atmanl.nemsio}
#SFCANL=${SFCANL:-$COMINgfs/gfs.$cycle.sfcanl.nemsio}
################################################################################

if [ $warm_start = ".false." ]; then
#Recenter for nc 6-tile files
	export FILENAME='gfs_data.tile'
	export FILEINPATH=$COMOUT/$cyc/init/
	export FILEOUTPATH=$GESOUT/$cyc/
	mkdir -p $FILEOUTPATH/c00
	cp -pr $FILEINPATH/c00/*  $FILEOUTPATH/c00/.
	for member in $(seq -w 1 $npert );do
		mkdir -p $FILEOUTPATH/p$member
		cp -pr $FILEINPATH/p$member/gfs_ctrl.nc  $FILEOUTPATH/p$member/.
		cp -pr $FILEINPATH/p$member/sfc*  $FILEOUTPATH/p$member/.
	done

        rm -rf poescript*

        (( itile = 1 ))
        while (( itile <= ntiles  )); do
		echo $RECENATMPY $npert $ntiles $FILENAME $FILEINPATH $FILEOUTPATH $itile >>poescript
        (( itile = itile + 1 ))
        done # while (( itask < npert ))

        echo
        chmod 755 poescript
        ls -al $poescript
        echo
        cat poescript
        export MP_HOLDTIME=1000

        export MP_CMDFILE=poescript
        export SCR_CMDFILE=$MP_CMDFILE  # Used by mpiserial on Theia
        export MP_LABELIO=yes
        export MP_INFOLEVEL=3
        export MP_STDOUTMODE=unordered
        echo APRUN=$APRUN
        export MP_PGMMODEL=mpmd

        rm mpmd_cmdfile
        ln -s $MP_CMDFILE mpmd_cmdfile
        $APRUN

fi # if warm_start

msg="$job completed normally"
postmsg "$jlogfile" "$msg"

echo `date` $0 `date -u` end

set +x
if [ $VERBOSE = "YES" ]; then
	echo $(date) EXITING $0 with return code $err >&2
fi

exit $err
