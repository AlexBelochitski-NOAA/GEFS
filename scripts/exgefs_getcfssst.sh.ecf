#!/bin/ksh
echo `date` $0 begin
################################################################################
#   Script:    exgefs_getcfssst.sh.sms
#

set -x
# Set environment.
VERBOSE=${VERBOSE:-"YES"}
if [ $VERBOSE = "YES" ]; then
    echo $(date) EXECUTING $0 $* >&2
    set -x
fi

# Utilities
NCP=${NCP:-"/bin/cp -p"}
NLN=${NLN:-"/bin/ln -sf"}
NMV=${NMV:-"/bin/mv -uv"}

# Executables.
if [[ -z "$EXECgefs" ]]; then
    echo "$EXECgefs is empty"
    exit 5
fi

export GEFS_ANOM2_FCST=${GEFS_ANOM2_FCST:-$EXECgefs/gefs_anom2_fcst}
export GEFS_NSTGEN=${GEFS_NSTGEN:-$EXECgefs/gefs_nstgen}
export nemsioread=${nemsioread:-${HOMEDIR}/exec/nemsio_read}
if [ ! -f $nemsioread ]; then
    echo "FAILED: Missing nemsio_read!"
    exit 85
fi
################################################################################
# Preprocessing
if [ ! -d $DATA ]; then mkdir -p $DATA; fi
cd $DATA || exit 99

# ---For SST
# export DATA=$DATA

#################################################################################
# Run

#=====
echo real-time data transfer begins at $date

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
export filenamein_CFSv2=tmpsfc.grb2 #tmpsfc.01.$PDY$cyc.daily.grb2
export filenamein_nst=nstanl.nemsio #gfs.${cycle}.nstanl.nemsio  or gfs.${cycle}.sfcanl.nemsio

export filenameout_nst=Tsfc.grb  #gfs.t00z.Tsfc.$PDY.grb

#Link Real-time CFSv2
HFcfsMax=120  # 5 days back
HFcfs=0
PDYcfs=$PDY
until [ $HFcfs -gt $HFcfsMax ] ; do
    PDYcfscfc=`$NDATE -${HFcfs} ${PDY}${cyc}`
    PDYcfs=`echo $PDYcfscfc | cut -c1-8`
    if [[ $gfssource != prod ]]; then
        export COMINcfs=${COMINcfs_base}${PDYcfs}/$cyc
        if [ ! -d $COMINcfs ]; then
            COMINcfs=
        fi
        echo $COMINcfs
    fi
    export COMINcfs=${COMINcfs:-$COMROOTp1/cfs/prod/cfs/cfs.${PDYcfs}/$cyc}
    if [ ! -d $COMINcfs ]; then
        HFcfs=`expr $HFcfs \+ 24` 
        continue
    else
        export COMINcfs_base=$(readlink -f ${COMINcfs}/../../)/cfs.
    fi

    #${COMINgfs_base}${PDY}/$cyc
    sFile=${COMINcfs_base}${PDYcfs}/${cyc}/time_grib_01/tmpsfc.01.${PDYcfs}${cyc}.daily.grb2
    if [[ -f $sFile ]]; then
        $NLN $sFile $filenamein_CFSv2
        break
    fi

    echo $HFcfs
    echo $PDYcfs
    HFcfs=`expr $HFcfs \+ 24` 
done

if [ $HFcfs -gt $HFcfsMax ];  then
    echo " Real-time CFSv2 does not exist: $sFile"
    exit 92
fi

#sFile=$COMINcfs/time_grib_01/tmpsfc.01.$PDY$cyc.daily.grb2
#if [[ -f $sFile ]]; then
#    $NLN $sFile $filenamein_CFSv2
#else
#    echo " Real-time CFSv2 does not exist: $sFile"
#    exit 92
#fi
#if (( rc != 0 )); then
#    echo "link sst FAILED!"
#    exit 92
#fi

#Link Real-time nst file
sFile=$COMINgfs/gfs.${cycle}.nstanl.nemsio
if [[ -f $sFile ]]; then
    test_tref=`$nemsioread $sFile | grep tref`
    if [ -z $test_tref ]; then
        sFile=$COMINgfs/gfs.${cycle}.sfcanl.nemsio
        test_tref=`$nemsioread $sFile | grep tref`
        if [ -z $test_tref ]; then
            echo " Real-time nst does not exist: $gfs.${cycle}.nstanl.nemsio or gfs.${cycle}.sfcanl.nemsio"
            exit 93
        fi
    fi
    $NLN $sFile $filenamein_nst
else
    sFile=$COMINgfs/gfs.${cycle}.sfcanl.nemsio
    if [[ -f $sFile ]]; then
        test_tref=`$nemsioread $sFile | grep tref`
        if [ -z $test_tref ]; then
            echo " Real-time nst does not include tref varilable: $sFile"
            exit 93
        fi
        $NLN $sFile $filenamein_nst
    else
        echo " Real-time nst does not exist: $sFile"
        exit 93
    fi

fi
rc=$?
if (( rc != 0 )); then
    echo "link sst FAILED!"
    exit 93
fi
echo real-time data transfer ends at $date

echo read nst file to save tref begin

$GEFS_NSTGEN  $filenamein_nst $filenameout_nst

ERR=$?
if (( ERR !=0 )); then
    echo "Reading NST file to save tref FAILED!"
    exit 94
fi

echo read nst file to save tref end!!!

#==============================================================================================
echo 2-tiered sst generation begin

# Land Sea mask file
export LSmaskT126=${LSmaskT126:-/gpfs/hps3/emc/ensemble/noscrub/emc.enspara/subx/CFS_ANOM2_create_Eric_0p25/mask/mask.t126.grb}

export sstoutdir="outdata"
mkdir -p $sstoutdir
# temporary directories for climm and cfsr (analysis)
tmpraw=raw
mkdir -p $tmpraw
tmpclim=clim
mkdir -p $tmpclim
tmpcfsr=cfsr
mkdir -p $tmpcfsr


# -- file with parameters kpds8, kpds9 and kpds10
kpdsfile=kpdslist.txt

sstinfile=$tmpraw/TMPsfc.${PDY}${cyc}.24hr.grb
export fn_rawfc=$sstinfile
export fn_anom_fc=$sstoutdir/TMPsfc.${PDY}${cyc}.24hr.anom.grb


# Unit files
un_climm=55
un_climo=57
un_rtgan=59

#set -ux
NFH=840  # 35 days. Fixed. The fortran code is expecting this.

grid='255 0 1440 720 90000 0 128 -90000 359750 250 250 0'
grid_new="0 6 0 0 0 0 0 0 1440 720 0 0 90000000 0 48 -90000000 359750000 250000 250000 0"

export grid0p25="latlon 0:1440:0.25 90:720:-0.25034770514603616"
#export grid0p25="latlon 0:1440:0.25 90:721:-0.25"
export option1=' -set_grib_type same -new_grid_winds earth '
export option21=' -new_grid_interpolation bilinear  -if '
export option22=":(LAND|CSNOW|CRAIN|CFRZR|CICEP|ICSEV):"
export option23=' -new_grid_interpolation neighbor -fi '

#   -------------------- Main Loop -------------------------------
mm=`echo ${PDY} | cut -c5-6`
dd=`echo ${PDY} | cut -c7-8`
#hh=`echo ${PDY}${cyc} | cut -c9-10`
hh=${cyc}
echo ${PDY}${cyc}

# -- Generate Raw Forecast data
# RTG + CFS fcst

>$sstinfile

# RTG analysis for initial time required by GFS
sstanlfile=$filenameout_nst #gfs.${cycle}.Tsfc.$PDY.grb======================
anlfileout=anl_sst_grb_latlon.$PDY
$COPYGB -g"$grid" -x $sstanlfile $anlfileout
ERR=$?
if (( ERR !=0 )); then
    echo "FAILED to COPYGB: $sstanlfile; $anlfileout!"
    exit 96
fi
cat $anlfileout > $sstinfile    # This is lead 0 forecast
#exit 150
# CFS forecast data
# Raw flx forecast (make sure it has been downloaded from hpss by running gethpss.sh)
# it is trimmed to obtain data every 24h
#rawgb2triml=$filenamein_CFSv2
rawgb2trimdir=$DATA/CFSBC_inputs_0p25 #/cfsbcinput.${PDY}${cyc}
mkdir -p $rawgb2trimdir
rawgb2trim=$rawgb2trimdir/tmpsfc.01.${PDY}${cyc}.daily.grb2
if [ ! -f $rawgb2trim  ]; then
    #$COPYGB2 -g "$grid_new" -x  $filenamein_CFSv2 $rawgb2trim
    $WGRIB2  $filenamein_CFSv2 $option1 $option21 $option22 $option23 -new_grid $grid0p25 $rawgb2trim
    ERR=$?
    if (( ERR !=0 )); then
        echo "FAILED to WGRIB2: $filenamein_CFSv2; $anlfileout!"
        exit 96
    fi
fi

rawgb2=$tmpraw/TMPsfc.${PDY}${cyc}.24h.grb2
if [ -s $rawgb2 ] ; then
    rm -f $rawgb2
fi
#FH=24
FH=`expr 24 \+ ${HFcfs}`
NFHcfs=`expr ${HFcfs} \+ ${NFH}`
echo $FH
until [ $FH -gt $NFHcfs ] ; do
    $WGRIB2 $rawgb2trim -append -if "TMP:surface:$FH hour fcst:" -grib $rawgb2 > /dev/null
    FH=`expr $FH \+ 24`
done
# convert from grib2 to grib and change resolution
rawgb=$tmpraw/TMPsfc.${PDY}${cyc}.fcs.grb
$CNVGRIB -g21 $rawgb2 $rawgb
if [ $? -eq 0 ] ; then rm $rawgb2 ; fi
cat $rawgb >> $sstinfile

# Model climatology
# daily one-season forecast must be trimmed to 35 days every 24h
# Files do not include f00h
CFSv2_clim_dir=${CFSv2_clim_dir:-/gpfs/hps3/emc/ensemble/noscrub/emc.enspara/subx/CFS_ANOM2_create_Eric_0p25/CFSv2_clim}
climmgb2trim=${CFSv2_clim_dir}/tmpsfc.$mm.$dd.${hh}Z.mean.clim.daily.grb2
if [ ! -s $climmgb2trim ] ; then
    echo "FAILED: $climmgb2trim does not exist!"
    exit 89
fi
climmgb2=$tmpclim/tmpsfc.${PDY}${cyc}.mean.clim.daily.grb2
if [ -s $climmgb2 ] ; then
    rm -f $climmgb2
fi
FH=24
until [ $FH -gt $NFH ] ; do
    $WGRIB2 $climmgb2trim -append -if "TMP:surface:$FH hour fcst:" -grib $climmgb2 > /dev/null
    FH=`expr $FH \+ 24`
done

climmgb=$tmpclim/tmpsfc.${PDY}${cyc}.mean.clim.daily.grb
>$climmgb
$CNVGRIB -g21 $climmgb2 $climmgb
cat $anlfileout $climmgb > $climmgb.plus  # This is to add rtg analysis as lead 0 to the hindcast
echo "$climmgb.plus:" $climmgb.plus
$WGRIB $climmgb.plus -d all -ieee -o fort.$un_climm
if [ $? -eq 0 ] ; then
    rm -f $climmgb2
fi

#   # Observations (analysis). RTG i.c. are persisted 35 days
echo "$anlfileout:"$anlfileout
$WGRIB $anlfileout -d all -ieee -o fort.$un_rtgan
#
#   # CFSR must be trimmed to the 35 days of the forecasts
climogb2trim=${climogb2trim:-/gpfs/hps3/emc/ensemble/noscrub/emc.enspara/subx/CFS_ANOM2_create_Eric_0p25/CFSR_clim/tmpsfc.cfsr.mean.clim.daily.1999.2010.grb2}
if [ ! -s $climogb2trim ] ; then
    echo "FAILED: $climogb2trim does not exist!"
    exit 90
fi
climogb2=$tmpcfsr/tmpsfc.cfsr.${PDY}${cyc}.clim.daily.grb2
cfsr_date=2000${mm}${dd}${hh}
if [ -s $climogb2 ] ; then
    rm -f $climogb2
fi
FH=0
until [ $FH -gt $NFH ] ; do
    $WGRIB2 $climogb2trim -append -if ":d=$cfsr_date:" -grib $climogb2 > /dev/null
    FH=`expr $FH \+ 24`
    cfsr_date=`$NDATE +24 $cfsr_date`
    yyn=`echo $cfsr_date | cut -c1-4`
    #      echo " reanalysis: year $yyn "
    if [ $yyn = 2001 ] ; then
        mmn=`echo $cfsr_date | cut -c5-6`
        ddn=`echo $cfsr_date | cut -c7-8`
        cfsr_date=2000${mmn}${ddn}${hh}
    fi
done
climogb=$tmpcfsr/tmpsfc.cfsr.${PDY}${cyc}.clim.daily.grb
$CNVGRIB -g21 $climogb2 $climogb
echo "climogb:"$climogb
$WGRIB $climogb -d all -ieee -o fort.$un_climo
ERR=$?
if [ $? -eq 0 ] ;
    then rm -f $climmgb2
else
    echo "FAILED to CNVGRIB: $climogb"
fi

#
# -- Generate kpds -- =========================================================
#  Generate kpds starting from this and going through the 35 days forecast
>$kpdsfile
kdate=${PDY}${cyc}
FH=0
until [ $FH -gt $NFH ] ; do
    #     kdate=`$NDATE +24 $kdate`
    kcc=`echo $kdate | cut -c1-2`
    kyy=`echo $kdate | cut -c3-4`
    kpds8=`echo $kdate | cut -c3-4`
    if [ "$kpds8" -eq "00" ] ; then
        kpds8="100"
    fi
    kpds9=`echo $kdate | cut -c5-6`
    kpds10=`echo $kdate | cut -c7-8`

    if [ "$kcc" -eq "19" ] ; then
        kpds21="20"
    elif [ "$kcc" -eq "20" ] ; then
        kpds21="21"
    fi

    if [ "$kyy" -eq "00" ] ; then
        kpds21="20"
    fi

    echo $kpds8 $kpds9 $kpds10 $kpds21 >> $kpdsfile

    kdate=`$NDATE +24 $kdate`

    FH=`expr $FH \+ 24`
done
echo "$kpdsfile:"$kpdsfile
#
#  Run the bias correction
# -- Uses persistence with growing weight towards CFSv2 as lead time increases NCEP grib T126 (Gaussian 384*190)
echo "fn_anom_fc:"$fn_anom_fc
if [ -s $fn_anom_fc ] ; then
    rm -f $fn_anom_fc
fi

echo $fn_rawfc $un_climm $un_climo $un_rtgan $fn_anom_fc $kpdsfile $LSmaskT126
$GEFS_ANOM2_FCST $fn_rawfc $un_climm $un_climo $un_rtgan $fn_anom_fc $kpdsfile $LSmaskT126 $HFcfs
ERR=$?
if [ ERR -eq 0 ] ; then 
    echo "2-tiered sst generation finished!!!"
    $NCP $fn_anom_fc $COMOUTcfssst/TMPsfc.${PDY}${cyc}.24hr.anom.grb
    ERR=$?
    if [ ERR -eq 0 ]; then
        exit 0
    else
        echo "FAILED when copy $fn_anom_fc to $COMOUTcfssst"
        exit 99
    fi
    exit 0
else
    echo "FAILED to do the bias correction: $GEFS_ANOM2_FCST"
    exit $ERR
fi



