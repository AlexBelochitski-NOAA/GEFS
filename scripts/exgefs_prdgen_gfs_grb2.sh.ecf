#####################################################################
echo "-----------------------------------------------------"
echo " exglobal_post_gfs.sh.sms" 
echo " Feb 06 - Wobus - new script to convert gfs to pgrba"
echo " Jul 11 - Wobus - rename to exgefs_prdgen_gfs.sh.sms"
echo "-----------------------------------------------------"
#####################################################################
echo `date` $0 begin

set -x

cd $DATA

msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"

export MP_LABELIO=YES
#poe hostname

echo cyc=$cyc
echo cycle=$cycle

export WGRIB=${EXECUTIL}/wgrib
export WGRIB2=${EXECUTIL}/wgrib2
export COPYGB=$EXECUTIL/copygb
export COPYGB2=$EXECUTIL/copygb2
#XXW export CNVGRIB=${EXECUTIL}/cnvgrib21_gfs
export CNVGRIB=/nwpara/util/exec/cnvgrib21_gfs
################################################## RLW 20110722 CNVGRIB TEMPORARY
#export CNVGRIB=$basesource/nw$envir/util/exec/cnvgrib
################################################## RLW 20110722 CNVGRIB TEMPORARY
export GRBIDX=${EXECUTIL}/grbindex
export GRB2INDEX=${EXECUTIL}/grb2index
export ENSADD=$USHGLOBAL/global_ensadd.sh
export ENSADDG2=$USHgefs/global_ensadd_g2.sh
export TRANSG=$USHGLOBAL/gefs_transfer_gfs.sh
##DHOU 03/22/2012 for ZEUS
export ENSADD=$USHglobal/global_ensadd.sh
##DHOU 01/25/2012 for WCOSS
export ENSADD=$USHgefs/global_ensadd.sh
export TRANSG=$USHgefs/gefs_transfer_gfs.sh
echo WGRIB=$WGRIB
echo WGRIB2=$WGRIB2
echo COPYGB=$COPYGB
echo COPYGB2=$COPYGB2
echo CNVGRIB=$CNVGRIB
echo GRBINDEX=$GRBINDEX
echo GRBIDX=$GRBIDX
echo GRB2INDEX=$GRB2INDEX
echo ENSADD=$ENSADD
grid1p0="0 6 0 0 0 0 0 0 360 181 0 0 90000000 0 48 -90000000 359000000 1000000 1000000 0"
gridp5="0 6 0 0 0 0 0 0 720 361 0 0 90000000 0 48 -90000000 359500000 500000 500000 0"
grid2p5="0 6 0 0 0 0 0 0 144 73 0 0 90000000 0 48 -90000000 357500000 2500000 2500000 0"

#makegrb1i=yes
#makepgrb1a=yes
#addgrb1id=yes
# Turn off the generation of the grib2 index files for this job:
export makegrb2i=no

# set variables for ensemble PDS header
(( e1 = 1 ))
(( e2 = 1 ))

############################################################
#  Define Variables:
#  -----------------
#  SHOUR        is the starting forecast hour. normally 0 except for restarts.
#  FHOUR        is the ending forecast hour.
#  FHINC        is the increment hour for each forecast steps.
#  FH           is the current forecast hour.
#  SLEEP_TIME   is the number of seconds to sleep before exiting with error.
#  SLEEP_INT    is the number of seconds to sleep between restrt file checks.
#  restart_file is the name of the file to key off of to kick off post.
############################################################

############################################################
# Post Analysis Files before starting the Forecast Post
############################################################
#if test -f $COMIN/${RUN}.t${cyc}z.master.grbanl -a ${SHOUR} -eq 0
if test -f $COMIN/${RUN}.t${cyc}z.master.grb2anl -a ${SHOUR} -eq 0
then

   # RLW 20110725 more complete cleanup of temporary files
   rm -f master_grb2file
   rm -f tmpfile
   rm -f pgbafile pgbaifile
   rm -f pgb2afile pgb2aifile

   parmlist=$PARMgefs/gefs_pgrba_f00.parm_grb2
   ln -s $COMIN/${RUN}.t${cyc}z.master.grb2anl master_grb2file
   $WGRIB2 -s master_grb2file |grep -F -f $parmlist |$WGRIB2 master_grb2file -i -grib tmpfile
   $COPYGB2 -g "${grid1p0}" -i0 -x tmpfile pgb2afile
#  $GRB2INDEX pgb2afile pgb2aifile

#  $ENSADDG2 $e1 $e2 pgb2afile epgbafile

   cp -pr pgb2afile epgbafile
   $CNVGRIB -g21 epgbafile pgbafile
   $GRBINDEX pgbafile pgbaifile

#  if [[ "$makepgrb1a" = "yes" ]]; then
#    $CNVGRIB -g21 epgbafile pgbafile
#  fi
#  if [[ "$makegrb1i" = "yes" ]]; then
#    if [[ "$makepgrb1a" = "yes" ]]; then
#      $GRBINDEX pgbafile pgbaifile
#    fi
#  fi

   $ENSADD $e1 $e2 pgbafile pgbaifile epgbafile
   mv epgbafile pgbafile
   $CNVGRIB -g12 -p40 -nv pgbafile pgbafile-grb2
   mv pgbafile-grb2 pgb2afile

   #
   # control the inclusion of perturbation identifiers
   # in the GRIB1 ensemble PDS header extension
   #
   if [[ "$addgrb1id" = "yes" ]]; then
     if [[ "$makegrb1i" = "yes" ]]; then
       $GRBINDEX pgbafile pgbaifile
     fi
   fi

   if test "$SENDCOM" = 'YES'
   then
      #
      # Save Pressure GRIB/Index files
      #
      mv pgbafile $COMOUT/$cyc/pgrba/ge${RUN}.${cycle}.pgrbaanl
      if [[ "$makegrb1i" = "yes" ]]; then
	mv pgbaifile $COMOUT/$cyc/pgrba/ge${RUN}.${cycle}.pgrbaianl
      fi
      if [[ "$makepgrb2a" = "yes" ]]; then
	mv pgb2afile $COMOUT/$cyc/pgrb2a/ge${RUN}.${cycle}.pgrb2aanl
      fi
      if [[ "$makegrb2i" = "yes" ]]; then
	if [[ "$makepgrb2a" = "yes" ]]; then
	  mv pgb2aifile $COMOUT/$cyc/pgrb2a/ge${RUN}.${cycle}.pgrb2aianl
	fi
      fi

#################################### CHECK DBN ALERTS ###########
#################################### CHECK DBN ALERTS ###########
#################################### CHECK DBN ALERTS ###########
      if test "$SENDDBN" = 'YES'
      then
         if test "$NET" = 'gens'
         then
	   MEMBER=GFS
	   $DBNROOT/bin/dbn_alert MODEL GEFS_LEGACY $job $COMOUT/$cyc/pgrba/ge${RUN}.${cycle}.pgrbaanl
	   if [[ "$makegrb1i" = "yes" ]]; then
	     $DBNROOT/bin/dbn_alert MODEL GEFS_LEGACY $job $COMOUT/$cyc/pgrba/ge${RUN}.${cycle}.pgrbaianl
	   fi
	   if [[ "$makepgrb2a" = "yes" ]]; then
	     $DBNROOT/bin/dbn_alert MODEL GEFS_LEGACY $job $COMOUT/$cyc/pgrb2a/ge${RUN}.${cycle}.pgrb2aanl
	   fi
	   if [[ "$makegrb2i" = "yes" ]]; then
	     if [[ "$makepgrb2a" = "yes" ]]; then
	       $DBNROOT/bin/dbn_alert MODEL GEFS_LEGACY $job $COMOUT/$cyc/pgrb2a/ge${RUN}.${cycle}.pgrb2aianl
	     fi
	   fi
         fi
      fi
   fi
fi

SLEEP_LOOP_MAX=`expr $SLEEP_TIME / $SLEEP_INT`

(( fhr=SHOUR))
if (( fhr == 0 )); then
  fhr=00
fi
export fhr

if test $fhr -lt 10 -a $fhr -gt 0
then
   export fhr="0$fhr"
fi

############################################################
# Loop Through the Post Forecast Files 
############################################################
while test $fhr -le $FHOUR
do

    ###############################
    # Start Looping for the 
    # existence of the restart files
    ###############################
    #set +x
    set -x
    export pgm="postcheck"
    ic=1

    while [ $ic -le $SLEEP_LOOP_MAX ]
    do
       ffhr=$fhr
       if (( fhr < 100 )); then
         ffhr=0$fhr
       fi
       if [[ -s $restart_file_a$ffhr ]] && [[ -s $restart_file_b$ffhr ]]; then
	  found=yes
          break
       else
          ic=`expr $ic + 1`
          sleep $SLEEP_INT
       fi
       if (( ffhr > $gfsfhmaxh )) && (( ffhr % 12 == 6 )); then
	 if (( ic > 2 )) && (( ic < SLEEP_LOOP_MAX )); then
	   echo ffhr=$ffhr not expected
	   found=no
	   break
	 fi
       fi
       ###############################
       # If we reach this point assume
       # fcst job never reached restart 
       # period and error exit
       ###############################
       if [ $ic -eq $SLEEP_LOOP_MAX ]
       then
          export err=9
          err_chk
       fi
    done
    #set -x

  if [[ "$found" = yes ]]; then

    # RLW 20110725 more complete cleanup of temporary files
    rm -f master_grb2file
    rm -f tmpfile
    rm -f pgbafile pgbaifile
    rm -f pgb2afile pgb2aifile

    msg="Starting prdgen for fhr=$fhr"
    postmsg "$jlogfile" "$msg"

    if [ $fhr -eq 0 ]
    then
      parmlist=$PARMgefs/gefs_pgrba_f00.parm_grb2
    else
      parmlist=$PARMgefs/gefs_pgrba_fhh.parm_grb2
      parmlistC=$PARMgefs/gefs_pgrba_fhh.parm_grb2-C
    fi

    ln -s $COMIN/${RUN}.t${cyc}z.master.grb2f${fhr} master_grb2file

    $WGRIB2 -s master_grb2file |grep -F -f $parmlist |$WGRIB2 master_grb2file -i -grib tmpfile
    if [ $fhr -gt 0 ]
    then
     $WGRIB2 -s master_grb2file |grep -F -f $parmlistC |grep ave |$WGRIB2 master_grb2file -i -append -grib tmpfile 
    fi
    if [[ x$fhoroglist != x ]]; then
      for fhorog in $fhoroglist
      do
	if (( fhr == fhorog )); then
	  $WGRIB2 -s master_grb2file |grep 'HGT:surface' |$WGRIB2 master_grb2file -i -append -grib tmpfile 
	fi
      done
    fi

    $COPYGB2 -g "${grid1p0}" -i0 -x tmpfile pgb2afile
    $GRB2INDEX pgb2afile pgb2aifile

#   $ENSADDG2 $e1 $e2 pgb2afile epgbafile
    cp -pr pgb2afile epgbafile
    $CNVGRIB -g21 epgbafile pgbafile
    $GRBINDEX pgbafile pgbaifile
 
#   if [[ "$makepgrb1a" = "yes" ]]; then
#     $CNVGRIB -g21 epgbafile pgbafile
#   fi
#   if [[ "$makegrb1i" = "yes" ]]; then
#     if [[ "$makepgrb1a" = "yes" ]]; then
#      $GRBINDEX pgbafile pgbaifile
#     fi
#   fi
 
   $ENSADD $e1 $e2 pgbafile pgbaifile epgbafile
   mv epgbafile pgbafile
   $CNVGRIB -g12 -p40 -nv pgbafile pgbafile-grb2
   mv pgbafile-grb2 pgb2afile

    if [[ "$addgrb1id" = "yes" ]]; then
      if [[ "$makegrb1i" = "yes" ]]; then
	$GRBINDEX pgbafile pgbaifile
      fi
    fi

    # RLW 20110725 more complete cleanup of temporary files
    rm -f tmpfile.2
    rm -f pgbafile.2 pgbaifile.2
    rm -f pgb2afile.2 pgb2aifile.2

    if test "$DO_LOW_RES" = 'YES' -a `expr $fhr % 6 ` -eq 0
    then
      $WGRIB2 -s master_grb2file |grep -F -f $parmlist |$WGRIB2 master_grb2file -i -grib tmpfile.2
      if [ $fhr -gt 0 ]
      then
       $WGRIB2 -s master_grb2file |grep -F -f $parmlistC |grep ave |$WGRIB2 master_grb2file -i -append -grib tmpfile.2 
      fi
      if [[ x$fhoroglist != x ]]; then
	for fhorog in $fhoroglist
	do
	  if (( fhr == fhorog )); then
	    $WGRIB2 -s master_grb2file |grep 'HGT:surface' |$WGRIB2 master_grb2file -i -append -grib tmpfile.2 
	  fi
	done
      fi

    $COPYGB2 -g "${grid2p5}" -i0 -x tmpfile.2 pgb2afile.2
    $GRB2INDEX pgb2afile.2 pgb2aifile.2

#   $ENSADDG2 $e1 $e2 pgb2afile.2 epgbafile.2
    cp -pr pgb2afile.2 epgbafile.2
    $CNVGRIB -g21 epgbafile.2 pgbafile.2
    $GRBINDEX pgbafile.2 pgbaifile.2
 
#   if [[ "$makepgrb1a" = "yes" ]]; then
#     $CNVGRIB -g21 epgbafile.2 pgbafile.2
#   fi
#   if [[ "$makegrb1i" = "yes" ]]; then
#     if [[ "$makepgrb1a" = "yes" ]]; then
#      $GRBINDEX pgbafile.2 pgbaifile.2
#     fi
#   fi

   $ENSADD $e1 $e2 pgbafile.2 pgbaifile.2 epgbafile.2
   mv epgbafile.2 pgbafile.2
   $CNVGRIB -g12 -p40 -nv pgbafile.2 pgbafile-grb2
   mv pgbafile-grb2 pgb2afile.2

      if [[ "$addgrb1id" = "yes" ]]; then
	 if [[ "$makegrb1i" = "yes" ]]; then
	   $GRBINDEX pgbafile.2 pgbaifile.2
	 fi
      fi

    fi
    
#   $USHGLOBAL/gefs_transfer_gfs.sh
    $TRANSG

    if test $SENDCOM = "YES"
    then
       if test $fhr -lt 100
       then
          pad="0"
       else
	pad=""
       fi
       echo "$PDY$cyc$pad$fhr" > $COMOUT/$cyc/misc/ge${RUN}.t${cyc}z.control
    fi

  fi
# if not found, come here to increment

  export fhr=`expr $fhr + $FHINC`
  if test $fhr -lt 10
  then
     export fhr="0$fhr"
  fi
done

cat $pgmout

########################################################

echo `date` $0 end
msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
