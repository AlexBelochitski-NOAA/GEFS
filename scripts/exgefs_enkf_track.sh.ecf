#!/bin/ksh
###testb
# lines between ###testb and ###teste not needed for production
###teste
echo `date` $0 begin
################################################################################
#   Script:	exgefs_enkf_track.sh.sms
#
#
################################################################################

set +xa
echo " ------------------------------------------------------------"
echo "  "
echo "            GLOBAL ENSEMBLE INITIALIZATION "
echo "  "
echo "                `date`     "
echo "  "
echo "                   JOB  $job  "
echo "  "
echo "  "
echo "               FORECAST cycle TIME is $cycle"
echo "  "
echo " ------------------------------------------------------------"
echo "          processing info for this execution"
echo " Home directory is ............................ $HOMEGLOBAL"
echo " Processing directory for files.. ............. $DATA"
echo "  "
echo " Executable file directory is ................. $EXECGLOBAL"
echo " Fixed field directory is ..................... $FIXgsm"
echo " Parameter directory is ....................... $PARMGLOBAL"
echo " Unix control language file is ................ $USHGLOBAL"
echo "  "
echo " Network id is ................................ $NET"
echo " Run id for $com processing is ................ $RUN"
echo "  "
echo " standard output in file ...................... $pgmout"
echo " unique processing id for run ................. $pid"
echo " YES SENDCOM means save com files ............. $SENDCOM"
echo " ------------------------------------------------------------"
set -xa

cd $DATA
DATATMP=$DATA

################################################################################

relocfact=$relocfact relocflag=$relocflag

echo cyc=$cyc cyc_fcst=$cyc_fcst
echo cycle=$cycle cycle_fcst=$cycle_fcst
echo fcstlong=$fcstlong
echo cycsuffix=$cycsuffix
echo cfsuffix=$cfsuffix
echo ensshort=$ensshort

export pdycycp=`$NDATE -$fhrp $PDY$cyc`
export pdyp=`echo $pdycycp|cut -c1-8`
export cycp=`echo $pdycycp|cut -c9-10`

echo pdycycp=$pdycycp pdyp=$pdyp cycp=$cycp
export COMINenkf=$COMINenkf$pdyp
echo  COMINenkf=$COMINenkf

export COM=$COMOUTprevcyc/track_enkf
mkdir -m 775 -p  $COM


#
# begin TC tracker section for c00 (ensemble mean)
#
echo relocflag=$relocflag

(( trackflag = relocflag ))
export relocflag
export trackflag
export COMOUT=${COMOUT}

if (( trackflag == 1 )); then
	echo  ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio 
	# test for files necessary for relocation
	if [[ ! -s ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ]] ; then
		export trackflag=0
		echo  ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio not found
	else # [[ ! -s ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ]]
		export cmodel=enkf
		export pert=m000
		export PDY=${pdyp}
		export CYL=${cycp}
		export SIGVAL="&siginfo sigpath=\"${DATA}/sigf_${pert}_fhr\", ddeg=1.0, reslch=0 0 /"
		ln -sf ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ${DATA}/sigf_${pert}_fhr00
		ln -sf ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ${DATA}/sigf_${pert}_fhr06
		sh $UTILgefs/ush/extrkr.sh

	fi # [[ ! -s ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ]]
fi # (( trackflag == 1 ))

### save ENKF control run forecast hr=$fhrp to precious cycle sfcsig directory 
if (( trackflag == 1 )); then
	# test for files necessary for relocation
	if [[ ! -s ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ]]; then
		export trackflag=0
		echo  ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio not found
		echo  WARNING: This job will be stopped.
	else # [[ ! -s ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio ]]
		mkdir $COMOUTprevcyc/sfcsig_enkf
		export SIGINP=${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.ensmean.nemsio
		export SIGOUT=$COMOUTprevcyc/sfcsig_enkf/gec00.t${cycp}z.sf${fhrp}
	        cp -fp $SIGINP $SIGOUT
	fi # [[ ! -s ${COMINenkf}/${cycp}/sfg_${pdycycp}_fhr${fhrp}_ensmean ]]
fi # (( trackflag == 1 ))
echo

if (( trackflag == 1 )); then
	echo `date` $0 poe EnKF_track begin
	echo

	ls -al poescript*
	rm -rf poescript*

#  Select EnKF members for four cycling
                case $cyc in
                        (00) (( nlist_start = 1 )) ;;
                        (06) (( nlist_start = nmem_enkf / 4 + 1  ));;
                        (12) (( nlist_start = 2 * nmem_enkf / 4 + 1 ));;
                        (18) (( nlist_start = 3 * nmem_enkf / 4 + 1  )) ;;
                esac # $cyc


    (( nlist_end = nlist_start + npert ))
    (( itask = 0 ))
    (( imem = nlist_start ))
    echo EnKF members from $nlist_start to $nlist_end are selected for $cyc cycle
     while (( imem <= nlist_end )) ; do
	if ((  imem > nmem_enkf )); then 
		(( imema = imem - nmem_enkf )) 
	else
		(( imema = imem  )) 
	fi
        cmem=$(printf %03i $imema)
        memchar="mem$cmem"
        memchars="m$cmem"


		echo 'echo `date` ############ poescript'" $itask begin">>poescript.$itask

		echo 'echo `date` ###### `uname -a` ######'" $memchar  begin">>poescript.$itask
		cat <<-EOF >> poescript.$itask
			export DATA=${DATATMP}/tr${itask}
			mkdir -p \${DATA}
			export cmodel=enkf
			export PDY=${pdyp}
			export CYL=${cycp}
			EOF
		cat <<-EOF >> poescript.$itask
			export pert=$memchars
			export SIGVAL="&siginfo sigpath=\"\${DATA}/sigf_\${pert}_fhr\", ddeg=1.0, reslch=0 0 /"
                        if (( \$inflag == 0 )); then
			ln -sf ${COMINenkf}/${cycp}/${memchar}/gdas.t${cycp}z.atmf0${fhrp}.nemsio \${DATA}/sigf_\${pert}_fhr00
			ln -sf ${COMINenkf}/${cycp}/${memchar}/gdas.t${cycp}z.atmf0${fhrp}.nemsio \${DATA}/sigf_\${pert}_fhr06
                        else
			ln -sf ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.${memchar}.nemsio \${DATA}/sigf_\${pert}_fhr00
			ln -sf ${COMINenkf}/${cycp}/gdas.t${cycp}z.atmf0${fhrp}.${memchar}.nemsio \${DATA}/sigf_\${pert}_fhr06
                        fi
			$UTILgefs/ush/extrkr.sh > ushout.track.$itask 2>&1
			EOF
		echo 'echo `date` ###### `uname -a` ######'" $memchar end">>poescript.$itask
		echo 'echo `date` ############ poescript'" $itask end">>poescript.$itask
		echo

		(( itask = itask + 1 ))
		(( imem = imem + 1 ))
	done # for imem from  $nlist_start to $nlist_end

	(( itask = 0 ))
	while (( itask < npert  )); do
		chmod 755 poescript.$itask
		ls -al poescript.$itask
		echo
		cat poescript.$itask
		echo
		echo "sh poescript.$itask" >>poescript
		(( itask = itask + 1 ))
	done # while (( itask < npert ))

	echo
	chmod 755 poescript
	ls -al $poescript
	echo
	cat poescript
	echo

	export MP_HOLDTIME=1000

	export MP_CMDFILE=poescript
	export SCR_CMDFILE=$MP_CMDFILE  # Used by mpiserial on Theia
	export MP_LABELIO=yes
	export MP_INFOLEVEL=3
	export MP_STDOUTMODE=unordered

	echo
	echo before ls before poe
	echo

	pwd
	ls -ablp
	echo
	echo DATA=$DATA before poe
	#### kate 4/24/2012 #####
	echo trackflag=$trackflag
	cp poescript cmdfile
	echo APRUN=$APRUN
	export MP_PGMMODEL=mpmd

	rm mpmd_cmdfile
	ln -s $MP_CMDFILE mpmd_cmdfile
	$APRUN

else # (( trackflag == 1 ))
	echo WARNING: EnKF tracking is off
fi # (( trackflag == 1 ))

#### kate 4/24/2012 ##############

echo DATA=$DATA after poe
pwd
ls -ablp

echo
echo after ls after poe
echo

(( itask = 0 ))
while (( itask < npert  )); do
	file=ushout.track.$itask
	echo "############################### file=$file begin #######################"
	cat $file
	echo "############################### file=$file end ##########################"
	echo
	(( itask = itask + 1 ))
done # for itask
echo
echo `date` $0 poe enkf_track end
echo

###testb
#if [[ $envir = prod ]] || [[ $envir = para ]] || [[ $envir = test ]]; then
###teste
msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################# END OF SCRIPT #######################
###testb
#else
#  echo skip delete for now
#fi
###teste
echo `date` $0 end
