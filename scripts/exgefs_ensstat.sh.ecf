#!/bin/ksh
########################### EXENSSTAT ################################
echo "------------------------------------------------"
echo "Ensemble Postprocessing"
echo "create mean and spread members"
echo "------------------------------------------------"
echo "History: MAY 1997 - First implementation of this new script."
echo "AUTHOR: Yuejian Zhu (wd20yz)"
echo "Modified by: Mary Jacobs"
echo "Modified by: Yuejian Zhu ---- October 1997"
echo "Modified by: Maxine Brown for Yuejian Zhu ---- November 1997"
echo "Modified by: David Michaud to port to IBM SP ---- September 1999"
echo "Modified by: Larry Sager to add spaghetti ensembles -- Feb 2000"
echo "Modified by: Yuejian Zhu to add high resolution archive---- June 2000"
echo "Modified by: Richard Wobus to add ensstat statistics---- September 2001"
echo "Modified by: Yuejian Zhu to add more vars, 6-hr interval fcst output,"
echo "             apply to T00Z, T06Z, T12Z and T18Z cycles,               "
echo "             no more ensppf production                                "
echo "             move pqpf to ensstat process                ---- May 2003"
echo "Modified by: Richard Wobus to add more variables ---- MARCH 2004"
echo "Modified by: Richard Wobus to add 192hr zsfc  ---- August 2004"
echo "Modified by: Richard Wobus reorganize by hour  ---- March 2006"
echo "Modified by: Richard Wobus separate avg/spr from ensstat job  ---- June 2011"
echo "Modified by: Bo Cui and Dingchen Hou change to grib2 operations  ---- Nov. 2014"

### need pass the values of CYC, YMD, DATA, COMIN and COMOUT

export gridlist="${1//,/ }"		# replace commas with spaces
export FHINC=$2
export subdata=$3
export dataset=$4  # a or b

makepgrb1="no"
makegrb1i="no"

if [[ ! -d $DATA ]]; then
	mkdir -p $DATA
fi

set -x

#cd $DATA
cd $subdata

#####################################
# Define ensemble message switch
#   iens_msg=0 will add ensemble extension message
#   iens_msg=1 do not need to add ensemble extension message
#              only if evry members (include GFS) have
#              extension message
#####################################
export iens_msg=1

#####################################
# Define Script/Exec Variables
#####################################

#export WGRIB=${WGRIB:-$EXECgrib/wgrib}
#export GRBINDEX=${GRBINDEX:-$EXECgrib/grbindex}
#export COPYGB=${COPYGB:-$EXECgrib/copygb}
#export WGRIB2=${WGRIB2:-$EXECgrib/wgrib2}
#export GRB2INDEX=${GRB2INDEX:-$EXECgrib/grb2index}
#export COPYGB2=${COPYGB2:-$EXECgrib/copygb2}
#export CNVGRIB=${CNVGRIB:-$EXECgrib/cnvgrib21_gfs}

export ENSPPF=$USHgefs/global_ensppf.sh
export ENSSTAT=$EXECgefs/gefs_ensstat
export ENSPQPF=$USHgefs/global_enspqpf.sh

echo settings in $0 WGRIB2=$WGRIB2
parmlist=$PARMgefs/gefs_pgrb2a_fhh.parm

#####################################
# START TO DUMP DATA FOR $cycle CYCLE
# START TO DUMP DATA FROM PGB FORECAST FILES
#####################################

case $dataset in
 a) memberlist="gfs c00";;
 b) memberlist="c00";;
esac

# # Skip gfs for "dev" jobs
# if [[ $envir = dev ]]; then
# 	memberlist="c00"
# fi

(( imem = 0 ))
while (( imem < npair * 2 )); do
	(( imem = imem + 1 ))
	if (( imem < 10 )); then
		imem=0$imem
	fi
	memberlist="$memberlist p$imem"
done # while (( imem < npair * 2 ))
echo memberlist=$memberlist


echo
echo "`date`  ==== START OF HOURLY PROCESSING OF PGB FORECAST FILES ====="
echo

SLEEP_LOOP_MAX=`expr $SLEEP_TIME / $SLEEP_INT`

export fh=$SHOUR
#export (( fh = SHOUR ))
############################################################
# Loop Through the Post Forecast Files
############################################################
export gridlist=$gridlist
reslist=$gridlist

(( nfilesprev = 9999 ))
foundgfs=no
while test $fh -le $FHOUR; do
	# if test ` expr $fh % 6 ` -eq 0 
	# then
	#  reslist=$gridlist
	# else 
	#  reslist="p5"
	# fi

	#  the order here should correspond to the order in
	#  which the pgrb files are produced by the post
	for res in $reslist; do
		if [[ $res = p5 ]]; then
			makepgrb1="no"
			makegrb1i="no"
			if test $fh -lt 100; then
				export fh="0$fh"
			fi
		fi # [[ $res = p5 ]]

		nenspost=0
		case $res in
			lr)    #2.5 degree grid
				EXT=".2"
				FXT=
				lr=lr
				lfm=$lfmlr
				GRID=2
				;;
			hr)    #1.0 degree grid
				EXT=
				FXT=
				lr=
				lfm=$lfmhr
				GRID= 
				;;
			p5)   #0.5 degree gid
				EXT=
				FXT=.0$res\0.       #".0p50."
				lr=p5
				lfm=$lfmp5
				GRID=_0P5 
				;;
		esac # $res
		# Note: These variables, combined together, determins names of pgrb2 directories and the files    
		# Example: file=$COMIN/$cyc/pgrb2a$lr/ge${mem}.${cycle}.pgrb2a$FXT\f$fh$EXT$cfsuffix

		###############################
		# Start Looping for the
		# existence of the pgrba files
		###############################
		#   set +x
		ic=1
		while [ $ic -le $SLEEP_LOOP_MAX ]; do
			nfiles=0
			nmem=0
			foundall=yes
			previncr=no
			for mem in $memberlist; do
				(( nmem = nmem + 1 ))
				#       testfile=$COMIN/$cyc/pgrb2a$lr/ge${mem}.${cycle}.pgrb2aif$fh$EXT$cfsuffix
				#       testfile=$COMIN/$cyc/pgrb2a$lr/ge${mem}.${cycle}.pgrb2af$fh$EXT$cfsuffix
				testfile=$COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT${cfsuffix}.idx

				if test -f $testfile; then
					echo testfile=$testfile found
					(( nfiles = nfiles + 1 ))
					if [[ $mem = gfs ]]; then
						foundgfs=yes
					fi
					echo mem=$mem nfiles=$nfiles foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh found
				else # test -f $testfile
					echo testfile=$testfile not found
					if [[ $mem = gfs ]] && [[ $foundgfs = yes ]] && (( fh > 180 )) && (( fh % 12 > 0 )); then
						previncr=yes
					else
						foundall=no
					fi
					echo mem=$mem nfiles=$nfiles foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh not found
				fi # test -f $testfile
			done # for mem in $memberlist

			if [[ $foundall = yes ]]; then
				if [[ $previncr = yes ]]; then
					(( nfilesprev = nfiles + 1 ))
				else
					(( nfilesprev = nfiles ))
				fi
				echo Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh
				echo Process all $nfiles members
				break
			else # [[ $foundall = yes ]]
				if (( nfiles < nfilesprev )) then
					ic=`expr $ic + 1`
					sleep $SLEEP_INT
				else
					if [[ $previncr = yes ]]; then
						(( nfilesprev = nfiles + 1 ))
					else
						(( nfilesprev = nfiles ))
					fi
					echo Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh
					echo Continue processing with $nfiles members
					break
				fi # (( nfiles < nfilesprev ))
			fi # [[ $foundall = yes ]]
			###############################
			# If we reach this point assume
			# fcst job never reached restart
			# period and error exit
			###############################
			echo $nfiles out of $nmem members were found
			if [ $ic -eq $SLEEP_LOOP_MAX ]; then

				###############################
				# MODIFY THIS STATEMENT TO
				# ALLOW A DIFFERENT NUMBER OF
				# MEMBERS TO BE MISSING
				#
				# CURRENTLY ALLOWS ONE MISSING
				###############################
				(( nfilesmin = nmem - 1 ))

				if (( nfiles < nfilesmin )); then
					echo Search process FAILS nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh
					echo $nfiles IS FEWER THAN $nfilesmin MEMBERS
					export err=9
					err_chk
				else
					(( nfilesprev = nfiles ))
					echo Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fh=$fh
					echo Continue after timeout with $nfiles members
					break
				fi # (( nfiles < nfilesmin ))
			fi # [ $ic -eq $SLEEP_LOOP_MAX ]
		done # [ $ic -le $SLEEP_LOOP_MAX ]
		set -x

		msg="Starting ensstat generation for fhr=$fh"
		postmsg "$jlogfile" "$msg"

		#
		#  Make namelist file
		#
		echo " &namdim" >namin
		#   echo " nmemdim=100", >>namin
		#   echo " nenspostdim=100", >>namin
		echo " lfdim=${lfm}", >>namin
		echo " /" >>namin
		echo " &namens" >>namin

		ifile=0
		for mem in $memberlist; do
			(( ifile = ifile + 1 ))
			iskip=0
			for nskip in $statskiplist; do
				if [[ $mem = $nskip ]]; then
					iskip=1
				fi
			done # for nskip in $statskiplist

			if [[ $iskip = 0 ]]; then
				rm cfipg$ifile$res
				case $dataset in
					a)
						ln -s $COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix cfipg$ifile$res
						;;
					b)
						$WGRIB2 -s $COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix | \
						grep -F -f $parmlist | \
						$WGRIB2 $COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix -s -i -grib cfipg$ifile$res;
						$WGRIB2 -s $COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix | grep "HGT:300 mb" | \
						$WGRIB2 $COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix -i -append -grib cfipg$ifile$res
						;;
				esac # $dataset
			fi # [[ $iskip = 0 ]]

			#     echo " cfipg($ifile)"=\"$COMIN/$cyc/pgrb2$dataset$lr/ge${mem}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix\", >>namin
			echo " cfipg($ifile)"=\"cfipg$ifile$res\", >>namin
			echo " iskip($ifile)"=$iskip, >>namin

		done # for mem in $memberlist

		echo " nfiles=$ifile", >>namin
		echo " nenspost=$nenspost", >>namin

		echo " cfopg1"=\"geavg.$cycle.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix\", >>namin
		echo " cfopg2"=\"gespr.$cycle.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix\" >>namin

		echo ' /' >>namin
		echo
		cat namin
		echo

		echo "####################### `date` $fh $res ensstat begin" >$pgmout.$res$fh
		$ENSSTAT <namin | fold -w 2000 >$pgmout.$res$fh
		export err=$?; err_chk
		echo "####################### `date` $fh $res ensstat end">>$pgmout.$res$fh
		for fhout in $statoutfhlist; do
			if (( fh == fhout )); then
				cat $pgmout.$res$fh >> $pgmout
			else
				lines=`cat $pgmout.$res$fh| wc -l`
				lobeg=5
				loend=40
				echo lines=$lines lobeg=$lobeg loend=$loend
				(( lskip = lines - lobeg - loend ))
				if (( lskip > 100 )); then
					head -$lobeg $pgmout.$res$fh >>$pgmout
					echo "####################### $lskip Lines Skipped">>$pgmout
					tail -$loend $pgmout.$res$fh >>$pgmout
				else
					cat $pgmout$res.$fh >> $pgmout
				fi # (( lskip > 100 ))
			fi # (( fh == fhout ))
		done # for fhout in $statoutfhlist
		echo "`date` check for missing or zero-length output files"

		for run in geavg gespr; do
			if [[ -s ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix ]]; then
				ls -al ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix
			else
				echo output file ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix IS MISSING
				export err=9
				err_chk
			fi # [[ -s ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix ]]
		done # for run in geavg gespr

		echo "`date` send pgrb2$dataset output begin"

		if [ $SENDCOM = "YES" ]; then
			for run in geavg gespr; do
				if [[ "$makepgrb1" = "yes" ]]; then
					$CNVGRIB -g21 ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix ${run}.${cycle}.pgrb$dataset$FXT\f$fh$EXT$cfsuffix
				fi
				if [[ "$makegrb2i" = "yes" ]]; then
					$WGRIB2 -s ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix >${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT${cfsuffix}.idx
				fi
				if [[ "$makegrb1i" = "yes" ]]; then
					$GRBINDEX ${run}.${cycle}.pgrb$dataset$FXT\f$fh$EXT$cfsuffix ${run}.${cycle}.pgrb$dataset$FXT\if$fh$EXT$cfsuffix
				fi
				if [[ -s ${run}.${cycle}.pgrb$dataset$FXT\f$fh$EXT$cfsuffix ]]; then
					mv ${run}.${cycle}.pgrb$dataset$FXT\f$fh$EXT$cfsuffix $COMOUT/$cyc/pgrb$dataset$lr
					if [[ "$makegrb1i" = "yes" ]]; then
						mv ${run}.${cycle}.pgrb$dataset$FXT\if$fh$EXT$cfsuffix $COMOUT/$cyc/pgrb$dataset$lr
					fi
				fi # [[ -s ${run}.${cycle}.pgrb$dataset$FXT\f$fh$EXT$cfsuffix ]]
				if [[ -s ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix ]]; then
					mv ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix $COMOUT/$cyc/pgrb2$dataset$lr
					mv ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT${cfsuffix}.idx $COMOUT/$cyc/pgrb2$dataset$lr
				fi # [[ -s ${run}.${cycle}.pgrb2$dataset$FXT\f$fh$EXT$cfsuffix ]]
				if [[ "$SENDDBN" = 'YES' ]]; then
					if [[ ! -n "$cfsuffix" && ! -n "$lr" ]]; then
						if [[ "$run" = "geavg" ]]; then
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_AVG $job ${COMOUT}/${cyc}/pgrb2$dataset/geavg.${cycle}.pgrb2$dataset\f${fh}${cfsuffix}
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_AVG_WIDX $job
							${COMOUT}/${cyc}/pgrb2$dataset/geavg.${cycle}.pgrb2$dataset\f${fh}${cfsuffix}.idx
						fi # [[ "$run" = "geavg" ]]
						if [[ "$run" = "gespr" ]]; then
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_SPR $job ${COMOUT}/${cyc}/pgrb2$dataset/gespr.${cycle}.pgrb2$dataset\f${fh}${cfsuffix}
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_SPR_WIDX $job 
							${COMOUT}/${cyc}/pgrb2$dataset/gespr.${cycle}.pgrb2$dataset\f${fh}${cfsuffix}.idx
						fi # [[ "$run" = "gespr" ]]
					fi # [[ ! -n "$cfsuffix" && ! -n "$lr" ]]
					if [[ ! -n "$cfsuffix" &&  -n "$lr" ]]; then
						if [[ "$run" = "geavg" ]]; then
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_AVG $job ${COMOUT}/${cyc}/pgrb2$dataset$lr/geavg.${cycle}.pgrb2$dataset$FXT\f${fh}$EXT${cfsuffix}
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_AVG_WIDX $job ${COMOUT}/${cyc}/pgrb2$dataset$lr/geavg.${cycle}.pgrb2$dataset$FXT\f${fh}$EXT${cfsuffix}.idx
						fi # [[ "$run" = "geavg" ]]
						if [[ "$run" = "gespr" ]]; then
							$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_SPR $job ${COMOUT}/${cyc}/pgrb2a$lr/gespr.${cycle}.pgrb2$dataset$FXT\f${fh}$EXT${cfsuffix}
						fi
					fi # [[ ! -n "$cfsuffix" &&  -n "$lr" ]]
				fi # [[] "$SENDDBN" = 'YES' ]]
			done
		fi
	done # for res in $reslist

	echo "`date` send pgrb$dataset output end"

	export fh=`expr $fh + $FHINC`
	if test $fh -lt 10; then
		export fh="0$fh"
	fi
	#   if [[ $res = p5 ]]; then
	# if test $fh -lt 100 
	# then
	#   export fh="0$fh"
	# fi
	#   fi
done # while test $fh -le $FHOUR


echo ###############################`date` cat $pgmout begin
cat $pgmout
echo ###############################`date` cat $pgmout end

echo
echo "`date`  ==== END  OF  HOURLY PROCESSING OF PGB FORECAST FILES ====="
echo

############################################################################
###########  ADD DBN ALERTS FOR PPF AND PQPF FILES IF NEEDED  ##############
############################################################################

msg="HAS COMPLETED NORMALLY!"
postmsg "$jlogfile" "$msg"
