#!/bin/ksh
########################### EXENSSTAT ################################
echo "------------------------------------------------"
echo "Ensemble Postprocessing"
echo "create mean and spread members"
echo "------------------------------------------------"
echo "History: MAY 1997 - First implementation of this new script."
echo "AUTHOR: Yuejian Zhu (wd20yz)"
echo "Modified by: Mary Jacobs"
echo "Modified by: Yuejian Zhu ---- October 1997"
echo "Modified by: Maxine Brown for Yuejian Zhu ---- November 1997"
echo "Modified by: David Michaud to port to IBM SP ---- September 1999"
echo "Modified by: Larry Sager to add spaghetti ensembles -- Feb 2000"
echo "Modified by: Yuejian Zhu to add high resolution archive---- June 2000"
echo "Modified by: Richard Wobus to add ensstat statistics---- September 2001"
echo "Modified by: Yuejian Zhu to add more vars, 6-hr interval fcst output,"
echo "             apply to T00Z, T06Z, T12Z and T18Z cycles,               "
echo "             no more ensppf production                                "
echo "             move pqpf to ensstat process                ---- May 2003"
echo "Modified by: Richard Wobus to add more variables ---- MARCH 2004"
echo "Modified by: Richard Wobus to add 192hr zsfc  ---- August 2004"
echo "Modified by: Richard Wobus reorganize by hour  ---- March 2006"
echo "Modified by: Richard Wobus separate avg/spr from ensstat job  ---- June 2011"
echo "Modified by: Bo Cui and Dingchen Hou change to grib2 operations  ---- Nov. 2014"

### need pass the values of CYC, YMD, DATA, COMIN and COMOUT

# export gridlist="${1//,/ }"		# replace commas with spaces
# export FHOUT=$2
# export subdata=$3
# export dataset=$4  # a or b
# export FHOUT_HF=$5
# export FHMAX_HF=$6
# export FHOUR=$7

export subdata="${1}"                  # ${DATA}/${stream}
export stream="${2}"                   # PRDGEN_STREAMS
export jobgrid="${3}"                  # PRDGEN_GRID[$stream]
typeset -a hours="${4}"                # PRDGEN_HOURS[$stream]
export pgad="${5}"                     # PRDGEN_A_DIR[$stream]
export pgapre="${6}"                   # PRDGEN_A_PREFIX[$stream]

cat <<-EOF
	Settings for ensstat stream $stream:
		Subdata: $subdata
		Grid: $stream
		Grid Spec: $jobgrid
		Hours: ($grid_spec)
		A Dir: $pgad
		A Prefix: $pgbd
EOF

if [[ ! -d $DATA ]]; then
	mkdir -p $DATA
fi

set -x

#cd $DATA
cd $subdata

#####################################
# Define ensemble message switch
#   iens_msg=0 will add ensemble extension message
#   iens_msg=1 do not need to add ensemble extension message
#              only if evry members (include GFS) have
#              extension message
#####################################
export iens_msg=1

#####################################
# Define Script/Exec Variables
#####################################

#export WGRIB=${WGRIB:-$EXECgrib/wgrib}
#export GRBINDEX=${GRBINDEX:-$EXECgrib/grbindex}
#export COPYGB=${COPYGB:-$EXECgrib/copygb}
#export WGRIB2=${WGRIB2:-$EXECgrib/wgrib2}
#export GRB2INDEX=${GRB2INDEX:-$EXECgrib/grb2index}
#export COPYGB2=${COPYGB2:-$EXECgrib/copygb2}
#export CNVGRIB=${CNVGRIB:-$EXECgrib/cnvgrib}

export ENSPPF=$USHgefs/global_ensppf.sh
export ENSSTAT=$EXECgefs/gefs_ensstat
export ENSPQPF=$USHgefs/global_enspqpf.sh

echo settings in $0 WGRIB2=$WGRIB2
parmlist=$PARMgefs/gefs_pgrb2a_fhh.parm

#####################################
# START TO DUMP DATA FOR $cycle CYCLE
# START TO DUMP DATA FROM PGB FORECAST FILES
#####################################

# case $dataset in
# #a) memberlist="gfs c00";;
#  b) memberlist="c00";;
#  a) memberlist="c00";;
# esac

# # Skip gfs for "dev" jobs
# if [[ $envir = dev ]]; then
# 	memberlist="c00"
# fi

memberlist="c00"

(( imem = 0 ))
while (( imem < npert )); do
	(( imem = imem + 1 ))
	if (( imem < 10 )); then
		imem=0$imem
	fi
	memberlist="$memberlist p$imem"
done # while (( imem < npert ))
echo memberlist=$memberlist


echo
echo "$(date)  ==== START OF HOURLY PROCESSING OF PGB FORECAST FILES ====="
echo

SLEEP_LOOP_MAX=$(expr $SLEEP_TIME / $SLEEP_INT)

export fh=$SHOUR
#export (( fh = SHOUR ))
############################################################
# Loop Through the Post Forecast Files
############################################################
export gridlist=$gridlist
reslist=$gridlist

(( nfilesprev = 9999 ))
foundgfs=no

for hour in $hours; do

	export fhr=$(printf "%02.0f" $hour)        # Zero-pad to two places
	export pfhr=$(printf "%03.0f" $hour)       # Zero-pad to three places
	export ffhr="f${pfhr}"

	nenspost=0

	# set +x
	ic=1
	while [ $ic -le $SLEEP_LOOP_MAX ]; do
		nfiles=0
		nmem=0
		foundall=yes
		previncr=no
		for mem in $memberlist; do
			(( nmem = nmem + 1 ))
			testfile=$COMIN/$pgad/ge${mem}.${cycle}.$pgapre${ffhr}.idx

			if [[ -f $testfile ]]; then
				echo "testfile=$testfile found"
				(( nfiles = nfiles + 1 ))
				if [[ $mem = gfs ]]; then
					foundgfs=yes
				fi
				echo "mem=$mem nfiles=$nfiles foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr found"
			else # [[ -f $testfile ]]
				echo "testfile=$testfile not found"
				if [[ $mem = gfs ]] && [[ $foundgfs = yes ]] && (( fhr > 180 )) && (( fhr % 12 > 0 )); then
					previncr=yes
				else
					foundall=no
				fi
				echo "mem=$mem nfiles=$nfiles foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr not found"
			fi # [[ -f $testfile ]]
		done # for mem in $memberlist

		if [[ $foundall = yes ]]; then
			if [[ $previncr = yes ]]; then
				(( nfilesprev = nfiles + 1 ))
			else
				(( nfilesprev = nfiles ))
			fi
			echo "Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr"
			echo "Process all $nfiles members"
			break
		else # [[ $foundall = yes ]]
			if (( nfiles < nfilesprev )) then
				ic=$(expr $ic + 1)
				sleep $SLEEP_INT
			else
				if [[ $previncr = yes ]]; then
					(( nfilesprev = nfiles + 1 ))
				else
					(( nfilesprev = nfiles ))
				fi
				echo "Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr"
				echo "Continue processing with $nfiles members"
				break
			fi # (( nfiles < nfilesprev ))
		fi # [[ $foundall = yes ]]
		###############################
		# If we reach this point assume
		# fcst job never reached restart
		# period and error exit
		###############################
		echo "$nfiles out of $nmem members were found"
		if [ $ic -eq $SLEEP_LOOP_MAX ]; then

			###############################
			# MODIFY THIS STATEMENT TO
			# ALLOW A DIFFERENT NUMBER OF
			# MEMBERS TO BE MISSING
			#
			# CURRENTLY ALLOWS ONE MISSING
			###############################
			(( nfilesmin = nmem - 1 ))

			if (( nfiles < nfilesmin )); then
				echo "Search process FAILS nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr"
				echo "$nfiles IS FEWER THAN $nfilesmin MEMBERS"
				export err=9
				err_chk
			else
				(( nfilesprev = nfiles ))
				echo "Search process ends nfilesprev=$nfilesprev foundgfs=$foundgfs foundall=$foundall previncr=$previncr ic=$ic fhr=$fhr"
				echo "Continue after timeout with $nfiles members"
				break
			fi # (( nfiles < nfilesmin ))
		fi # [ $ic -eq $SLEEP_LOOP_MAX ]
	done # [ $ic -le $SLEEP_LOOP_MAX ]
	# set -x

	msg="Starting ensstat generation for fhr=$fhr"
	postmsg "$jlogfile" "$msg"

	#
	#  Make namelist file
	#
	echo " &namdim" >namin
	#   echo " nmemdim=100", >>namin
	#   echo " nenspostdim=100", >>namin
	echo " lfdim=${lfm}", >>namin
	echo " /" >>namin
	echo " &namens" >>namin

	ifile=0
	for mem in $memberlist; do
		(( ifile = ifile + 1 ))
		iskip=0
		for nskip in $statskiplist; do
			if [[ $mem = $nskip ]]; then
				iskip=1
			fi
		done # for nskip in $statskiplist

		if [[ $iskip = 0 ]]; then
			rm cfipg$ifile.$jobgrid
			ln -s $COMIN/$pgad/ge${mem}.${cycle}.$pgapre${ffhr} cfipg$ifile.$jobgrid
		fi # [[ $iskip = 0 ]]

		echo " cfipg($ifile)"=\"cfipg$ifile.$jobgrid\", >>namin
		echo " iskip($ifile)"=$iskip, >>namin

	done # for mem in $memberlist

	echo " nfiles=$ifile", >>namin
	echo " nenspost=$nenspost", >>namin

	echo " cfopg1"=\"geavg.${cycle}.$pgapre${ffhr}\", >>namin
	echo " cfopg2"=\"gespr.${cycle}.$pgapre${ffhr}\", >>namin

	echo " navg_min"=${navg_min} >>namin

	echo ' /' >>namin
	echo
	cat namin
	echo

	echo "####################### $(date) $fhr $jobgrid ensstat begin" >$pgmout.$jobgrid.$pfhr
	$ENSSTAT <namin | fold -w 2000 >$pgmout.$jobgrid.$pfhr
	export err=$?; err_chk
	echo "####################### $(date) $fhr $jobgrid ensstat end">>$pgmout.$jobgrid.$pfhr
	for fhout in $statoutfhlist; do
		if (( fhr == fhout )); then
			cat $pgmout.$jobgrid.$pfhr >> $pgmout
		else
			lines=$(cat $pgmout.$jobgrid.$pfhr| wc -l)
			lobeg=5
			loend=40
			echo lines=$lines lobeg=$lobeg loend=$loend
			(( lskip = lines - lobeg - loend ))
			if (( lskip > 100 )); then
				head -$lobeg $pgmout.$jobgrid.$pfhr >>$pgmout
				echo "####################### $lskip Lines Skipped">>$pgmout
				tail -$loend $pgmout.$jobgrid.$pfhr >>$pgmout
			else
				cat $pgmout$jobgrid.$fhr >> $pgmout
			fi # (( lskip > 100 ))
		fi # (( fh == fhout ))
	done # for fhout in $statoutfhlist
	echo "$(date) check for missing or zero-length output files"

	for run in geavg gespr; do
		if [[ -s ${run}.${cycle}.$pgapre${ffhr} ]]; then
			ls -al ${run}.${cycle}.$pgapre${ffhr}
		else
			echo output file ${run}.${cycle}.$pgapre${ffhr} IS MISSING
			export err=9
			err_chk
		fi # [[ -s ${run}.${cycle}.$pgapre${ffhr} ]]
	done # for run in geavg gespr

	echo "$(date) send $pgapre output begin"

	if [ $SENDCOM = "YES" ]; then
		for run in geavg gespr; do
			if [[ "$makegrb2i" = "yes" ]]; then
				$WGRIB2 -s ${run}.${cycle}.$pgapre${ffhr} >${run}.${cycle}.$pgapre${ffhr}.idx
			fi
			if [[ -s ${run}.${cycle}.$pgapre${ffhr} ]]; then
				mv ${run}.${cycle}.$pgapre${ffhr} $COMOUT/$pgad
				mv ${run}.${cycle}.$pgapre${ffhr}.idx $COMOUT/$pgad
			fi # [[ -s ${run}.${cycle}.$pgapre${ffhr} ]]
			if [[ "$SENDDBN" = 'YES' ]]; then
				if [[ ! -n "$lr" ]]; then
					if [[ "$run" = "geavg" ]]; then
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_AVG $job $COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_AVG_WIDX $job
						$COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}.idx
					fi # [[ "$run" = "geavg" ]]
					if [[ "$run" = "gespr" ]]; then
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_SPR $job $COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A_SPR_WIDX $job 
						$COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}.idx
					fi # [[ "$run" = "gespr" ]]
				fi # [[ ! -n "$lr" ]]
				if [[  -n "$lr" ]]; then
					if [[ "$run" = "geavg" ]]; then
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_AVG $job $COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_AVG_WIDX $job $COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}.idx
					fi # [[ "$run" = "geavg" ]]
					if [[ "$run" = "gespr" ]]; then
						$DBNROOT/bin/dbn_alert MODEL ENS_PGB2A${GRID}_SPR $job ${COMOUT}/${cyc}/pgrb2a$lr/gespr.$COMOUT/$pgad/${run}.${cycle}.$pgapre${ffhr}
					fi
				fi # [[ -n "$lr" ]]
			fi # [[] "$SENDDBN" = 'YES' ]]
		done
	fi # [ $SENDCOM = "YES" ]

	echo "$(date) send pgrb2a output end"
	
done #hour in $hours

echo ###############################$(date) cat $pgmout begin
cat $pgmout
echo ###############################$(date) cat $pgmout end

echo
echo "$(date)  ==== END  OF  HOURLY PROCESSING OF PGB FORECAST FILES ====="
echo

############################################################################
###########  ADD DBN ALERTS FOR PPF AND PQPF FILES IF NEEDED  ##############
############################################################################

msg="HAS COMPLETED NORMALLY!"
postmsg "$jlogfile" "$msg"
