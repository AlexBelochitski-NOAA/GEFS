#!/bin/ksh 
#####################################################################
# 9/20/2009, Julia Zhu   Scripts are modified to be sharable
#                        between EMC and NCO
#         Please note that variable "RUN_ENVIR" is set and used
#         in the development enviroment only.
# 3/27/2015 Dingchen Hou, Vertical structure and WCOSS phase 2 statndard
######################################################################

echo `date` $0 `date -u` begin

set -xa
na=`basename $0`
export PS4=' + $SECONDS $na $LINENO: '
date

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATA=${DATA:-$DATAROOT/${job}.${pid}}
mkdir -p $DATA
cd $DATA

######################################
# Set up the cycle variable
######################################
export cycle=t${cyc}z

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
####################################
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-YES}

# Specify Execution Areas
export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY

##############################################
# Define COM directories
##############################################
export COMIN=$COMROOT/${NET}/${envir}/${RUN}.${PDY}
export COMOUT=$COMROOT/${NET}/${envir}/${RUN}.${PDY}

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm

case $cyc in
	00) export fhmax=$fhmax00;;
	06) export fhmax=$fhmax06;;
	12) export fhmax=$fhmax12;;
	18) export fhmax=$fhmax18;;
esac

##############################################
# set last forecast hour to save sfcsig files
# set cycles to save sfcsig or master files
##############################################

  fhsave=${fhsave:-198}
  cycsavelistsfcsig=${cycsavelistsfcsig:-"00"}
  cycsavelistmaster=${cycsavelistmaster:-""}
  echo fhsave=$fhsave
  echo cycsavelistsfcsig="$cycsavelistsfcsig"
  echo cycsavelistmaster="$cycsavelistmaster"

####################################
# Create member list
####################################
memberlist=""

(( imem = 0 ))
while (( imem < npair * 2 )); do
	(( imem = imem + 1 ))
	if (( imem < 10 )); then
		imem=0$imem
	fi
	memberlist="$memberlist p$imem"
done # (( imem < npair * 2 )
echo memberlist=$memberlist

echo
env | sort
echo

# Test GRIB files before cleaning up
echo `date` GRIB file test before cleanup begin
(( nmissing = 0 ))

#for cyc_check in 00 06 12 18; do
# RLW disable checking for all hours except the current cycle"
for cyc_check in $cyc; do

	echo cyc=$cyc cyc_check=$cyc_check

	if (( cyc == cyc_check )); then
		export fcstlong=true
		export cfsuffix=""
		export cycsuffix=false
		memberlisttest="$memberlist c00"
	else
		export fcstlong=false
		export cfsuffix=".cycfs$cyc_check"
		export cycsuffix=true
		memberlisttest="$memberlist"
	fi # (( cyc == cyc_check ))

	for member in $memberlisttest; do

		####################################
		# Specify the Ensemble Member
		####################################
		export RUNMEM=ge${member}

		export PS4=' + $SECONDS $na $RUNMEM R $LINENO: '

		####################################
		# Specify Forecast Hour Range
		####################################
		export FHINC=06

		export SHOUR=00


		filelist="\
		$COMIN/$cyc/master/ge$member.$cycle.master.grb2anl$cfsuffix \
		$COMIN/$cyc/master/ge$member.$cycle.master.grb2ianl$cfsuffix \
		$COMIN/$cyc/pgrb2a/ge$member.$cycle.pgrb2aanl$cfsuffix \
		$COMIN/$cyc/pgrb2a/ge$member.$cycle.pgrb2aanl$cfsuffix.idx \
		$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.anl$cfsuffix \
		$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.anl$cfsuffix.idx \
		$COMIN/$cyc/pgrb2b/ge$member.$cycle.pgrb2banl$cfsuffix \
		$COMIN/$cyc/pgrb2b/ge$member.$cycle.pgrb2banl$cfsuffix.idx \
		$COMIN/$cyc/pgrb2bp5/ge$member.$cycle.pgrb2b.0p50.anl$cfsuffix \
		$COMIN/$cyc/pgrb2bp5/ge$member.$cycle.pgrb2b.0p50.anl$cfsuffix.idx \
		"
		for file in $filelist; do
			if [[ ! -s $file ]]; then
				(( nmissing = nmissing + 1 ))
				echo "nmissing=$nmissing file=$file IS MISSING"
			fi
		done # file in $filelist

		if [[ $fcstlong = true ]]; then
			export FHOUR=$fhmax
			if (( FHOUR < 10 )); then
				FHOUR=0$FHOUR
			fi
			export FHOUR
		else
			export FHOUR=06
		fi # [[ $fcstlong = true ]]

		FH=$SHOUR
		while (( FH <= FHOUR )); do
			if (( FH < 100 )); then
				FHP5=0$FH
			else
				FHP5=$FH
			fi
			filelist="\
			$COMIN/$cyc/master/ge$member.$cycle.master.grb2f$FH$cfsuffix \
			$COMIN/$cyc/master/ge$member.$cycle.master.grb2if$FH$cfsuffix \
			$COMIN/$cyc/pgrb2a/ge$member.$cycle.pgrb2af$FH$cfsuffix \
			$COMIN/$cyc/pgrb2a/ge$member.$cycle.pgrb2af$FH$cfsuffix.idx \
			$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.f$FHP5$cfsuffix \
			$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.f$FHP5$cfsuffix.idx \
			$COMIN/$cyc/pgrb2b/ge$member.$cycle.pgrb2bf$FH$cfsuffix \
			$COMIN/$cyc/pgrb2b/ge$member.$cycle.pgrb2bf$FH$cfsuffix.idx \
			$COMIN/$cyc/pgrb2bp5/ge$member.$cycle.pgrb2b.0p50.f$FHP5$cfsuffix \
			$COMIN/$cyc/pgrb2bp5/ge$member.$cycle.pgrb2b.0p50.f$FHP5$cfsuffix.idx \
			$COMIN/$cyc/pgrb2alr/ge$member.$cycle.pgrb2af$FH.2$cfsuffix \
			$COMIN/$cyc/pgrb2alr/ge$member.$cycle.pgrb2af$FH.2$cfsuffix.idx \
			$COMIN/$cyc/pgrb2blr/ge$member.$cycle.pgrb2bf$FH.2$cfsuffix \
			$COMIN/$cyc/pgrb2blr/ge$member.$cycle.pgrb2bf$FH.2$cfsuffix.idx \
			$COMIN/$cyc/sfcsig/ge$member.$cycle.bf$FH$cfsuffix \
			$COMIN/$cyc/sfcsig/ge$member.$cycle.sf$FH$cfsuffix \
			$COMIN/$cyc/sflux/ge$member.$cycle.sfluxgrbf$FH$cfsuffix \
			"
			if (( FH > 0 )) && (( FH <= fhmaxh )); then
				(( FP = FH - 3 ))
				if (( FP < 10 )); then
					FP=0$FP
				fi
				if (( FP < 100 )); then
					FPP5=0$FP
				else
					FPP5=$FP
				fi
				filelist="$filelist
				$COMIN/$cyc/sfcsig/ge$member.$cycle.bf$FP$cfsuffix \
				$COMIN/$cyc/sfcsig/ge$member.$cycle.sf$FP$cfsuffix \
				$COMIN/$cyc/sflux/ge$member.$cycle.sfluxgrbf$FP$cfsuffix \
				$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.f$FPP5$cfsuffix \
				$COMIN/$cyc/pgrb2ap5/ge$member.$cycle.pgrb2a.0p50.f$FPP5$cfsuffix.idx \
				"
			fi # (( FH > 0 )) && (( FH <= fhmaxh ))
			for file in $filelist; do
				if [[ ! -s $file ]]; then
					(( nmissing = nmissing + 1 ))
					echo "nmissing=$nmissing file=$file IS MISSING"
				fi
			done # file in $filelist

			(( FH = FH + FHINC ))
			if (( FH < 10 )); then
				FH=0$FH
			fi
		done # (( FH <= FHOUR ))
	done # member in $memberlisttest
done # cyc_check in 00 06 12 18
echo nmissing=$nmissing
echo `date` GRIB file test before cleanup end
if (( nmissing > 0 )); then
	msg="GRIB file test before cleanup IDENTIFIED $nmissing MISSING FILES"
	echo "`date`    $msg"
	postmsg "$jlogfile" "$msg"
	export err=99
	err_chk
else # (( nmissing > 0 ))
	echo `date` sfcsig sflux cleanup begin
	#for cyc_check in 00 06 12 18
	for cyc_check in $cyc; do
		savecycle=false
		for cycsave in $cycsavelistsfcsig; do
			if (( cyc == cycsave )); then
				savecycle=true
			fi
		done # cycsave in $cycsavelistsfcsig

		echo "cyc=$cyc cyc_check=$cyc_check savecycle=$savecycle"
		if [[ $savecycle = false ]]; then
			if (( cyc == cyc_check )); then
				export fcstlong=true
				export cfsuffix=""
				export cycsuffix=false
				memberlisttest="$memberlist c00"
			else
				export fcstlong=false
				export cfsuffix=".cycfs$cyc_check"
				export cycsuffix=true
				memberlisttest="$memberlist"
			fi # (( cyc == cyc_check ))
			for member in $memberlisttest; do
				####################################
				# Specify the Ensemble Member
				####################################
				export RUNMEM=ge${member}
				export PS4=' + $SECONDS $na $RUNMEM R $LINENO: '

				####################################
				# Specify Forecast Hour Range
				####################################
				export FHINCH=03
				export FHINC=06
				export SHOUR=00

				if [[ $fcstlong = true ]]; then
					if [[ x$HOUTSPS = x ]]; then
						export FHOUR=$fhmax
					else
						(( FHOUR = fhmax - HOUTSPS - FHINC ))
					fi       
					if (( FHOUR < 10 )); then
						FHOUR=0$FHOUR
					fi
					export FHOUR
				else
					export FHOUR=06
				fi # [[ $fcstlong = true ]]
				###########################################################
				# remove sigma, surface, and flux files
				###########################################################
				$HOMEgefs/scripts/exgefs_post_cleanup.sh.ecf
			done # member in $memberlisttest
		else # [[ $savecycle = false ]]
			echo "sfcsig files are saved for cyc=$cyc"
		fi # [[ $savecycle = false ]]
	done # cyc_check in $cyc
	echo `date` "sfcsig sflux cleanup end"
	########################################################
	# remove master post subdirectory
	########################################################
	echo `date` "before master cleanup"
	savecycle=false
	for cycsave in $cycsavelistmaster; do
		if (( cyc == cycsave )); then
			savecycle=true
		fi
	done # cycsave in $cycsavelistmaster
	echo "cyc=$cyc cyc_check=$cyc_check savecycle=$savecycle"
	if [[ $savecycle = false ]]; then
		rm -rf $COMIN/$cyc/master
	else
		echo "master files are saved for cyc=$cyc"
	fi
	echo `date` after master cleanup
fi # (( nmissing > 0 ))

########################################################
export PS4=' + $SECONDS $na $LINENO: '

##############################
# Remove the Temporary working directory
##############################
cd $DATAROOT
rm -rf $DATA

echo `date` $0 `date -u` end
