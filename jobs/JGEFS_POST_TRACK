#!/bin/ksh 
na=`basename $0`

export PS4=' + $SECONDS $na $LINENO: '

export RUN_ENVIR=${RUN_ENVIR:-prod}

echo `date` $0 `date -u` begin

set -xa
####################################

# 01/28/2013 New variables added for WCOSS and cross-machine unfication
export gefsmachine=${gefsmachine:-dell}
export gefsmpexec=${gefsmpexec:-mpirun}

module load util_shared/1.1.0

###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]      ### For Developers
then
  # RLW 20141008 modify to obtain and use version for vertical structure
  . $basesource/nw$envir/*/versions/gefs_legacy.ver
  . $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/parm/gefs_config
fi

# #### 05/05/99 ###############################
# SETUP ENS POST PROCESSING VARIABLES
# #############################################

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$

if [[ $envir = prod ]] || \
   [[ $envir = para ]] || \
   [[ $envir = test ]]; then
  export DATA=$DATAROOT/${job}.${pid}
else
  echo baseptmp=$baseptmp
  echo basetmp=$basetmp
  export DATA=$basetmp/tmpnwprd1/${job}.${pid}
  echo DATA=$DATA
fi
mkdir -p $DATA
cd $DATA

export cycle=t${cyc}z
export cycle_fcst=t${cyc_fcst}z

echo cyc=$cyc cyc_fcst=$cyc_fcst
echo cycle=$cycle cycle_fcst=$cycle_fcst

if (( cyc == cyc_fcst )); then
  export fcstlong=true
  export cfsuffix=""
  export cycsuffix=false
else
  export fcstlong=false
  export cfsuffix=".cycfs$cyc_fcst"
  export cycsuffix=true
fi

export fcstlong
echo fcstlong=$fcstlong

####################################
# Specify NET and RUN Name and model
####################################
export NET=gens

####################################
# File To Log Msgs
####################################
if [[ $envir = dev ]]; then
  export jlogfile=$baselog/com/logs/jlogfile
fi

export jlogfile=${jlogfile:-${DATA}/jlogfile}
###teste

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# SENDECF  - Flag Events on ECF
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
####################################
export SENDECF=YES
export SENDCOM=YES

if [[ $cyc = 00 ]]; then
  if [[ $envir = prod ]]; then
    export SENDDBN=NO
  elif [[ $envir = para ]]; then
    export SENDDBN=NO
  elif [[ $envir = test ]]; then
    export SENDDBN=NO
  fi
else
  export SENDDBN=NO
fi

####################################
# Specify Execution Areas
####################################
#export GRBINDEX=/nwprod/util/exec/grbindex
#DHOU 04/05/2012 for Zeus
 if [[ $gefsmachine = zeus ]]; then
export GRBINDEX=$HOMEglobal/util/exec/grbindex
 fi

export HOMEUTIL=/nwprod/util
#DHOU 04/05/2012 for ZEUS
 if [[ $gefsmachine = zeus ]]; then
export HOMEUTIL=$HOMEglobal/util
export EXECUTIL=$HOMEUTIL/exec
export FIXUTIL=$HOMEUTIL/fix
 fi

export HOMEGLOBAL=${HOMEGLOBAL:-/nwprod}
###teste
export USHGLOBAL=${USHGLOBAL:-$HOMEGLOBAL/ush}
export EXECGLOBAL=${EXECGLOBAL:-$HOMEGLOBAL/exec}
#DHOU 04/05/2012 for Zeus added the next 2 lines
 if [[ $gefsmachine = zeus ]]; then
    export USHGLOBAL=$HOMEglobal/ush
    export EXECGLOBAL=$HOMEglobal/exec
 fi
export FIXGLOBAL=${FIXGLOBAL:-$HOMEGLOBAL/fix}
export PARMGLOBAL=${PARMGLOBAL:-$HOMEGLOBAL/parm}

##############################
# Set up the UTILITIES
##############################
export HOMEgefs=${HOMEgefs:-/nw${envir}/gefs_legacy.${gefs_legacy_ver}}
#export utilscript=/nwprod/util/ush
#DHOU 04/05/2012 for ZEUS
 if [[ $gefsmachine = zeus ]]; then
   export utilscript=$HOMEglobal/util/ush
 fi
# JY if [[ $gefsmachine = wcoss ]]; then
# JY   export utilscript=$HOMEglobal/util/ush
# JY  fi

##############################
# Run setup to initialize working directory and utility scripts
##############################
#ksh $utilscript/setup.sh
#setup.sh

##############################
# Run setpdy and initialize PDY variables
##############################
#sh $utilscript/setpdy.sh
setpdy.sh
if [[ $envir = prod ]] || \
   [[ $envir = para ]] || \
   [[ $envir = test ]]; then
  . PDY
else
  echo PDY=$PDY is already set
fi

##############################################
# Define COM directories
##############################################
if [[ $envir = prod ]] || \
   [[ $envir = para ]] || \
   [[ $envir = test ]]; then
  #export COMIN=/com/${NET}/${envir}/gefs_legacy.${PDY}
  export COMIN=$COMROOT/${NET}/${envir}/gefs_legacy.${PDY}
else
  export COMIN=$baseoutput/com/${NET}/${envir}/gefs_legacy.${PDY}
fi

if [[ $envir = prod ]] || \
   [[ $envir = para ]] || \
   [[ $envir = test ]]; then
  #export COMOUT=/com/${NET}/${envir}/gefs_legacy.${PDY}
  export COMOUT=$COMROOT/${NET}/${envir}/gefs_legacy.${PDY}
else
  export COMOUT=$baseoutput/com/${NET}/${envir}/gefs_legacy.${PDY}
fi

#export gfsvitdir=${gfsvitdir:-${COMROOThps}/gfs/prod/gfs.$PDY}
#export namvitdir=${namvitdir:-${COMROOTp2}/nam/prod/nam.$PDY}
export gfsvitdir=${gfsvitdir:-$(compath.py gfs/prod)}/gfs.$PDY/$cyc
export namvitdir=${namvitdir:-$(compath.py nam/prod)}/nam.$PDY/$cyc

export ensdir=$COMOUT/$cyc/pgrba
export COM=$COMOUT/$cyc/track

mkdir -m 775 -p $COMOUT/$cyc/track

##############################################
echo set parameters using gefs.parm
##############################################

if [[ $envir = prod ]]; then
  #. $PARMGLOBAL/gefs.parm
  # RLW 20141008 modify to obtain and use version for vertical structure
  . /nw$envir/gefs_legacy.${gefs_legacy_ver}/parm/gefs.parm
elif [[ $envir = para ]] || \
     [[ $envir = test ]]; then
  # RLW 20141008 modify to obtain and use version for vertical structure
  . /nw$envir/gefs_legacy.${gefs_legacy_ver}/parm/gefs.parm
else
  # RLW 20141008 modify to obtain and use version for vertical structure
  . $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/parm/gefs.parm
  if (( cyc == 00 )); then
    export fhmax=$fhmax00
  elif (( cyc == 06 )); then
    export fhmax=$fhmax06
  elif (( cyc == 12 )); then
    export fhmax=$fhmax12
  elif (( cyc == 18 )); then
    export fhmax=$fhmax18
  fi
fi

####################################
# Create member list
####################################

if [[ $fcstlong = true ]]; then
  memberlist="c00"
else
  memberlist=""
fi

(( imem = 0 ))
while (( imem < npair * 2 ))
do
  (( imem = imem + 1 ))
  if (( imem < 10 )); then
    imem=0$imem
  fi
  memberlist="$memberlist p$imem"
done
echo memberlist=$memberlist

DATAHOLD=$DATA

#DHOU 01/24/2013, Temprary for WCOSS transition
if [[ $envir = dev ]]; then
  if [[ $gefsmachine = wcoss ]]; then
    export archsyndir=$TMPCOM/arch/prod/syndat
  fi
  if [[ $gefsmachine = dell ]]; then
    export archsyndir=${archsyndir:-$(compath.py gfs/prod/syndat)}
  fi
fi
export archsyndir=${archsyndir:-$(compath.py gfs/prod/syndat)}

echo
env | sort
echo

########################################################
# Execute the tracking script.
for member in $memberlist
do

  ####################################
  # Specify the Ensemble Member
  ####################################
  export RUN=ge${member}

  export PS4=' + $SECONDS $na $RUN T $LINENO: '

  ####################################
  # Start extrkr processing
  ####################################
  (

  ####################################
  # identify temp directory
  ####################################
  # 20150909 include process ID in the member working directory name
  if [[ $envir = prod ]] || \
     [[ $envir = para ]] || \
     [[ $envir = test ]]; then
       export DATA=$DATAROOT/gefs_post_${RUN}${cyc}_${cyc_fcst}.${envir}.${pid}
  else
    echo baseptmp=$baseptmp
    echo basetmp=$basetmp
    export DATA=$basetmp/tmpnwprd1/gefs_post_track_${RUN}_${PDY}${cyc}_${cyc_fcst}.${envir}.${pid}
    echo DATA=$DATA
  fi

# Correction, may require a correction to PRODUCTION
  if [[ -d $DATA ]]; then
    echo `date` ERROR DATA=$DATA UNEXPECTEDLY EXISTS
  else
    mkdir -p $DATA
  fi
  cd $DATA

  ksh $utilscript/setup.sh

  ###################################
  # Run the tropical cyclone tracker
  ###################################
  if [ $cyc -eq 06 -o $cyc -eq 18 ]
  then
      export SENDDBN=NO
  fi

  export pert=`echo ${RUN} | cut -c3-5`
  # 20150909 add test to skip long tracker for for 6-hour long forecasts
  if [[ $fcstlong = true ]] && (( fhmax > 06 ))
  then
    export cmodel=ens
    if   [[ $envir = prod ]]; then
      sh $HOMEgefs/util/ush/extrkr.sh
    elif [[ $envir = para ]] || \
	 [[ $envir = test ]]; then
      # RLW 20141008 modify to obtain and use version for vertical structure
      sh /nw$envir/gefs_legacy.${gefs_legacy_ver}/util/ush/extrkr.sh
    else
     #DHOU 01/19/2013, replace the line above with the following if-block for machine-specfic choice of ush script
     if [[ $gefsmachine = zeus ]]; then
      # RLW 20141008 modify to obtain and use version for vertical structure
      sh $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/util/ush/extrkr.sh
     elif [[ $gefsmachine = wcoss ]]; then
      sh $HOMEgefs/util/ush/extrkr.sh
     else
      # RLW 20141008 modify to obtain and use version for vertical structure
      sh $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/util/ush/extrkr.sh
     fi
    fi
  ###teste
  fi

  # For the vortex relocation part
  export cmodel=gfs_enr
  if   [[ $envir = prod ]]; then
    sh $HOMEgefs/util/ush/extrkr.sh
  elif [[ $envir = para ]] || \
       [[ $envir = test ]]; then
    sh $HOMEgefs/util/ush/extrkr.sh
  else
    # sh $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/util/ush/extrkr.sh
    if [[ $gefsmachine = dell ]]; then
      sh $HOMEgefs/util/ush/extrkr.sh
    else
      # RLW 20141008 modify to obtain and use version for vertical structure
      $basesource/nw$envir/gefs_legacy.${gefs_legacy_ver}/util/ush/extrkr.sh
    fi
  fi

  # 20150909 remove working directory if the tracker was successful
  rc=$?
  if (( rc == 0 )); then
    rm -rf $DATA
  fi

  ) >$DATAHOLD/${member}.out  2>&1 &

done
########################################################

export PS4=' + $SECONDS $na $LINENO: '

echo `date` before wait for background processes
wait
echo `date` after wait for background processes

cd $DATAHOLD

set +x
for member in $memberlist
do
   echo "######################################"
   echo "  $member.out "
   echo "######################################"
   cat $member.out
done
set -x

cd $DATAHOLD
export DATA=$DATAHOLD

##############################
# Remove the Temporary working directory
##############################
if [[ $envir = prod ]] || \
   [[ $envir = para ]] || \
   [[ $envir = test ]]; then
  cd /tmpnwprd1
  rm -rf $DATA
else
  echo skip cleanup for testing
fi

echo `date` $0 `date -u` end
