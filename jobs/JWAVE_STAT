#!/bin/bash

date
export PS4=' $SECONDS + '
set -x -e

#############################
# Source relevant config files
#############################
#XXX
#configs="base wave wavestats"
#export EXPDIR=${EXPDIR:-$HOMEgfs/parm/config}
#config_path=${EXPDIR:-$NWROOT/gfs.${gfs_ver}/parm/config}
#for config in $configs; do
#    . $config_path/config.$config
#    status=$?
#    [[ $status -ne 0 ]] && exit $status
#done
#XXX
##########################################
# Source machine runtime environment
##########################################
#XXX. $HOMEgfs/env/${machine}.env wavestat
#XXXstatus=$?
#XXX [[ $status -ne 0 ]] && exit $status

# PATH for working directory
export NET=${NET:-gefs}
export RUN=${RUN:-gefs}
export MDC=${MDC:-${RUN}wave}
export modIE=${modIE:-gefs}
export grdID=${grdID:-global.0p25}
export HOMEgefs=${HOMEgefs:-$NWROOT/gefs.${gefs_ver}}
export HOMEgfs=${HOMEgfs:-$NWROOT/gfs.${gfs_ver}}

echo "NET RUN MDC modIE grdID KEEPDATA"
echo $NET $RUN $MDC $modIE $grdID $KEEPDATA




# Add default errchk = err_chk
export errchk=${errchk:-err_chk}

# Set HOMEwave to HOMEgfs
HOMEwave=${HOMEwave:-${HOMEgefs}} 

# Create and go to DATA directory
export DATA=${DATA:-${DATAROOT:?}/${jobid}}
mkdir -p $DATA
cd $DATA

export cyc=${cyc:-00}
export cycle=${cycle:-t${cyc}z}


# Run setup to initialize working directory and utility scripts
#sh $utilscript/setup.sh
# Run setpdy and initialize PDY variables
sh $utilscript/setpdy.sh
. PDY

export pgmout=OUTPUT.$$

export MP_PULSE=0

# Path to HOME Directory
export CODEwave=${CODEwave:-${NWROOT}/${NET}_code.${wave_code_ver}/${code_pkg}}
export EXECwave=${EXECwave:-$HOMEwave/exec}
export FIXwave=${FIXwave:-$HOMEwave/fix/fix_wave_${NET}}
export PARMwave=${PARMwave:-$HOMEwave/parm/wave}
export USHwave=${USHwave:-$HOMEwave/ush}
export EXECcode=${EXECcode:-$CODEwave/exe}

# Set COM Paths and GETGES environment
export COMINwave=${COMINwave:-${COMROOT:?}/${NET}/${envir}}
export COMOUTwave=${COMOUTwave:-${COMROOT:?}/${NET}/${envir}}
export COMIN=${COMIN:-${COMINwave}/${MDC}.${PDY}/${cyc}}
export COMOUT=${COMOUT:-${COMOUTwave}/${MDC}.${PDY}/${cyc}}

export COMINice=${COMINice:-${COMROOTp2}/omb/prod}
export COMINwnd=${COMINwnd:-${COMROOT}/gfs/prod}
export COMINcur=${COMINcur:-${COMROOTp2}/rtofs/prod}
export GRIB2TABLE=${FIXwave}/wave_grib2table

if [ $SENDCOM = YES ]; then
  mkdir -p $COMOUT/gridded
  mkdir -p $COMOUT/station
  mkdir -p $COMOUT/stats
fi

export wavelog=${wavelog:-${COMOUTwave}/wave.log}

# Set mpi serial command
export wavempexec=${wavempexec:-"mpirun"}
export wave_mpmd=${wave_mpmd:-"cfp"}

env | sort

# Set parameters using gwes_stat.parm
if [ "${NET}" == "gens" ]
then
  . ${HOMEgefs}/parm/gefs.parm
elif [ "${NET}" == "gfs" ]
then
  echo 'Placeholder for GFS config'
fi
#XXX. $PARMwave/wave.parm.${NET}
#XXX. $PARMwave/wave_stat.parm.${NET}

# Set wave model ID tag to include member number 
# if ensemble; waveMEMB var empty in deterministic
# Set wave model ID tag to include member number
# if ensemble; waveMEMB var empty in deterministic
membTAG='p'
if [ "${waveMEMB}" == "00" ]; then membTAG='c'; fi
export membTAG
export WAV_MOD_TAG=${MDC}${waveMEMB}

export CFP_VERBOSE=1

# Execute the Script  
$HOMEwave/scripts/exwave_stats.sh
err=$?
if [ $err -ne 0 ]; then
  msg="FATAL ERROR: ex-script of GWES_STAT failed!"
else
  msg="$job completed normally!"
fi
postmsg "$jlogfile" "$msg"

# Remove temp directories
 if [ "$KEEPDATA" != "YES" ]; then
   cd $DATAROOT
   rm -rf $DATA
 fi
date

