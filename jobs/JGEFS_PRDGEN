#!/bin/ksh 

echo `date` $0 `date -u` begin

set -xa
export PS4='$SECONDS + '
date

###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]; then ### For Developers
# . $basesource/nw${envir}/versions/gefs.ver
	. $basesource/nwdev/parm/gefs_config
	export gefsmpexec=${gefsmpexec:-mpirun.lsf}
fi

export APRUN=${gefsmpexec_mpmd:-mpirun.lsf}

export CNVGRIB=$CNVGRIB21_GFS

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATA=${DATA:-${DATAROOT}/${job}.${pid}}

mkdir -p $DATA
cd $DATA

export jobgrid=$jobgrid

######################################
# Set up the cycle variable
######################################
export cycle=t${cyc}z
export cycle_fcst=t${cyc_fcst}z

if (( cyc == cyc_fcst )); then
	export fcstlong=true
	export cfsuffix=""
	export cycsuffix=false
else
	export fcstlong=false
	export cfsuffix=".cycfs$cyc_fcst"
	export cycsuffix=true
fi # (( cyc == cyc_fcst ))

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# Define RERUN Parameter: default to RESTART if not previously set
#
# Set RERUN=RESTART to find the last set of complete SFCSIG files and restart the forecast at that point
# (corresponds to previous setting RERUN=NO)
# Set RERUN=YES to remove all forecast products and log files, if any, and start over from the conditions
#
# In case of FORECAST failure, set RERUN=RESTART if necessary in FORECAST, NCEPPOST, and PRDGEN jobs
# In case of NCEPPOST failure, set RERUN=RESTART if necessary in NCEPPOST, and PRDGEN jobs
# In case of PRDGEN   failure, set RERUN=RESTART if necessary in PRDGEN jobs
####################################
echo input setting RERUN=$RERUN
export RERUN=${RERUN:-RESTART}
echo current setting RERUN=$RERUN

####################################
# Specify Execution Areas
####################################
export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
export HOMEgsm=${HOMEgsm:-${NWROOT}/gsm.${gsm_ver}}

export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
export USHgefs=${USHgefs:-$HOMEgefs/ush}
export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

export FIXgsm=${FIXgsm:-$HOMEgsm/fix/fix_am}
export PARMgsm=${PARMgsm:-$HOMEgsm/parm}

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY

####################################
# Create member list
####################################
if [[ $fcstlong = true ]]; then
	memberlist="c00"
	kmem=1
else
	memberlist=""
	kmem=0
fi

##############################################
# Define COM directories
##############################################
export COMIN=$COMROOT/${NET}/${envir}/gefs.${PDY}
export COMOUT=$COMROOT/${NET}/${envir}/gefs.${PDY}

# 20150622 RLW change to "yes" to remake prdgen when post is remade
#export overwrite=no
export overwrite=yes

if [[ "$makepgrb1" = "yes" ]]; then
	mkdir -m 775 -p $COMOUT/$cyc/pgrba
	mkdir -m 775 -p $COMOUT/$cyc/pgrbalr
	mkdir -m 775 -p $COMOUT/$cyc/pgrbb
	mkdir -m 775 -p $COMOUT/$cyc/pgrbblr
	mkdir -m 775 -p $COMOUT/$cyc/pgrbap5
	mkdir -m 775 -p $COMOUT/$cyc/pgrbbp5
fi

mkdir -m 775 -p $COMOUT/$cyc/pgrb2a
mkdir -m 775 -p $COMOUT/$cyc/pgrb2alr
mkdir -m 775 -p $COMOUT/$cyc/pgrb2b
mkdir -m 775 -p $COMOUT/$cyc/pgrb2blr
mkdir -m 775 -p $COMOUT/$cyc/pgrb2ap5
mkdir -m 775 -p $COMOUT/$cyc/pgrb2bp5

if test "$CREATE_TIGGE" = 'YES'; then
	mkdir -m 775 -p $COMOUT/$cyc/pgrb2c
fi

if test "$makepgrb2d" = 'yes'; then
	mkdir -m 775 -p $COMOUT/$cyc/pgrbd
	mkdir -m 775 -p $COMOUT/$cyc/pgrb2d
	mkdir -m 775 -p $COMOUT/$cyc/pgrb2dp5
fi

#mkdir -m 775 -p $COMOUT/$cyc/tctrack
#mkdir -m 775 -p $COMOUT/$cyc/genesis

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm

export NTHREADS=1

####################################
# Specify Timeout Behavior of Post
#
# SLEEP_TIME - Amount of time to wait for
#              a restart file before exiting
# SLEEP_INT  - Amount of time to wait between
#              checking for restart files
####################################
export SLEEP_TIME=900
export SLEEP_INT=5

echo
env | sort
echo

####################################
# Specify Process ID
####################################
export IGEN_ANL=107
export IGEN_FCST=107

####################################
# Specify Forecast Hour Range
####################################

case $FORECAST_SEGMENT in
	(hr) # high resolution segment
		export DOANALYSIS=YES;
		export SHOUR=00
		export FHINC=06
		export FHINCP5=03
		if [[ $fcstlong = true ]]; then
			export FHOUR=$fhmaxh
		else
			export FHOUR=06
		fi
		;;
	(lr) # low resolution segment
		export DOANALYSIS=NO;
		export FHINC=06
		export FHINCP5=06
		export SHOUR=$(( $fhmaxh + FHINC ))
		if [[ $fcstlong = true ]]; then
			export FHOUR=$fhmax
		else
			export FHOUR=06
		fi
		;;
	(*) # whole forecast period
		export DOANALYSIS=YES;
		export SHOUR=00
		export FHINC=06
		export FHINCP5=03
		if [[ $fcstlong = true ]]; then
			export FHOUR=$fhmax
		else
			export FHOUR=06
		fi
		;;
esac # $FORECAST_SEGMENT

echo FORECAST_SEGMENT=$FORECAST_SEGMENT
echo FHINC=$FHINC
echo FHINCP5=$FHINCP5
echo SHOUR=$SHOUR
echo FHOUR=$FHOUR

export DO_HD_PGRB=NO
export HDMAX=00

####################################
# If this is a rerun, remove all control files
####################################
if [[ $RERUN = YES ]]; then
	$USHgefs/gefs_restart_cleanup.sh 00 $FHMAX prd0p5 prd1p0 prd2p5
fi

FHINC34=$FHINCP5
SHOUR_1=$SHOUR 
SHOUR_2=$SHOUR 
SHOUR_3=$SHOUR 

if test $total_tasks -ge 4; then
	SHOUR_4=$(( $SHOUR_3 + FHINCP5 ))
	FHINC34=$(( $FHINC34 + FHINCP5 ))
fi
if test $total_tasks -ge 5; then
	SHOUR_5=$(( $SHOUR_4 + FHINCP5 ))
	FHINC34=$(( $FHINC34 + FHINCP5 ))
fi
if test $FHINC34 -le 9; then
	FHINC34=0$FHINC34
fi

#mpmd job with 5 tasks, 1 for 1d, 2 for 2.5d; 3-5 for 0.5d grid

#task 1, 1.0d grid
export jobgrid_1=
export DOANALYSIS_1=YES
export DO_LOW_RES_1=NO
export FHINC_1=$FHINC
export SHOUR_1=$SHOUR_1
export FHOUR_1=$FHOUR

#task 2, 2.5d
export jobgrid_1=
export DOANALYSIS_2=NO
export DO_LOW_RES_2=YES
export DO_THIS_RES=NO
export FHINC_2=$FHINC
export SHOUR_2=$SHOUR_2
export FHOUR_2=$FHOUR

#task 3, 0.5d grid
export jobgrid_3=_p5
export DOANALYSIS_3=NO
export DO_LOW_RES_3=NO
export FHINC_3=$FHINC34
export SHOUR_3=$SHOUR_3
export FHOUR_3=$FHOUR

if test $total_tasks -eq 3; then
	export DOANALYSIS_3=$DOANALYSIS
fi

#task 4, 0.5d grid
export jobgrid_4=_p5
export DOANALYSIS_4=NO
export DO_LOW_RES_4=NO
export FHINC_4=$FHINC34
export SHOUR_4=$SHOUR_4
export FHOUR_4=$FHOUR

if test $total_tasks -eq 4; then
	export DOANALYSIS_4=$DOANALYSIS
fi

#task 5, 0.5d grid
export jobgrid_5=_p5
export DOANALYSIS_5=$DOANALYSIS
export DO_LOW_RES_5=NO
export FHINC_5=$FHINC34
export SHOUR_5=$SHOUR_5
export FHOUR_5=$FHOUR

if test $SHOUR_4 -le 9; then
	SHOUR_4=0$SHOUR_4
fi
if test $SHOUR_5 -le 9; then
	SHOUR_5=0$SHOUR_5
fi
#################################
# Run Post if Needed
#################################
if test $SHOUR -le $FHOUR; then

	subdata=${DATA}/${SHOUR_1}.${FHOUR_1}.${FHINC_1}${jobgrid_1}
	if [ ! -d ${subdata} ]; then mkdir -p ${subdata}; fi
	outfile=${subdata}/${SHOUR_1}.${FHOUR_1}.${FHINC_1}${jobgrid_1}.out
	echo "$HOMEgefs/scripts/exgefs_prdgen$jobgrid_1.sh.ecf ${SHOUR_1} ${FHOUR_1} ${FHINC_1} $DO_LOW_RES_1 $DOANALYSIS_1 ${subdata} 2>&1 >${outfile}" >>prdgen.cmdfile

	#Note, task 2 is for the 2.5d grid, which shares the ex-script with 1.0d grid, but subdata should be different
	subdata=${DATA}/${SHOUR_2}.${FHOUR_2}.${FHINC_2}\_2p5
	if [ ! -d ${subdata} ]; then mkdir -p ${subdata}; fi
	outfile=${subdata}/${SHOUR_2}.${FHOUR_2}.${FHINC_2}\_2p5.out
	echo "$HOMEgefs/scripts/exgefs_prdgen$jobgrid_2.sh.ecf ${SHOUR_2} ${FHOUR_2} ${FHINC_2} $DO_LOW_RES_2 $DOANALYSIS_2 ${subdata} 2>&1 >${outfile}" >>prdgen.cmdfile

	if test $total_tasks -ge 3; then
		subdata=${DATA}/${SHOUR_3}.${FHOUR_3}.${FHINC_3}${jobgrid_3}
		if [ ! -d ${subdata} ]; then mkdir -p ${subdata}; fi
		outfile=${subdata}/${SHOUR_3}.${FHOUR_3}.${FHINC_3}${jobgrid_3}.out
		echo "$HOMEgefs/scripts/exgefs_prdgen$jobgrid_3.sh.ecf ${SHOUR_3} ${FHOUR_3} ${FHINC_3} $DO_LOW_RES_3 $DOANALYSIS_3 ${subdata} 2>&1 >${outfile}" >>prdgen.cmdfile
	fi # test $total_tasks -ge 3

	if test $total_tasks -ge 4; then
		subdata=${DATA}/${SHOUR_4}.${FHOUR_4}.${FHINC_4}${jobgrid_4}
		if [ ! -d ${subdata} ]; then mkdir -p ${subdata}; fi
		outfile=${subdata}/${SHOUR_4}.${FHOUR_4}.${FHINC_4}${jobgrid_4}.out
		echo "$HOMEgefs/scripts/exgefs_prdgen$jobgrid_4.sh.ecf ${SHOUR_4} ${FHOUR_4} ${FHINC_4} $DO_LOW_RES_4 $DOANALYSIS_4 ${subdata} 2>&1 >${outfile}" >>prdgen.cmdfile
	fi # test $total_tasks -ge 4

	if test $total_tasks -ge 5; then
		subdata=${DATA}/${SHOUR_5}.${FHOUR_5}.${FHINC_5}${jobgrid_5}
		if [ ! -d ${subdata} ]; then mkdir -p ${subdata}; fi
		outfile=${subdata}/${SHOUR_5}.${FHOUR_5}.${FHINC_5}${jobgrid_5}.out
		echo "$HOMEgefs/scripts/exgefs_prdgen$jobgrid_5.sh.ecf ${SHOUR_5} ${FHOUR_5} ${FHINC_5} $DO_LOW_RES_5 $DOANALYSIS_5 ${subdata} 2>&1 >${outfile}" >>prdgen.cmdfile
	fi # test $total_tasks -ge 5

	cat prdgen.cmdfile
	chmod 775 prdgen.cmdfile
	export MP_CMDFILE=${DATA}/prdgen.cmdfile
	export MP_PGMMODEL=mpmd
	rm mpmd_cmdfile
	ln -s $MP_CMDFILE mpmd_cmdfile
	$APRUN

	export SHOUR=`expr $FHOUR + $FHINC`
fi # test $SHOUR -le $FHOUR

msg="$job completed normally"
postmsg "$jlogfile" "$msg"

echo `date` TEST LISTING OF WORKING DIRECTORY BEGIN
echo DATA=$DATA
ls -al $DATA
echo `date` TEST LISTING OF WORKING DIRECTORY END

echo `date` $job completed

##############################
# Remove the Temporary working directory
##############################
cd $DATAROOT
if [ ${KEEPDATA:-NO} = NO ] ; then rm -rf $DATA ; fi
