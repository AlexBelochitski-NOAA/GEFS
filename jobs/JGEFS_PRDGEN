#!/bin/ksh 
#####################################################################
# 9/20/2009, Julia Zhu   Scripts are modified to be sharable
#                        between EMC and NCO
#         Please note that variable "RUN_ENVIR" is set and used
#         in the development enviroment only.
# September 2014, Dingchen Hou   Scripts are modified to generate grib2 master files
# February 2015, Dingchin Hou   Scripts changed to vertical structure and cleaned following NCO requirements
######################################################################

echo `date` $0 `date -u` begin

set -xa
export PS4='$SECONDS + '
date

export gefsmachine=${gefsmachine:-wcoss}
export gefsmpexec=${gefsmpexec:-mpirun.lsf}

export GRIBVERSION=${GRIBVERSION:-grib2}

###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]      ### For Developers
then
# . $basesource/nw${envir}/versions/gefs.ver
  . $basesource/nwdev/parm/gefs_config
fi

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATAROOT=${DATAROOT:-/tmpnwprd_p2}
export DATA=${DATA:-$DATAROOT/${job}.${pid}}
mkdir -p $DATA
cd $DATA

export SUBJOB=$SUBJOB
export jobgrid=$jobgrid

######################################
# Set up the cycle variable
######################################
export cycle=t${cyc}z
export cycle_fcst=t${cyc_fcst}z

if (( cyc == cyc_fcst )); then
  export fcstlong=true
  export cfsuffix=""
  export cycsuffix=false
else
  export fcstlong=false
  export cfsuffix=".cycfs$cyc_fcst"
  export cycsuffix=true
fi

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# RERUN    - Rerun posts from beginning (default no)
# VERBOSE  - Specify Verbose Output in global_postgp.sh
####################################
  export SENDCOM=${SENDCOM:-YES}
  export SENDDBN=${SENDDBN:-YES}
  export SENDECF=${SENDECF:-YES}
  export CREATE_TIGGE=${CREATE_TIGGE:-NO}
  export RERUN=${RERUN:-NO}

  # Specify Execution Areas
  export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
  export HOMEgsm=${HOMEgsm:-${NWROOT}/gsm.${gsm_ver}}

  export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
  export USHgefs=${USHgefs:-$HOMEgefs/ush}
  export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
  export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

  export FIXgsm=${FIXgsm:-$HOMEgsm/fix/fix_am}
  export PARMgsm=${PARMgsm:-$HOMEgsm/parm}

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm

export NTHREADS=1

##############################
# Run setup to initialize working directory and utility scripts
##############################
#ksh setup.sh

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh

. PDY

####################################
# Create member list
####################################

if [[ $fcstlong = true ]]; then
  memberlist="c00"
  kmem=1
else
  memberlist=""
  kmem=0
fi

##############################################
# Define COM directories
##############################################
export COMIN=$COMROOT/${NET}/${envir}/gefs.${PDY}
export COMOUT=$COMROOT/${NET}/${envir}/gefs.${PDY}

export overwrite=no

if [[ "$makepgrb1" = "yes" ]]; then
mkdir -m 775 -p $COMOUT/$cyc/pgrba
mkdir -m 775 -p $COMOUT/$cyc/pgrbalr
mkdir -m 775 -p $COMOUT/$cyc/pgrbb
mkdir -m 775 -p $COMOUT/$cyc/pgrbblr
fi

mkdir -m 775 -p $COMOUT/$cyc/pgrb2a
mkdir -m 775 -p $COMOUT/$cyc/pgrb2alr
mkdir -m 775 -p $COMOUT/$cyc/pgrb2b
mkdir -m 775 -p $COMOUT/$cyc/pgrb2blr
mkdir -m 775 -p $COMOUT/$cyc/pgrb2ap5
mkdir -m 775 -p $COMOUT/$cyc/pgrb2bp5

if test "$CREATE_TIGGE" = 'YES'
then
 mkdir -m 775 -p $COMOUT/$cyc/pgrb2c
fi

if test "$makepgrb2d" = 'yes'
then
 mkdir -m 775 -p $COMOUT/$cyc/pgrbd
 mkdir -m 775 -p $COMOUT/$cyc/pgrb2d
 mkdir -m 775 -p $COMOUT/$cyc/pgrb2dp5
fi

mkdir -m 775 -p $COMOUT/$cyc/track
mkdir -m 775 -p $COMOUT/$cyc/genesis

####################################
# Specify Timeout Behavior of Post
#
# SLEEP_TIME - Amount of time to wait for
#              a restart file before exiting
# SLEEP_INT  - Amount of time to wait between
#              checking for restart files
####################################
export SLEEP_TIME=900
export SLEEP_INT=5

echo
env | sort
echo

####################################
# Specify Process ID
####################################
export IGEN_ANL=107
export IGEN_FCST=107

####################################
# Specify Forecast Hour Range
####################################
export FHINC=06

case $FORECAST_SEGMENT in
  (hr)
    # high resolution segment
    export DOANALYSIS=YES;
    export SHOUR=00
    export FHINC=06
   if [[ $jobgrid = _p5 ]]; then
    case $SUBJOB in
     (A) 
       export DOANALYSIS=YES;
       export SHOUR=06;
       export FHINC=09;;
     (B) 
       export DOANALYSIS=NO;
       export SHOUR=00;
       export FHINC=09;;
     (C) 
       export DOANALYSIS=NO;
       export SHOUR=03;
       export FHINC=09;;
     (*) 
       export DOANALYSIS=YES;
       export SHOUR=00;
       export FHINC=03;;
    esac  
   fi
    if [[ $fcstlong = true ]]; then
      export FHOUR=$fhmaxh
    else
      export FHOUR=06
    fi
  ;;
  (lr)
    # low resolution segment
    export DOANALYSIS=NO;
    export FHINC=06
    export SHOUR=$(( $fhmaxh + FHINC ))
   if [[ $jobgrid = _p5 ]]; then
    case $SUBJOB in
     (A)
      export SHOUR=$SHOUR;
      export FHINC=12;;
     (B) 
      export SHOUR=$(( $SHOUR + FHINC ));
      export FHINC=12;;
     (*)
      export FHINC=06;;
    esac  
   fi 
    if [[ $fcstlong = true ]]; then
      export FHOUR=$fhmax
    else
      export FHOUR=06
    fi
  ;;
  (*)
    # whole forecast period
    export SHOUR=00
    if [[ $fcstlong = true ]]; then
      export FHOUR=$fhmax
    else
      export FHOUR=06
    fi
  ;;
esac

echo FORECAST_SEGMENT=$FORECAST_SEGMENT
echo FHINC=$FHINC
echo SHOUR=$SHOUR
echo FHOUR=$FHOUR

export DO_HD_PGRB=NO
export HDMAX=00

####################################
# Check if this is a restart
####################################
if [[ true  = false ]]; then
if [[ $cycsuffix = false ]]; then
  if test -f $COMOUT/$cyc/misc/$RUN.t${cyc}z.prdgen.control
  then
      modelrecvy=`cat < $COMOUT/$cyc/misc/$RUN.t${cyc}z.prdgen.control`
      recvy_pdy=`echo $modelrecvy | cut -c1-8`
      recvy_cyc=`echo $modelrecvy | cut -c9-10`
      recvy_shour=`echo $modelrecvy | cut -c11-13`

      if test $RERUN = "NO"
      then
         if test $recvy_shour -ge $FHOUR
         then
            msg="$RUN Forecast Post Already Completed to $recvy_shour"
            postmsg "$jlogfile" "$msg"
	    SHOUR=$recvy_shour
	 else
	    SHOUR=`expr $recvy_shour + $FHINC`
	    msg="$RUN Starting: PDY=$PDY cycle=t${recvy_cyc}z SHOUR=$SHOUR    ."
	    postmsg "$jlogfile" "$msg"
	 fi
      fi
  fi
else
  if test -f $COMOUT/$cyc/misc/$RUN.t${cyc}z.prdgen.control.cycfs$cyc_fcst
  then
     modelrecvy=`cat < $COMOUT/$cyc/misc/$RUN.t${cyc}z.prdgen.control.cycfs$cyc_fcst`
     recvy_pdy=`echo $modelrecvy | cut -c1-8`
     recvy_cyc=`echo $modelrecvy | cut -c9-10`
     recvy_shour=`echo $modelrecvy | cut -c11-13`

     if test $RERUN = "NO"
     then
       if test $recvy_shour -ge $FHOUR
       then
         msg="$RUN Forecast Post Already Completed to $recvy_shour"
         postmsg "$jlogfile" "$msg"
         SHOUR=$recvy_shour
       fi
     fi
  fi
fi
fi #(true = false)

#################################
# Run Post if Needed
#################################
if test $SHOUR -le $FHOUR
then
  export FHINC=$FHINC
  export FHOUR=$FHOUR
  export DO_LOW_RES=YES
 if [[ $jobgrid == _p5 ]]; then
  export DO_LOW_RES=NO
 fi 
 if [[ $GRIBVERSION == grib2 ]]; then
  $HOMEgefs/scripts/exgefs_prdgen$jobgrid.sh.ecf
 else 
  $HOMEgefs/scripts/exgefs_prdgen_grb1.sh.sms
 fi
  export SHOUR=`expr $FHOUR + $FHINC`
fi

msg="$job completed normally"
postmsg "$jlogfile" "$msg"

echo `date` TEST LISTING OF WORKING DIRECTORY BEGIN
echo DATA=$DATA
ls -al $DATA
echo `date` TEST LISTING OF WORKING DIRECTORY END

echo `date` $job completed

if [[ $KEEPDATA != "YES" ]]; then
  cd $DATAROOT
  rm -rf $DATA
fi
