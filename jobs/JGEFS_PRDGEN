#!/bin/ksh 

echo `date` $0 `date -u` begin

set -xa
export PS4='$SECONDS + '
date

export RERUN=${RERUN:-NO}

export total_tasks=${total_tasks:-6}
export gefsmpexec=${gefsmpexec:-"mpirun -n $total_tasks"}
export APRUN=${gefsmpexec_mpmd:-"mpirun -n $total_tasks cfp mpmd_cmdfile"}
export CNVGRIB=$CNVGRIB

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATA=${DATA:-${DATAROOT}/${job}.${pid}}

mkdir -p $DATA
cd $DATA

export jobgrid=$jobgrid

######################################
# Set up the cycle variable
######################################
export cycle=t${cyc}z

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-${DATA}/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# Define RERUN Parameter: default to RESTART if not previously set
#
# Set RERUN=RESTART to find the last set of complete SFCSIG files and restart the forecast at that point
# (corresponds to previous setting RERUN=NO)
# Set RERUN=YES to remove all forecast products and log files, if any, and start over from the conditions
#
# In case of FORECAST failure, set RERUN=RESTART if necessary in FORECAST, NCEPPOST, and PRDGEN jobs
# In case of NCEPPOST failure, set RERUN=RESTART if necessary in NCEPPOST, and PRDGEN jobs
# In case of PRDGEN   failure, set RERUN=RESTART if necessary in PRDGEN jobs
####################################
echo input setting RERUN=$RERUN
export RERUN=${RERUN:-RESTART}
echo current setting RERUN=$RERUN

####################################
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# SENDECF  - Flag Events on ECF
# VERBOSE  - Specify Verbose Output
####################################
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-YES}
export SENDECF=${SENDECF:-YES}
export VERBOSE=${VERBOSE:-YES}

####################################
# Specify Execution Areas
####################################
export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
export USHgefs=${USHgefs:-$HOMEgefs/ush}
export FIXgefs=${FIXgefs:-$HOMEgefs/fix/fix_gefs}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

export HOMEgfs=${HOMEgfs:-$HOMEgefs}
export FIXgfs=${FIXgfs:-$HOMEgfs/fix/fix_am}
export PARMgfs=${PARMgfs:-$HOMEgfs/parm}

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY

##############################################
# Define COM directories
##############################################
export COMIN=$COMROOT/${NET}/${envir}/${RUN}.${PDY}
export COMINgfs=${COMINgfs:-$(compath.py gfs/prod/gfs.${PDY})/$cyc}
export COMOUT=$COMROOT/${NET}/${envir}/${RUN}.${PDY}

# 20150622 RLW change to "yes" to remake prdgen when post is remade
#export overwrite=no
export overwrite=yes


if [[ $save_pgrb2_p5 == YES ]]; then
	mkdir -m 775 -p $COMOUT/$cyc/pgrb2p5
fi
if [[ $save_pgrb2_p25 == YES ]]; then
	mkdir -m 775 -p $COMOUT/$cyc/pgrb2p25 
fi

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm
. $PARMgefs/gefs_prdgen.parm

case $FORECAST_SEGMENT in
	hr)
		start_hour=0
		end_hour=${fhmaxh}
		;;
	lr)
		start_hour=$((${fhmaxh}+1))
		end_hour=${fhmax}
		PRDGEN_STREAMS=$PRDGEN_STREAMS_LR
		;;
	*)
		start_hour=0
		end_hour=${fhmaxh}
		;;
esac # $FORECAST_SEGMENT in

for stream in ${PRDGEN_STREAMS[@]}; do
	# Filter out hours based on forecast segment
	typeset -a hours=($(echo ${PRDGEN_HOURS[$stream]}))
	echo "hours = $hours"
	for i in "${!hours[@]}"; do
		hour=${hours[i]}
		echo "i = $i  hour = $hour"
		if [[ $hour -lt $start_hour || $hour -gt $end_hour ]]; then
			unset 'hours[i]'
		fi
	done
	PRDGEN_HOURS[$stream]="${hours[@]}"
	unset hours

	if [[ -z ${PRDGEN_GRID[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_GRID not defined for $stream"
		exit -1
	fi
	if [[ -z ${PRDGEN_GRID_SPEC[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_GRID_SPEC not defined for $stream"
		exit -1
	fi
	if [[ -z ${PRDGEN_HOURS[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_HOURS not defined for $stream"
		exit -1
	fi
	if [[ -z ${PRDGEN_SUBMC[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_SUBMC not defined for $stream"
		exit -1
	fi
	if [[ -z ${PRDGEN_A_DIR[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_A_DIR not defined for $stream"
		exit -1
	fi
#if [[ -z ${PRDGEN_B_DIR[$stream]} ]]; then
#	echo "FATAL ERROR in $0: PRDGEN_B_DIR not defined for $stream"
#		exit -1
#	fi
	if [[ -z ${PRDGEN_A_PREFIX[$stream]} ]]; then
		echo "FATAL ERROR in $0: PRDGEN_A_PREFIX not defined for $stream"
		exit -1
	fi
#	if [[ -z ${PRDGEN_B_PREFIX[$stream]} ]]; then
#		echo "FATAL ERROR in $0: PRDGEN_B_PREFIX not defined for $stream"
#		exit -1
#	fi

	# Print out settings for this stream
	cat <<-EOF
		Settings for prgden stream $stream:
			Grid: ${PRDGEN_GRID[$stream]}
			Grid Spec: ${PRDGEN_GRID_SPEC[$stream]}
			Hours: (${PRDGEN_HOURS[$stream]})
			submc: ${PRDGEN_SUBMC[$stream]}
			A Dir: ${PRDGEN_A_DIR[$stream]}
			A Prefix: ${PRDGEN_A_PREFIX[$stream]}
			B Dir: ${PRDGEN_B_DIR[$stream]}
			B Prefix: ${PRDGEN_B_PREFIX[$stream]}
			Do Anaylsis: ${PRDGEN_DO_ANALYSIS[$stream]:-"NO (default)"}

	EOF
done

export NTHREADS=1

####################################
# Specify Timeout Behavior of Post
#
# SLEEP_TIME - Amount of time to wait for
#              a restart file before exiting
# SLEEP_INT  - Amount of time to wait between
#              checking for restart files
####################################
export SLEEP_TIME=900
export SLEEP_INT=5

echo
env | sort
echo

####################################
# Specify Process ID
####################################
export IGEN_ANL=107
export IGEN_FCST=107

echo FORECAST_SEGMENT=$FORECAST_SEGMENT

export DO_HD_PGRB=NO
export HDMAX=00

####################################
# If this is a rerun, remove all control files
####################################
if [[ $RERUN = YES ]]; then
	$USHgefs/gefs_restart_cleanup.sh 00 $fhmax ${PRDGEN_SUBMC[@]}
fi

#################################
# Run Post if Needed
#################################
rm -f prdgen.cmdfile
for stream in ${PRDGEN_STREAMS[@]}; do
	mkdir -m 775 -p $COMOUT/$cyc/${PRDGEN_A_DIR[${stream}]}
	if [[ ! -z ${PRDGEN_B_DIR[$stream]} ]]; then
		mkdir -m 775 -p $COMOUT/$cyc/${PRDGEN_B_DIR[${stream}]}
	fi

	subdata=${DATA}/${stream}
	if [ ! -d ${subdata} ]; then
		mkdir -p ${subdata};
	fi
	outfile=${subdata}/${stream}.out

	jobgrid="${PRDGEN_GRID[$stream]}"
	grid_spec="${PRDGEN_GRID_SPEC[$stream]}"
	hours="${PRDGEN_HOURS[$stream]}"
	submc="${PRDGEN_SUBMC[$stream]}"
	pgad="${PRDGEN_A_DIR[$stream]}"
	pgbd="${PRDGEN_B_DIR[$stream]}"
	pgapre="${PRDGEN_A_PREFIX[$stream]}"
	pgbpre="${PRDGEN_B_PREFIX[$stream]}"
	do_analysis="${PRDGEN_DO_ANALYSIS[$stream]:-NO}"

	echo "$HOMEgefs/scripts/exgefs_prdgen.sh.ecf $subdata \"$stream\" \"$jobgrid\" \"$grid_spec\" \"$hours\" \"$submc\" \"$pgad\" \"$pgbd\" \"$pgapre\" \"$pgbpre\" \"$do_analysis\" 2>&1 >${outfile}" >> prdgen.cmdfile

done

cat prdgen.cmdfile
chmod 775 prdgen.cmdfile
export MP_CMDFILE=${DATA}/prdgen.cmdfile
export SCR_CMDFILE=$MP_CMDFILE  # Used by mpiserial on Theia
export MP_PGMMODEL=mpmd
rm -f mpmd_cmdfile
ln -s $MP_CMDFILE mpmd_cmdfile

$APRUN 

rc=$?
if [[ $rc -ne 0 ]]; then
	msg="FATAL ERROR: $0 failed!"
	echo "`date`    $msg"
	postmsg "$jlogfile" "$msg"
	export err=1
	err_chk
	exit $err
fi

msg="$job completed normally"
postmsg "$jlogfile" "$msg"

echo `date` TEST LISTING OF WORKING DIRECTORY BEGIN
echo DATA=$DATA
ls -al $DATA
echo `date` TEST LISTING OF WORKING DIRECTORY END

echo `date` $job completed

##############################
# Remove the Temporary working directory
##############################
cd $DATAROOT
if [ ${KEEPDATA:-NO} = NO ] ; then rm -rf $DATA ; fi
