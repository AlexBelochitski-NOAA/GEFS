#!/bin/ksh 
################# lines between these markers have been modified for dev begin
################# lines between these markers have been modified for dev end
###testb
# lines between ###testb and ###teste not needed for production
###teste

$SMSBIN/smsinit $LOADL_STEP_ID 
echo `date` $0 `date -u` begin

set -xa
####################################

export gefsmachine=${gefsmachine:-wcoss}
export gefsmpexec=${gefsmpexec:-mpirun.lsf}

export APRUN=${gefsmpexec:-mpirun.lsf}


if [[ $gefsmachine = zeus ]]; then
   export  APRUN="$gefsmpexec $basesource/nw$envir/exec/zeus-poe"
 fi
###############
#if [ "$RUN_ENVIR" = dev ]   ### For Developers
#then
#  . $basesource/nwdev/parm/gefs_config
#fi
###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]   ### For Developers
then
# . $basesource/nw${envir}/versions/gefs.ver
  . $basesource/nwdev/parm/gefs_config
fi


# #### 05/05/99 ###############################
# SETUP ENS INITIALIZATION PROCESSING VARIABLES
# #############################################

####################################
# obtain unique process id (pid) and identify working directory
####################################
export pid=$$
export DATA=$DATAROOT/gefs_init_$PDY$cyc.$envir.save

echo DATA=$DATA
cd $DATA


export cycle=t${cyc}z
export cycle_fcst=t${cyc_fcst}z

echo cyc=$cyc cyc_fcst=$cyc_fcst
echo cycle=$cycle cycle_fcst=$cycle_fcst

if (( cyc == cyc_fcst )); then
  export cycsuffix=false
  export fcstlong=true
else
  export fcstlong=false
  export cycsuffix=true
fi

echo fcstlong=$fcstlong
echo cycsuffix=$cycsuffix

####################################
# Specify NET and RUN Name and model
####################################
export NET=gens
export RUN=enstr

####################################
# File To Log Msgs
####################################
  export jlogfile=${jlogfile:-$baselog/com/logs/jlogfile}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# SAVEGES  - Copy Files From TMPDIR to $GESdir
# RMGES    - Clean Files in $GESdir
# SENDSMS  - Flag Events on SMS
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# RERUN    - Rerun posts from beginning (default no)
# VERBOSE  - Specify Verbose Output in global_postgp.sh
####################################
  export SENDCOM=${SENDCOM:-YES}
  export SENDECF=${SENDECF:-YES}
  export RERUN=${RERUN:-NO}
  export SAVEGES=${SAVEGES:-YES}
  export VERBOSE=${VERBOSE:-YES}

if [[ $envir = prod ]]; then
###teste
 if [ $cyc -eq 00 -o $cyc -eq 12 ]
  then
   export SENDDBN=YES
  else
   export SENDDBN=YES
  fi
###testb
else
   export SENDDBN=YES
fi
###teste

 
####################################
# Specify Execution Areas
####################################
export HOMEgefs=${HOMEgefs:-$NWROOT/gefs.${gefs_ver}}
export HOMEgsm=${HOMEgsm:-$NWROOT/gsm.${gsm_ver}}


  export EXECgsm=${EXECgsm:-$HOMEgsm/exec}
  export USHgsm=${USHgsm:-$HOMEgsm/ush}
  export FIXgsm=${FIXgsm:-$HOMEgsm/fix/fix_am}
  export PARMgsm=${PARMgsm:-$HOMEgsm/parm}

  export FIXGLOBAL=$FIXgsm

  export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
  export USHgefs=${USHgefs:-$HOMEgefs/ush}
  export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
  export PARMgefs=${PARMgefs:-$HOMEgefs/parm}



export ERRSCRIPT=err_chk
export LOGSCRIPT=startmsg
export REDOUT='1>>'
export REDERR='2>'

##############################################
echo set parameters using gefs.parm
##############################################

. $PARMgefs/gefs.parm
. $PARMgefs/gefs_init.parm

echo
env | sort
echo

##############################
# Set up the UTILITIES
##############################
#export USHutil=$HOMEutil/ush
#export EXECutil=$HOMEutil/exec
#export utilscript=$HOMEutil/ush

##############################
# Run setup to initialize working directory and utility scripts
##############################
#sh $USHutil/setup.sh

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY

##############################################
# for global_chgres.sh
##############################################
#export SLMASK=/dev/null

##############################################
# Define COM directories
##############################################
export COMIN=$COMROOT/${NET}/${envir}/gefs.${PDY}
export COM=$COMROOT/${NET}/${envir}
export COMINm1=$COMROOT/${NET}/${envir}/gefs.${PDYm1}
export COMINm2=$COMROOT/${NET}/${envir}/gefs.${PDYm2}
export COMINm3=$COMROOT/${NET}/${envir}/gefs.${PDYm3}
export COMINm4=$COMROOT/${NET}/${envir}/gefs.${PDYm4}

export COMOUT=$COMROOT/${NET}/${envir}/gefs.${PDY}

export gespath=$GESROOT/${envir}


mkdir -m 775 -p $COMOUT/$cyc/init
mkdir -m 775 -p $COMOUT/$cyc/sflux

##############################################
# Define GES directories
##############################################
export GESdir=$gespath/gefs.${PDY}
mkdir -m 775 -p $GESdir

##############################################
echo list environment before running script
##############################################

echo
env | sort
echo

#############################################################
# Execute the script
$HOMEgefs/scripts/exgefs_init_combine.sh.ecf
#############################################################

cat $pgmout

msg="JOB COMPLETED NORMALLY"
postmsg "$jlogfile" "$msg"

##############################
# Remove the working directory
##############################
#if [[ $KEEPDATA != "YES" ]]; then
#  cd $DATAROOT
#  rm -rf $DATA
#fi

###testb
if [[ $envir = prod ]]; then
###teste
cd /tmpnwprd
rm -rf $DATA
###testb
elif [[ $envir = para ]] || \
     [[ $envir = test ]]; then
cd /tmpnwprd
rm -rf $DATA
else
  echo skip cleanup for testing
################# lines between these markers have been modified for dev begin
  echo `date` special copy begin
  if [[ $envir = dev ]]; then
    ##################################### parameter controlled copy to mirror
    if [[ x$initarchlist != x ]]; then
      iafound=no
      for cyctest in $initarchlist
      do
        if (( cyc == cyctest )); then
          diro=$baseinitarch/nwges/$envir/gefs.$PDY
          diri=$baseoutput/nwges/$envir/gefs.$PDY
          if [[ -d $diri ]]; then
            cd $diri
            rc=$?
            if (( rc == 0 )); then
              rctot=0
              mkdir -p $diro
              if [[ -d $diro ]]; then
                for file in *.t${cyc}z.sanl* gec00.t${cyc}z.sfcanl
                do
                  if [[ -f $file ]]; then
                    ls -al $file
                    cp -p $file $diro/$file
                    rc=$?
                    if (( rc == 0 )); then
                      ls -al $diro/$file
                    else
                      (( rctot = rctot + rc ))
                      echo cp -p $file $diro/$file FAILED rc=$rc
                    fi
                  else
                    echo file=$file DOES NOT EXIST AS A FILE IN $diro
                    (( rctot = rctot + 10000 ))
                  fi
                done
                if (( rctot != 0 )); then
                  echo special copy guess files FAILED rctot=$rctot
                fi
                found=yes
              else
                echo diro=$diro DOES NOT EXIST AS A DIRECTORY
              fi
            else
              echo cd $diri FAILED rc=$rc
            fi
          else
            echo diri=$diri DOES NOT EXIST AS A DIRECOTRY
          fi
        fi
      done
      if [[ iafound = no ]]; then
        echo special copy not done because cyc=$cyc is not in initarchlist=$initarchlist
      fi
    else
      echo special copy not done because initarchlist=$initarchlist is not defined
    fi
  else
    echo special copy not done because envir=$envir
  fi
  echo `date` special copy tests end
################# lines between these markers have been modified for dev end
fi

echo `date` $0 `date -u` end
