#!/bin/ksh

echo `date` $0 `date -u` begin

set -xa
export PS4='$SECONDS + '
date

export machine=$machine
export gefsmpexec=${gefsmpexec:-mpirun}
export APRUN=${gefsmpexec:-mpirun}

export RUNMEM=$RUNMEM
export mem=`echo $RUNMEM|cut -c3-5`

export ENS_NUM=1
echo "ENS_NUM=$ENS_NUM"

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATA=${DATA:-$DATAROOT/${job}.${pid}}
mkdir -p $DATA
mkdir -p $DATA/INPUT
cd $DATA

############################
# Set up cycle varaible
############################
export cycle=t${cyc}z

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}
#export NTHREADS=1

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-${DATA}/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# Define RERUN Parameter: default to RESTART if not previously set
#
# Set RERUN=RESTART to find the last set of complete SFCSIG files and restart the forecast at that point
# (corresponds to previous setting RERUN=NO)
# Set RERUN=YES to remove all forecast products and log files, if any, and start over from the conditions
#
# In case of FORECAST failure, set RERUN=RESTART if necessary in FORECAST, NCEPPOST, and PRDGEN jobs
# In case of NCEPPOST failure, set RERUN=RESTART if necessary in NCEPPOST, and PRDGEN jobs
# In case of PRDGEN   failure, set RERUN=RESTART if necessary in PRDGEN jobs
####################################
echo "input setting RERUN=$RERUN"

export RERUN=${RERUN:-NO}
#
echo "current setting RERUN=$RERUN"

# Specify Execution Areas
export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
export USHgefs=${USHgefs:-$HOMEgefs/ush}
export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

export HOMEgsm=${HOMEgsm:-$HOMEgefs}
export HOMEgfs=$HOMEgsm
export EXECgfs=$HOMEgfs/exec
export USHgfs=$HOMEgfs/ush
export FIXgfs=$HOMEgfs/fix
export PARMgfs=$HOMEgfs/parm

#Names used in exglobal_fv3.sh
export BASE_GSM=${BASE_GSM:-$HOMEgfs}
export FIX_DIR=$FIXgfs
export FIX_AM=$FIX_DIR/fix_am
export FIXfv3=$FIX_DIR/fix_fv3_gmted2010

# Run setpdy and initialize PDY variables
setpdy.sh
. PDY
##############################################
# Define COM and GES directories
##############################################
if [[ $FORECAST_SEGMENT = hr ]] ; then
	echo "Integrate the model for the Half-Month range segment"
	FHINI=0
elif [[ $FORECAST_SEGMENT = lr ]] ; then
	echo "Integrate the model for the Longer Range segment"
	FHINI=$fhmaxh
    export fhrestart=$fhmaxh
    export cplwav=.false.
else
	msg="FATAL ERROR:  Incorrect value of FORECAST_SEGMENT=$FORECAST_SEGMENT"
	echo "`date`   $msg"
	echo "The Forecast job will be aborted!!!!"
	postmsg "$jlogfile" "$msg"
	export pgm=JENS_FCST
	export err=911
	err_chk
fi # [[ $FORECAST_SEGMENT = hr ]]

echo FORECAST_SEGMENT = $FORECAST_SEGMENT
echo FHINI=$FHINI
echo ENS_SPS = $ENS_SPS
echo RUN_CONCURRENT = $RUN_CONCURRENT

export GESIN=$GESROOT/${envir}/${RUN}.${PDY}/$cyc
export GESOUT=$GESROOT/${envir}/${RUN}.${PDY}/$cyc
export COMIN=$COMROOT/${NET}/${envir}/${RUN}.${PDY}
export COMOUT=$COMROOT/${NET}/${envir}/${RUN}.${PDY}
export SSTDIR=${SSTDIR:-$COMIN/${cyc}/cfssst}

#export memdir=$COMOUT/$cyc/sfcsig
export memdir=$GESIN/$mem
export gmemdir=$GESIN/$mem
export ICSDIR=$GESIN/$mem
export FCSTDIR=$COMOUT/$cyc/sfcsig
export RSTDIR=$GESIN/$mem/RESTART
export RSTDIR_TMP=$RSTDIR

mkdir -m 775 -p $COMOUT/$cyc/sfcsig
mkdir -m 775 -p $COMOUT/$cyc/misc/fcst
mkdir -m 775 -p $COMOUT/$cyc/restart/$mem

mkdir -m 755 -p $GESIN/$mem/RESTART

#ln -s $GESOUT/$mem/RESTART $DATA/RESTART

export ERRSCRIPT=err_chk
export LOGSCRIPT=startmsg

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm
. $PARMgefs/gwes.parm

if [[ $FORECAST_SEGMENT = hr ]] ; then
	export RERUN="NO"
	FHINI=${FHINI:-0}
fi
if [[ $FORECAST_SEGMENT = lr ]] ; then
	export RERUN="YES"
	FHINI=${FHINI:-$fhmaxh}
	export CDATE_RST=$($NDATE +$fhmaxh $PDY$cyc)
fi
if [[ $RERUN = RERUN ]] ; then
	if [[ $FORECAST_SEGMENT = hr ]] ; then
		FHINI=${FHINI:-0}
	elif [[ $FORECAST_SEGMENT = lr ]] ; then
		FHINI=${FHINI:-$fhmaxh}
	else
		FORECAST_SEGMENT=$FORECAST_SEGMENT is not supported !
		stop
	fi	
fi

if [[ $FORECAST_SEGMENT = hr ]] ; then
	CASE=$CASEHR;FHMAX=$fhmaxh;FHOUT=$FHOUTLF;FHZER=6;
	MTNRSL=$MTNRSLFV;LONB=$LONBFV;LATB=$LATBFV;
	FHMAX_HF=$FHMAXHF;FHOUT_HF=$FHOUTHF; 
	FHINI=$FHINI;
	(( LEVS = LEVSHR + 1 ))
elif [[ $FORECAST_SEGMENT = lr ]] ; then
	CASE=$CASELR;FHMAX=$fhmax;FHOUT=$FHOUTLF;FHZER=6;
 	MTNRSL=$MTNRSLLR;LONB=$LONBLR;LATB=$LATBLR;
	FHMAX_HF=$FHMAXHF;FHOUT_HF=$FHOUTHF;
	FHINI=$FHINI;
	(( LEVS = LEVSLR + 1 ))
else
	FORECAST_SEGMENT=$FORECAST_SEGMENT is not supported !
	stop
fi

export FHMIN=$FHINI

#  The VEGTYPE fix file:
export FNVETC=${FNVETC:-${FIX_AM}/global_vegtype.igbp.t$MTNRSL.rg.grb}
export FNTSFC=${FNTSFC:-${FIX_AM}/RTGSST.1982.2012.monthly.clim.grb}
export FNAISC=${FNAISC:-${FIX_AM}/CFSR.SEAICE.1982.2012.monthly.clim.grb}
export FNABSC=${FNABSC:-${FIX_AM}/global_mxsnoalb.uariz.t$MTNRSL.rg.grb}
export FNALBC=$FIX_AM/global_snowfree_albedo.bosu.t$MTNRSL.rg.grb
export FNALBC2=$FIX_AM/global_albedo4.1x1.grb
export FNSMCC=$FIX_AM/global_soilmgldas.t$MTNRSL.grb
export FNSOTC=$FIX_AM/global_soiltype.statsgo.t$MTNRSL.rg.grb

####################################
# Create member list
####################################

#
# Forecast Input Variables
#
. $PARMgefs/gefs_fcst.parm
export fhstoch=$FHMAX

if [[ $FORECAST_SEGMENT = hr ]] ; then
#	(( FHMAX = FHMAX + FHOUTLF ))
	(( FHMAX = FHMAX + 1 ))
fi

export fhstoch=${fhstoch:-"-999.0"}  # forecast hour to dump random patterns
export stochini=${stochini:-".false."}  # true= read in pattern, false=initialize from seed

if [[ $RERUN = "YES" ]] ; then
	export warm_start=.true.
	export restart_hour=$FHMIN
	export restart_run=.true.    
	export output_1st_tstep=.true.
	export stochini=.true.
fi
#
# Forecast Input Variables
#
#--------------------------------------------
export KMP_AFFINITY=disabled
export OMP_STACKSIZE=1024m
export MP_LABELIO=yes

#--------------------------------------------
# Configuration file for running NEMS FV3GFS 
#--------------------------------------------
#--------------------------------------------
#mac=`hostname |cut -c1`

#NEMS=YES
#if [ $machine = WCOSS ]; then
#	EXPDIR=/global/save/$LOGNAME/para_gfs/pr$PSLOT
#elif [ $machine = WCOSS_C ]; then
#	EXPDIR=$HOMEgefs/parm
#elif [ $machine = THEIA ]; then
#	IO_IN=.true.
#	NEMSIO_OUT=.true.
#	IPD4=YES
#fi
# ----------------------------------
# user account 
# ----------------------------------

#if [[ $mem = c00 ]] ;then 
if [[ $mem = c00 ]] ;then 
	MEMBER=$((npert+1))
	WAV_MEMBER="00"
else
	MEMBER=`echo $mem|cut -c2-3`
	WAV_MEMBER=$MEMBER
fi
export MEMBER=$MEMBER
memchar=mem$(printf %03i $MEMBER)

# 	export do_sppt=$STOC_SPPT
# 	export do_shum=$STOC_SHUM
# 	export do_skeb=$STOC_SKEB

export SET_STP_SEED=${SET_STP_SEED:-"YES"}

if [[ $FORECAST_SEGMENT = hr ]] ; then

	if [[ $DO_SPPT = YES ]] ; then
		export SPPT=$SPPT_hr
		export ISEED_SPPT=$ISEED_SPPT_hr
		export SPPT_LOGIT=$SPPT_LOGIT_hr
		export SPPT_TAU=$SPPT_TAU_hr
		export SPPT_LSCALE=$SPPT_LSCALE_hr
		export sppt_sfclimit=$sppt_sfclimit_hr
	#	export sppt_sigtop1=$sppt_sigtop1_hr
	#	export sppt_sigtop2=$sppt_sigtop2_hr
	fi

	if [[ $DO_SHUM = YES ]] ; then
		export SHUM=$SHUM_hr
		export ISEED_SHUM=$ISEED_SHUM_hr
		export SHUM_TAU=$SHUM_TAU_hr
		export SHUM_LSCALE=$SHUM_LSCALE_hr
	#	export shum_sigefold=$shum_sigefold_hr
	fi

	if [[ $DO_SKEB = YES ]] ; then
		export SKEB=$SKEB_hr
		export ISEED_SKEB=$ISEED_SKEB_hr
		export SKEB_TAU=$SKEB_TAU_hr
		export SKEB_LSCALE=$SKEB_LSCALE_hr
		export SKEBNORM=${SKEBNORM:-"1"}
	fi

fi

if [[ $FORECAST_SEGMENT = lr ]] ; then

	if [[ $DO_SPPT = YES ]] ; then
		export SPPT=$SPPT_hr
		export ISEED_SPPT=$ISEED_SPPT_hr
		export SPPT_LOGIT=$SPPT_LOGIT_hr
		export SPPT_TAU=$SPPT_TAU_hr
		export SPPT_LSCALE=$SPPT_LSCALE_hr
		export sppt_sfclimit=$sppt_sfclimit_hr
	#	export sppt_sigtop1=$sppt_sigtop1_hr
	#	export sppt_sigtop2=$sppt_sigtop2_hr
	fi

	if [[ $DO_SHUM = YES ]] ; then
		export SHUM=$SHUM_hr
		export ISEED_SHUM=$ISEED_SHUM_hr
		export SHUM_TAU=$SHUM_TAU_hr
		export SHUM_LSCALE=$SHUM_LSCALE_hr
	#	export shum_sigefold=$shum_sigefold_hr
	fi

	if [[ $DO_SKEB = YES ]] ; then
		export SKEB=$SKEB_hr
		export ISEED_SKEB=$ISEED_SKEB_hr
		export SKEB_TAU=$SKEB_TAU_hr
		export SKEB_LSCALE=$SKEB_LSCALE_hr
		export SKEBNORM=${SKEBNORM:-"1"}
	fi

fi

#case $CASE in
#  C48)   DELTIM=3600; layout_x=4  ; layout_y=8  ;;
#  C96)   DELTIM=1800; layout_x=4  ; layout_y=8  ;;
##  C192)  DELTIM=900 ; layout_x=4  ; layout_y=8  ;;
#  C192)  DELTIM=600 ; layout_x=4  ; layout_y=8  ;;
#  C384)  DELTIM=450 ; layout_x=4  ; layout_y=8  ;;
#  C768)  DELTIM=225 ; layout_x=8  ; layout_y=16 ;;
#  C1152) DELTIM=150 ; layout_x=8  ; layout_y=16 ;;
#  C3072) DELTIM=90  ; layout_x=16 ; layout_y=32 ;;
#  *)     echo "grid $CASE not supported, exit"
#         exit ;;
#esac

#
# Forecast Input Variables
#
export fcstscript=${fcstscript:-$HOMEgefs/scripts/exglobal_fcst_nemsfv3gfs.sh}
#export fcstscript=${fcstscript:-$HOMEgsm/scripts/exglobal_fcst_nemsfv3gfs.sh}
export FORECASTSH=$fcstscript
export FCSTEXECDIR=${FCSTEXECDIR:-$BASE_GSM/sorc/fv3gfs.fd/BUILD/bin}
export PARM_FV3DIAG=${PARM_FV3DIAG:-$PARMgfs/parm_fv3diag}
export ROTDIR=${ROTDIR:-$DATA}

export APRUN=${APRUN:-""}
export EXECDIR=$EXECgfs
#export FCSTEXECDIR=$BASE_SVN/NEMSfv3gfs/stochy/NEMS/exe
export FCSTEXECDIR=${FCSTEXECDIR:-$EXECDIR}

echo $fcstscript
echo $FORECASTSH
echo $FCSTEXECDIR
echo $FCSTEXEC
echo $PARM_FV3DIAG
echo $APRUN

NCP="/bin/cp -p"

restart_interval=${fhrestart:-1000}

#USE_RESTART=NO                      #use restart file under COMROT/RESTART if run is interruptted
#FHSTRT=6                            #restart from a given hour if USE_RESTART=YES
SEND=NO    
export VERBOSE=YES

#echo "-----end of CONFIG in $0 --------"

################################################################################
export CDATE=$PDY$cyc
export rCDUMP=$RUNMEM
export CDUMP=$RUNMEM

#ICSDIR_template=${ICSDIR_template:-$GESIN/$mem}
#ICSDIR=`eval echo $ICSDIR_template`

LINK=NO   # link is done in the $FORECASa scriptT
if [ $LINK = "YES" ]; then
if [ $OUTPUT_GRID = "gaussian_grid" ]; then
	# Link output files
	hr=$FHINI
	while (( hr < FHMAX_HF )); do
		fhr=$(printf "%03.0f" $hr)
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.atmf$fhr.nemsio $DATA/$CDUMP.${cycle}.atmf$fhr.nemsio
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.sfcf$fhr.nemsio $DATA/$CDUMP.${cycle}.sfcf$fhr.nemsio
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.logf$fhr.nemsio $DATA/$CDUMP.${cycle}.logf$fhr.nemsio
		export hr=$(expr $hr + $FHOUT_HF)
	done
	while (( hr <= FHMAX )); do
		fhr=$(printf "%03.0f" $hr)
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.atmf$fhr.nemsio $DATA/$CDUMP.${cycle}.atmf$fhr.nemsio
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.sfcf$fhr.nemsio $DATA/$CDUMP.${cycle}.sfcf$fhr.nemsio
		ln -s $FCSTDIR/${RUNMEM}.${cycle}.logf$fhr.nemsio $DATA/$CDUMP.${cycle}.logf$fhr.nemsio
		export hr=$(expr $hr + $FHOUT)
	done
else
	for n in `seq 1 $ntiles`; do
		for file in atmos_4xdaily. atmos_static. fv3_history. fv3_history2d. grid_spec. nggps2d. nggps3d.; do
			# ln -s $ROTDIR/$file\tile$n.nc $DATA/$file\tile$n.nc

			# touch $SFCSIG/$mem/$file\tile$n.nc
			# ln -s $SFCSIG/$mem/$file\tile$n.nc $memdir/$file\tile$n.nc
			;
		done
	done
fi # [ $OUTPUT_GRID = "gaussian_grid" ]
fi # $LINK

if [[ $cplwav = ".true." ]]; then
	# Settings for Wavewatch III
	export COMINWW3=${COMINWW3:-${COMROOT:?}/${NET}/${envir}}
	export COMOUTWW3=$COMROOT/${NET}/${envir}
fi # [[ $cplwav = ".true." ]]

export FIX_DIR=$FIXgfs
export FIX_AM=$FIX_AM

export assim_freq=6
export increment=$ICSDIR/fv3_increment.nc

if [[ $FORECAST_SEGMENT = lr ]] ; then
	cp -pr $GESIN/$mem/RESTART/stoch_out.F* $DATA/stoch_ini 
fi

$FORECASTSH
ERR=$?

if [[ $FORECAST_SEGMENT = hr ]] ; then
	cp -pr $DATA/stoch_out.F* $GESIN/$mem/RESTART  
# 	fhr=$(printf "%03.0f" $FHMAX)
#	mv $FCSTDIR/${RUNMEM}.${cycle}.atmf$fhr.nemsio $FCSTDIR/${RUNMEM}.${cycle}.atmf$fhr.nemsio_hr
#	mv $FCSTDIR/${RUNMEM}.${cycle}.sfcf$fhr.nemsio $FCSTDIR/${RUNMEM}.${cycle}.sfcf$fhr.nemsio_hr
#	mv $FCSTDIR/${RUNMEM}.${cycle}.logf$fhr.nemsio $FCSTDIR/${RUNMEM}.${cycle}.logf$fhr.nemsio_hr
fi

if [ $ERR = 0 ]; then
    msg="$job completed normally!"
else
    msg="FATAL ERROR: $job failed!"
fi
postmsg "$jlogfile" "$msg"

if [[ $KEEPDATA != "YES" ]]; then
    cd $DATAROOT
    rm -rf $DATA
fi

echo `date` $0 `date -u` end

exit $ERR
