#!/bin/ksh

echo `date` $0 `date -u` begin

set -xa
export PS4='$SECONDS + '
date

###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]; then ### For Developers
# . $basesource/nw${envir}/versions/gefs.ver
#        . $basesource/nwdev/parm/gefs_config
        . $basesource/nwdev/parm/gefs_config
        export gefsmpexec=${gefsmpexec:-mpirun.lsf}
fi
export WRT_GROUP=2
export WRTPE_PER_GROUP=4
export LDFIFLTO=.true.
export machine=$machine
export nemsioget=$nemsioget
export PARM_NGAC=/gpfs/tp1/nco/ops/nwprod/ngac.v1.0.2/parm
export APRUN=${gefsmpexec:-mpirun.lsf}
export DOIAU=NO

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATA=${DATA:-$DATAROOT/${job}.${pid}}
mkdir -p $DATA
cd $DATA

############################
# Set up cycle varaible
############################
export cycle=t${cyc}z
export cycle_fcst=t${cyc_fcst}z

if (( cyc == cyc_fcst )); then
        export cycsuffix=false
        export fcstlong=true
        cfsuffix=
else
        export fcstlong=false
        export cycsuffix=true
        export ENS_SPS=.false.
        cfsuffix=.cycfs$cyc_fcst
fi

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=${RUN:-gefs}
#export NTHREADS=1

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}
####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

if [[ $RUN_CONCURRENT = yes ]]; then
        export PGMOUT=FCOUT.o$pid
        export PGMERR=
        export REDOUT=' | tee -a '
        export REDERR=' 2>&1 '
fi

####################################
# Define RERUN Parameter: default to RESTART if not previously set
#
# Set RERUN=RESTART to find the last set of complete SFCSIG files and restart the forecast at that point
# (corresponds to previous setting RERUN=NO)
# Set RERUN=YES to remove all forecast products and log files, if any, and start over from the conditions
#
# In case of FORECAST failure, set RERUN=RESTART if necessary in FORECAST, NCEPPOST, and PRDGEN jobs
# In case of NCEPPOST failure, set RERUN=RESTART if necessary in NCEPPOST, and PRDGEN jobs
# In case of PRDGEN   failure, set RERUN=RESTART if necessary in PRDGEN jobs
####################################
echo "input setting RERUN=$RERUN"
export RERUN=${RERUN:-RESTART}
# export RERUN=RESTART
# export RERUN=YES
echo "current setting RERUN=$RERUN"

# Specify Execution Areas
export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
export HOMEgsm=/gpfs/hps/emc/ensemble/noscrub/emc.enspara/Bing.Fu/svn/fv3gfs/trunk/global_shared.v15.0.0
export EXECgsm=$HOMEgsm/exec
export USHgsm=$HOMEgsm/ush
export FIXgsm=$HOMEgsm/fix/fix_am
export PARMgsm=$HOMEgsm/parm

export EXECGLOBAL=${EXECgsm:-$HOMEgsm/exec}
export USHGLOBAL=${USHgsm:-$HOMEgsm/ush}
export FIXGLOBAL=${FIXgsm:-$HOMEgsm/fix/fix_am}
export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
export USHgefs=${USHgefs:-$HOMEgefs/ush}
export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY
##############################################
# Define COM and GES directories
##############################################
export GESIN=$GESROOT/${envir}/${RUN}.${PDY}
export GESOUT=$GESROOT/${envir}/${RUN}.${PDY}
export COMOUT=$COMROOT/${NET}/${envir}/${RUN}.${PDY}
export FV3GESOUT=$GESROOT/${envir}/fv3gefs.${PDY}
# RLW 20150320 update restart procedure, use sfcsig files instead of restart files
SFCSIG=$COMOUT/$cyc/sfcsig

mkdir -m 775 -p $COMOUT/$cyc/sfcsig
mkdir -m 775 -p $COMOUT/$cyc/sflux
mkdir -m 775 -p $COMOUT/$cyc/misc/fcst

##############################################
echo set parameters using gefs.parm
##############################################
. $PARMgefs/gefs.parm

# hour_lr_ni will be used to define the IC files of the lower resolution part (if not restart) 
(( hour_lr_ini = fhmaxh - HOUTSPS ))

case $cyc in
        00) export fhmax=$fhmax00;;
        06) export fhmax=$fhmax06;;
        12) export fhmax=$fhmax12;;
        18) export fhmax=$fhmax18;;
esac

###############################################################
# Specify locations of the following scripts and executables
###############################################################
export CHGRESTHREAD=4
export OVERPARMEXEC=$EXECutil/overparm_grib

# Change Resolution script and executable
export chgresush=$USHgsm/global_chgres.sh
export CHGRESEXEC=$EXECgsm/global_chgres

# forecast script  and executable
export fcstscript=$HOMEgsm/scripts/exglobal_fcst_nems.sh.ecf
export FCSTEXEC=$EXECgsm/global_fcst
export ERRSCRIPT=err_chk
export LOGSCRIPT=startmsg

#  The VEGTYPE fix file:
export FNVETC=${FNVETC:-${FIXGLOBAL}/global_vegtype.1x1.grb}
export FNTSFC=${FNTSFC:-${FIXGLOBAL}/RTGSST.1982.2012.monthly.clim.grb}
export FNAISC=${FNAISC:-${FIXGLOBAL}/CFSR.SEAICE.1982.2012.monthly.clim.grb}

export SIGHDR=${EXECgsm}/global_sighdr
export SFCHDR=${EXECgsm}/global_sfchdr
export SIGHDR=$nemsioget
export SFCHDR=$nemsioget



####################################
# Create member list
####################################

export RUNMEM=$RUNMEM
export mem=`echo $RUNMEM|cut -c3-5`

#
# Forecast Input Variables
#
. $PARMgefs/gefs_fcst.parm
export ialb=1
export cdmbgwd=3.5,0.25
export random_clds=.true.

# end of from GEFS previous J job script.

#--------------------------------------------
export KMP_AFFINITY=disabled
export OMP_STACKSIZE=1024m
export MP_LABELIO=yes

#--------------------------------------------
# Configuration file for running NEMS FV3GFS 
#--------------------------------------------
#--------------------------------------------
mac=`hostname |cut -c1`

machine=WCOSS_C
NEMS=YES
CSTEP=fcst1
if [ $machine = WCOSS ]; then
 EXPDIR=/global/save/$LOGNAME/para_gfs/pr$PSLOT
elif [ $machine = WCOSS_C ]; then
# EXPDIR=/gpfs/hps/emc/ensemble/noscrub/$LOGNAME/Bing.Fu/para_gfs/pr$PSLOT
 EXPDIR=/gpfs/hps/emc/ensemble/save/emc.enspara/Bing.Fu/nemsfv3gefs/nwdev/parm
elif [ $machine = THEIA ]; then
IO_IN=.true.
NEMSIO_OUT=.true.
IPD4=YES
fi
# ----------------------------------
# user account 
# ----------------------------------
if [ $machine = WCOSS ]; then
 . /usrx/local/Modules/3.2.10/init/ksh
 module unload ics/12.1
 module load ics/15.0.3
 CUE2RUN=devhigh2
 CUE2RUN1=devhigh2
 CUE2RUNA=transfer
 RUN_ENVIR=para
 ACCOUNT=FV3GFS-T2O
 group_name=rstprod
 GROUP=dev
 max_core=24
 pe_node=24
 memory_node=3072

elif [ $machine = WCOSS_C ]; then
 . $MODULESHOME/init/sh  2>>/dev/null
 module load PrgEnv-intel cray-mpich crtm-intel/2.2.4 cfp-intel-sandybridge 2>>/dev/null
 module load prod_envir prod_util grib_util/1.0.3 hpss g2tmpl-intel/1.4.0 2>>/dev/null
 CUE2RUN=devhigh
 CUE2RUN1=devhigh
 CUE2RUNA=dev_transfer
 RUN_ENVIR=para
 ACCOUNT=FV3GFS-T2O
 group_name=rstprod
 GROUP=dev
 max_core=24
 pe_node=24
 memory_node=3072
elif [ $machine = THEIA ]; then
 CUE2RUN=batch
 CUE2RUN1=batch
 CUE2RUNA=service
 RUN_ENVIR=para
 ACCOUNT=FV3GFS-T2O
 group_name=global
 GROUP=global
 max_core=24
 pe_node=24
 memory_node=3072

 OMP_STACKSIZE=500M
 MPI_BUFS_PER_HOST=1024
 MPI_BUFS_PER_PROC=1024
 if [ $CSTEP = fcst1 -o $CSTEP = fcst2 -o $CSTEP = anal ]; then
  MPICH_FAST_MEMCPY="ENABLE"
  MPICH_MAX_SHORT_MSG_SIZE=4096
  MPICH_PTL_OTHER_EVENTS=100000
  MPICH_PTL_UNEX_EVENTS=400000
  MPI_BUFS_PER_HOST=2048
  MPI_BUFS_PER_PROC=2048
  KMP_STACKSIZE=2048m
  LAPI_DEBUG_SLOT_ATT_THRESH=5000000
  MP_STDOUTMODE=ordered
 fi
fi

# -----------------------------------------------
# directories: source scripts, running space etc
# -----------------------------------------------
CHKNXTJOB=NO
if [ $machine = WCOSS ]; then
 TOPDIR=/global                                       # DO NOT CHANGE
 DISK_GLOB=$TOPDIR/save
 NOSCRUB=/global/noscrub
 STMP=/stmpd3
 PTMP=/ptmpd3
 DMPDIR=/globaldump
 if [ $CDATE -lt 2014120100 ] ; then
    DMPDIR=/globaldump2
 else
    DMPDIR=/globaldump
 fi
 NWPROD=/nwprod
 NWPARA=/global/save/emc.glopara/nwpara
 PERTURBDIR=$NWPROD/fix/enkf_gfs
 BASE_SVN=/global/save/$LOGNAME/svn/fv3gfs
 tags=trunk_r88010
 nemsioget=/global/save/emc.glopara/bin/nemsio_get
 archsyndir=/com/arch/prod/syndat
elif [ $machine = WCOSS_C ]; then
 TOPDIR=/gpfs/hps/emc/ensemble                                       # DO NOT CHANGE
 DISK_GLOB=$TOPDIR/noscrub
 NOSCRUB=/gpfs/hps/emc/ensemble/noscrub
 STMP=/gpfs/hps/stmp
 PTMP=/gpfs/hps/ptmp
 DMPROOT=`echo $NWROOTp1 | cut -d"/" -f1-3`
 DMPDIR=$DMPROOT/emc/globaldump
 NWPROD=/gpfs/hps/nco/ops/nwprod
 NWPARA=/gpfs/hps/emc/global/save/emc.glopara/nwpara
 PERTURBDIR=$NWPROD/fix/enkf_gfs
 BASE_SVN=$DISK_GLOB/$LOGNAME/Bing.Fu/svn/fv3gfs
 tags=trunk
 nemsioget=/gpfs/hps/emc/global/noscrub/emc.glopara/bin/nemsio_get
 archsyndir=$COMROOTp1/arch/prod/syndat
 FIX_FV3=/gpfs/hps/emc/global/noscrub/emc.glopara/svn/fv3gfs/fix_fv3
elif [ $machine = THEIA ]; then
 TOPDIR=/scratch4/NCEPDEV/global
 DISK_GLOB=$TOPDIR/save
 NOSCRUB=/scratch4/NCEPDEV/global/noscrub
 BASE_SVN=/scratch4/NCEPDEV/global/save/glopara/svn/fv3gfs
 STMP=/scratch4/NCEPDEV/stmp3
 PTMP=/scratch4/NCEPDEV/stmp4
 DMPDIR=/scratch4/NCEPDEV/global/noscrub/dump
 NWPROD=/scratch4/NCEPDEV/global/save/glopara/nwpara
 NWPARA=$NWPROD
 PERTURBDIR=$TOPDIR/noscrub/glopara/enkf/data254_specps
 archsyndir=/scratch4/NCEPDEV/rstprod/com/arch/prod/syndat
 utilscript=/scratch4/NCEPDEV/rstprod/nwprod/util/ush
 pe_node=24
 nemsioget=/home/glopara/bin/nemsio_util/nemsio_get
 tags=trunk_r88010
 FIX_FV3=/scratch4/NCEPDEV/global/save/glopara/svn/fv3gfs/fix_fv3
else
 echo '$machine is not supported, exit'
 exit
fi


envir=para
NET=gefs
ROTDIR=$ROTDIR
COMROT=$ROTDIR/${CDUMP}.$ymd/$cycn
COMDAY=$COMROT
VFYARC=$ROTDIR/vrfyarch

# ------------------- 
# COMPONENT SETTINGS 
# ------------------- 
# Version
workflow_ver=v15.0.0
gdas_ver=v15.0.0
gfs_ver=v15.0.0
global_shared_ver=v15.0.0
crtm_ver=v2.2.4
obsproc_prep_ver=v3.5.0
obsproc_prep_post_ver=v2.1.0
obsproc_global_ver=v2.1.1
verif_ver=v20
radmon_ver=2.0.2a
minmon_ver=1.0.0
# Location
BASEDIR=$BASE_SVN/$tags/gfs_workflow.$workflow_ver/para
BASE_BUFRSND=$BASE_SVN/$tags/gfs.$gfs_ver
BASE_ENKF=$BASE_SVN/$tags/gdas.$gdas_ver
BASE_EMCSFC=$BASE_SVN/$tags/global_shared.$global_shared_ver
BASE_GSM=$BASE_SVN/$tags/global_shared.$global_shared_ver
BASE_GSI=$BASE_SVN/$tags/global_shared.$global_shared_ver
BASE_TROPCY=$BASE_SVN/$tags/global_shared.$global_shared_ver
#BASE_POST=$BASE_SVN/$tags/global_shared.$global_shared_ver
BASE_POST=$BASE_SVN/post4fv3

#BASE_PREP=$BASE_SVN/obsproc/releases/obsproc_prep.$obsproc_prep_ver
BASE_PREP=$BASE_SVN/obsproc_prep_RB-3.5.0
#BASE_PREP_GLOBAL=$BASE_SVN/obsproc/releases/obsproc_global.$obsproc_global_ver
BASE_PREP_GLOBAL=$BASE_SVN/obsproc_global.$obsproc_global_ver
BASE_VERIF=$BASE_SVN/verif
if [ $machine = WCOSS_C ]; then
 BASE_MINMON=$BASE_SVN/$tags/global_shared.$global_shared_ver
 BASE_RADMON=$BASE_SVN/$tags/global_shared.$global_shared_ver
else
 BASE_MINMON=$BASE_SVN/verif/global/tags/Minimization_Monitor_${minmon_ver}
 BASE_RADMON=$BASE_SVN/verif/global/tags/Radiance_Monitor-${radmon_ver}
fi
BASE_OZNMON=$BASE_SVN/gsi/REL-5.0.0
BASE_NEMS=$BASE_SVN/NEMSfv3gfs/trunk/NEMS

PENDDIR=$PTMP
FIXSYND=$BASE_PREP/fix
HOMEALL=$NWPROD
SHDIR=$BASEDIR/bin
JOBSDIR=$BASEDIR/jobs
USHDIR=$BASEDIR/ush
USHENKF=$BASE_ENKF/ush
USHgdas=$BASE_ENKF/ush
SCRDIR=$BASE_GSM/scripts
SCRDIR_GSI=$BASE_GSI/scripts
SCRDIR_ENKF=$BASE_ENKF/scripts
EXECDIR=$BASEDIR/exec
SIGHDR=$nemsioget
SFCHDR=$nemsioget
ARCDIR=$NOSCRUB/$LOGNAME/Bing.Fu/archive/pr$PSLOT
FIT_DIR=$ARCDIR/fits                                    # Directory for SAVEFITS output
HORZ_DIR=$ARCDIR/horiz                                  # Directory for SAVEFITS output
DATATMP=$STMP/$LOGNAME/Bing.Fu/gefs.$PDY/$cyc/$mem
DATA=$DATATMP
TMPDIR=$DATATMP
KEEPDATA=NO

# ---------------------------
# utilities and misc options
# ----------------------------
NDATE=${NDATE:-$NWPROD/util/exec/ndate}
NHOUR=${NHOUR:-$NWPROD/util/exec/nhour}
WGRIB=${WGRIB:-$NWPROD/util/exec/wgrib}
WGRIB2=${WGRIB2:-$NWPROD/util/exec/wgrib2}
COPYGB=${COPYGB:-$NWPROD/util/exec/copygb}
COPYGB2=${COPYGB2:-$NWPROD/util/exec/copygb2}
BFCOMB=$EXECDIR/bufr_combfr
GRBINDEX=${GRBINDEX:-/nwprod2/grib_util.v1.0.1/exec/grbindex}
GRB2INDEX=${GRB2INDEX:-/nwprod2/grib_util.v1.0.1/exec/grb2index}
GRBINDEX2=$GRB2INDEX
windex=$GRBINDEX

PMKR=$BASEDIR/bin/pmkr
NCP="/bin/cp -p"
INHERIT_ENV=NO

if [ $machine = WCOSS ]; then
 HPSSTAR=/nwprod/util/ush/hpsstar
 HTAR=/usrx/local/hpss/htar
 HSI=/usrx/local/hpss/hsi
 SUB=$BASEDIR/bin/sub_wcoss
 PSUB=$BASEDIR/bin/psub
 PEND=$BASEDIR/bin/pend
elif [ $machine = WCOSS_C ]; then
 HPSSTAR=/u/emc.glopara/bin/hpsstar
 HTAR=/usrx/local/prod/hpss/htar
 HSI=/usrx/local/prod/hpss/hsi
 SUB=$BASEDIR/bin/sub_wcoss_c
 PSUB=$BASEDIR/bin/psub
 PEND=$BASEDIR/bin/pend
elif [ $machine = THEIA ]; then
 HPSSTAR=$USHDIR/hpsstar
 HTAR=/apps/hpss/htar
 HSI=/apps/hpss/hsi
 SUB=$BASEDIR/bin/sub_theia
 PSUB=$BASEDIR/bin/psub
 PEND=$BASEDIR/bin/pend_theia
fi

VERBOSE=YES
RESUBMIT=NO                         # resubmit a failed job - Defaults to NO
DODUMP=NO
RUNLOG=$EXPDIR/runlog
NEW_DAYFILE=YES                     # To create new dayfile for every rerun
step1=`echo $CSTEP | cut -c1-4`
step2=`echo $CSTEP | cut -c5-5`
nknd=${CKND:-${nknd:-1}}

# -------------------------------------------------------------
#  settings that are used by more than one steps
# -------------------------------------------------------------
gfs_cyc=1                          # GFS cycles (00, 06, 12 and 18Z), defaults to 1 (00Z) cycle
gdas_cyc=4                         # number of GDAS cycles
fseg=1                             # number of AM forecast segments for gfs 
FHCYC=24                             # Surface cycle calling interval

LEVS=64                            # number of AM levels
CASE1=C384                        # 1st segment resolution (0-240 hr)
CASE2=C384                         # 2nd segment resolution (240-384 hr)
CASE_ENKF=C382                     # ENKF resolution 
CASE=$(eval echo \${CASE$nknd})
if [ $CSTEP = efmn -o $CSTEP = epos ]; then CASE=$CASE_ENKF; fi

case $CASE in
  C48)   DELTIM=3600; layout_x=4  ; layout_y=8  ;;
  C96)   DELTIM=1800; layout_x=4  ; layout_y=8  ;;
  C192)  DELTIM=900 ; layout_x=4  ; layout_y=8  ;;
  C384)  DELTIM=450 ; layout_x=4  ; layout_y=8  ;;
  C768)  DELTIM=225 ; layout_x=8  ; layout_y=16 ;;
  C1152) DELTIM=150 ; layout_x=8  ; layout_y=16 ;;
  C3072) DELTIM=90  ; layout_x=16 ; layout_y=32 ;;
  *)     echo "grid $CASE not supported, exit"
         exit ;;
esac


fmax1=384; fmax2=384
fout1=3; fout2=12
fzer1=6; fzer2=12
for cyc1 in 00 06 12 18; do
 eval FHMAXFCST${cyc1}GFS1=$fmax1             # maximum forecast hour for 1st segment
 eval FHMAXFCST${cyc1}GFS2=$fmax2             # maximum forecast hour for 2st segment
 eval FHMAXFCST${cyc1}GDAS=9                  # maximum forecast hour for GDAS          
 eval FHOUTFCST${cyc1}GFS1=3
 eval FHOUTFCST${cyc1}GFS2=12
 eval FHOUTFCST${cyc1}GDAS=1
 eval FHZERFCST${cyc1}GFS1=6
 eval FHZERFCST${cyc1}GFS2=12
 eval FHZERFCST${cyc1}GDAs=6
 eval MFCST${cyc1}GFS=$fseg                   #number of GFS forecast segmants
 eval MFCST${cyc1}GDAS=1                      #number of GDAS forecast segments
done
cdump=$(echo $CDUMP|tr '[a-z]' '[A-Z]')
#FHMAX=$(eval echo \${FHMAXFCST$cycn$cdump$nknd})
#FHOUT=$(eval echo \${FHOUTFCST$cycn$cdump$nknd})
#FHZER=$(eval echo \${FHZERFCST$cycn$cdump$nknd})

FHMAX=$fmax1
FHOUT=$fout1
FHZER=$fzer1

#---if fdiag is given, it overwrites FHOUT
#fh00=$(echo $DELTIM 3600|awk '{printf "%f", $1/$2}')
#fdiag="$fh00,6.,12.,18.,24.,30.,36.,42.,48.,54.,60.,66.,72.,78.,84.,90.,96.,102.,108.,114.,120.,126.,132.,138.,144.,150.,156.,162.,168.,174.,180.,186.,192.,198.,204.,210.,216.,222.,228.,234.,240."
warm_start=.false.
#NFCST=$(echo $fdiag |awk -F '[\t,]' '{print NF}')   ;#number of forecast output



REMAP_GRID=latlon        #gaussian or latlon for using fregrid or regrid_nemsio for remapping 
CCPOST=NO                # To run concurrent post
ARCHIVE=YES              # make online archive

#  ----------------------------------
#  dump info used by multiple steps
#  ----------------------------------
COMDMP='$DMPDIR/$CDATE/${CDUMP}'
COMCOP='$DMPDIR/$CDATE/${CDUMP}'

#----------------------------------------------------------
#mkdir -p $COMROT $COMDAY $ARCDIR $FIT_DIR $HORZ_DIR $VFYARC
#permission=755
#chgrp rstprod $ARCDIR
#chgrp rstprod $FIT_DIR
#chgrp rstprod $HORZ_DIR
#chmod $permission $COMROT
#chmod $permission $COMDAY
#chmod $permission $ARCDIR
#chmod $permission $FIT_DIR
#chmod $permission $HORZ_DIR

# ----------------------------------
# options for NST in GFS & GSI
# ----------------------------------
 export NST_FCST=0           # default 0: No NSSTM,                                   W/O  Tr analysis
                             #         1: With NSSTM but run passively (uncoupled),   W/O  Tr analysis
                             #         2: With NSSTM and run actively    (coupled),   W/O  Tr analysis
 export NST_GSI=3            # default 0: No NST info at all;

                             #         1: Input NST info but not used in GSI;
                             #         2: Input NST info, used in CRTM simulation, no Tr analysis
                             #         3: Input NST info, used in both CRTM simulation and Tr analysis

 export NST_SPINUP=0      #  0 = NSSTM spinup off (default); 1 = NSSTM spinup on
#if [ $CDATE -eq 2017041700 ] ; then export NST_SPINUP=1; fi
 export NST_RESERVED=0    #  Reserved
 if [ $NST_GSI -eq 3 ]; then export NST_RESERVED=1; fi

 export ZSEA1=0           #  the upper depth (in mm) to do vertical mean of T-Profile (0 = default)
 export ZSEA2=5           #  the lower depth (in mm) to do vertical mean of T-Profile (0 = default)
 export nstf_name="$NST_FCST,$NST_SPINUP,$NST_RESERVED,$ZSEA1,$ZSEA2"
                          #
                          #  nstf_name is an integer array to hold the NSST model control parameters
                          #  nstf_name(1) : 0 (default) = No NSSTM; 1 = uncoupled; 2 = coupled (nstf_name(1) = NST_FCST)
                          #  nstf_name(2) : 0 (default) = NSST Spinup off; 1 = NSST Spinup on
                          #  nstf_name(3) : Reserved
                          #  nstf_name(4) : 0 (default) = the upper depth (in mm) to do vertical mean of T-Profile
                          #  nstf_name(5) : 0 (default) = the lower depth (in mm) to do vertical mean of T-Profile

 export nst_anl=.false.   #  .fasle. : NSST analysis off (default); true = NSST analysis on
 if [ $NST_GSI -eq 3 ]; then export nst_anl=.true.;  fi
 export NSTINFO=0         # number of elements added in obs. data array (default = 0)
 if [ $NST_GSI -gt 0 ]; then export NSTINFO=4; fi

 export TZR_QC=1          # 0 = Tzr_qc off (default); 1 = Tzr_qc on
 export FAC_DTL=1         # 0 = Diurnal Thermocline Model(DTM) off (default); 1 = DTM on
 export FAC_TSL=1         # 0 = Thermal Skin Model(TSM) off (default); 1 = TSM on
 export NST_STZR=0        # 0 = physical Tz retrieval save off; 1 =  Tz retrieval save on

export cdmbgwd="1.0,1.2"
FORECASTSH=$SCRDIR/exglobal_fcst_nemsfv3gfs.sh
EXECDIR=$BASE_GSM/sorc/fv3gfs.fd/BUILD/bin
IC_DIR=$FV3GESOUT/$mem
if [ $REMAP_GRID = latlon ]; then
 DIAG_TABLE=$BASE_GSM/parm/parm_fv3diag/diag_table
else
 DIAG_TABLE=$BASE_GSM/parm/parm_fv3diag/diag_table_history
fi

npes=$(( ${layout_x} * ${layout_y} * 6 ))
tasks=$npes                         # number of PEs for 1st segment
nth_f=2                             # number of threads for AM forecast
npe_node_f=$pe_node                 # number of pes per node for AM forecast
task_per_node=$((npe_node_f/nth_f))

MODE=32bit           # choices:  32bit, 64bit
TYPE=hydro              # choices:  nh, hydro
HYPT=off             # choices:  on, off  (controls hyperthreading)
COMP="prod"          # choices:  debug, repro, prod
ncep_plevels=".true."
if [ ${HYPT} = on ]; then
   export hyperthread=".true."
   export j_opt="-j 2"
else
   export hyperthread=".false."
   export j_opt="-j 1"
fi

#FCSTEXECDIR=$BASE_GSM/sorc/fv3gfs.fd/BUILD/bin
FCSTEXECDIR=/gpfs/hps/emc/ensemble/noscrub/emc.enspara/Bing.Fu/svn/fv3gfs/NEMSfv3gfs/trunk/NEMS/exe
FCSTEXEC=fv3_gfs_${TYPE}.${COMP}.${MODE}.x
APRUN="aprun -n $tasks -N $task_per_node -d $nth_f $j_opt -cc depth"

TIMELIMFCSTGFS1=10:00:00
TIMELIMFCSTGFS2=03:00:00
TIMELIMFCSTGDAS1=03:00:00
FHINI=0                              #forecast starting hour
FHRES=264                            #interval to write restart files
if [ $CSTEP = fcst2 ]; then
 FHINI=$fmax1
 FHRES=400
fi

USE_RESTART=NO                      #use restart file under COMROT/RESTART if run is interruptted
FHSTRT=6                            #restart from a given hour if USE_RESTART=YES


echo "-----end of $CONFIG in $0 --------"
echo

export CKSH=${CKSH:-$(echo $CSTEP|cut -c-4)}
export CKND=${CKND:-$(echo $CSTEP|cut -c5-)}
export machine=${machine:-WCOSS_C}
machine=$(echo $machine|tr '[a-z]' '[A-Z]')
eval export DATA=$DATATMP
rm -rf $DATA||exit 1; mkdir -p $DATA||exit 1; cd $DATA||exit 1
chmod ${permission:-755} $DATA

#
export PBEG=${PBEG:-$SHDIR/pbeg}
export PEND=${PEND:-$SHDIR/pend}
export PERR=${PERR:-$SHDIR/perr}
export VERBOSE=YES
################################################################################
export CDATE=$PDY$cyc
export ROTDIR=$GESOUT/$mem

testfile=$IC_DIR/${CASE}_$CDATE/sfc_data.tile6.nc
nsleep=0; tsleep=120;  msleep=50
while test ! -s $testfile -a $nsleep -lt $msleep;do
  sleep $tsleep; nsleep=`expr $nsleep + 1`
done

$FORECASTSH


