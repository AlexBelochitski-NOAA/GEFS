#!/bin/ksh
#####################################################################
# 9/20/2009, Julia Zhu   Scripts are modified to be sharable
#                        between EMC and NCO
#         Please note that variable "RUN_ENVIR" is set and used
#         in the development enviroment only.
# October 2014, Dingchen Hou   Scripts are modified to generate grib2 master files
# February 2015, Dingchin Hou   Scripts changed to vertical structure and cleaned following NCO requirements
######################################################################

# #### 02/06/06 ###############################
# GET GEFS POST PROCESSING VARIABLES  FROM GFS RUN
# #############################################

set -xa
echo `date` $0 begin
date

export gefsmachine=${gefsmachine:-wcoss}
export gefsmpexec=${gefsmpexec:-mpirun.lsf}

export GRIBVERSION=${GRIBVERSION:-grib2}

###########################################
# Run gefs_config to get input parameters
###########################################
if [ "$RUN_ENVIR" = dev ]      ### For Developers
then
# . $basesource/nw${envir}/versions/gefs.ver
  . $basesource/nwdev/parm/gefs_config
fi

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=$$
export DATAROOT=${DATAROOT:-/tmpnwprd_p2}
export DATA=${DATA:-$DATAROOT/${job}.${pid}}
mkdir -p $DATA
cd $DATA

jobgrid=$jobgrid

######################################
# Set up the cycle variable
######################################
export cycle=t${cyc}z

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gens}
export RUN=gfs

####################################
# File To Log Msgs
####################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}

####################################
# Determine Job Output Name on System
####################################
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

####################################
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# RERUN    - Rerun posts from beginning (default no)
# VERBOSE  - Specify Verbose Output in global_postgp.sh
####################################
  export SENDCOM=${SENDCOM:-YES}
  export SENDDBN=${SENDDBN:-YES}
  export SENDECF=${SENDECF:-YES}
  export VERBOSE=${VERBOSE:-NO}
  export RERUN=${RERUN:-NO}

  # Specify Execution Areas
  export HOMEgefs=${HOMEgefs:-${NWROOT}/gefs.${gefs_ver}}
  export HOMEgsm=${HOMEgsm:-${NWROOT}/gsm.${gsm_ver}}

  export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
  export USHgefs=${USHgefs:-$HOMEgefs/ush}
  export FIXgefs=${FIXgefs:-$HOMEgefs/fix}
  export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

export REDOUT='1>>'
export REDERR='2>'

##############################
# Run setup to initialize working directory and utility scripts
##############################
#sh setup.sh

##############################
# Run setpdy and initialize PDY variables
##############################
setpdy.sh
. PDY

##############################################
# Define COM directories
##############################################
export COMINgfs=${COMINgfs:-$COMROOTp1/gfs/prod/gfs.${PDY}}
export COMIN=$COMINgfs
export COMOUT=$COMROOT/${NET}/${envir}/gefs.${PDY}

if [[ "$makepgrb1" = "yes" ]]; then
mkdir -m 775 -p $COMOUT/$cyc/pgrba
mkdir -m 775 -p $COMOUT/$cyc/pgrbalr
fi
mkdir -m 775 -p $COMOUT/$cyc/pgrb2a
mkdir -m 775 -p $COMOUT/$cyc/pgrb2alr
mkdir -m 775 -p $COMOUT/$cyc/pgrb2ap5
mkdir -m 775 -p $COMOUT/$cyc/misc

##############################################
echo set parameters using gefs.parm
##############################################

 . $PARMgefs/gefs.parm

export NTHREADS=1

export POSTGPVARS_HIGH="IDRTC=0,IOC=360,JOC=181,IDRT=0,IO=360,JO=181,MOO=120,MOW=30,MOOA=120,MOWA=30,"
export POSTGPVARS_LOW="IDRTC=0,IOC=144,JOC=73,IDRT=0,IO=144,JO=73,MOO=48,MOW=12,MOOA=48,MOWA=12,"

####################################
# Specify Restart File Names to Key Off
####################################
#restart_file_a=$COMIN/${RUN}.t${cyc}z.pgrbf
#restart_file_b=$COMIN/${RUN}.t${cyc}z.pgrbif

####################################
# Specify Timeout Behavior of Post
#
# SLEEP_TIME - Amount of time to wait for
#              a restart file before exiting
# SLEEP_INT  - Amount of time to wait between
#              checking for restart files
####################################
export SLEEP_TIME=900
export SLEEP_INT=5


####################################
# Specify Forecast Hour Range
####################################
export SHOUR=00
export FHOUR_HIGH=$gfsfhmaxh
export fhoroglist=$gfsfhoroglist
export FHOUR_LOW=$fhmax
export FHINC_HIGH=6
export FHINC_LOW=12

export DO_HD_PGRB=NO
export HDMAX=00

#export dogrid2p5=YES
export jobgrid=$jobgrid
export DO_LOW_RES=YES 
if [[ $jobgrid == _p5 ]]; then
  export FHINC_HIGH=3
# export dogrid2p5=NO
  export DO_LOW_RES=NO 
fi
 
export MP_INFOLEVEL=6

env | sort

#################################
# Run High Res Prdgen if Needed
#################################
if test $SHOUR -le $FHOUR_HIGH
then
   export FHINC=$FHINC_HIGH
   export FHOUR=$FHOUR_HIGH
#  export DO_LOW_RES=YES 
   if (( $gfsgribedition == 1 )); then
    $HOMEgefs/scripts/exgefs_prdgen_gfs_grb1.sh.sms
   elif (( gfsgribedition == 2 )); then
    $HOMEgefs/scripts/exgefs_prdgen_gfs.sh.ecf
   fi
   export SHOUR=`expr $FHOUR_HIGH + $FHINC_LOW`
fi
#################################
# Run Low Res Prdgen if Needed
#################################
if test $SHOUR -lt $FHOUR_LOW
then
   export FHINC=$FHINC_LOW
   export FHOUR=$FHOUR_LOW
   export DO_LOW_RES=YES 
   export POSTGPVARS_HIGH=$POSTGPVARS_LOW
   if (( gfsgribedition == 1 )); then
    $HOMEgefs/scripts/exgefs_prdgen_gfs_grb1.sh.sms
   elif (( gfsgribedition == 2 )); then
    $HOMEgefs/scripts/exgefs_prdgen_gfs.sh.ecf
   fi
fi

msg="$job completed normally"
postmsg "$jlogfile" "$msg"

##############################
# Remove the Temporary working directory
##############################
if [[ $KEEPDATA != "YES" ]]; then
 cd $DATA_IN
 rm -rf $DATA
fi

echo `date` $0 end
